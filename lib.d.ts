/*
 * The following file is based on:
   * multiple TypeScript definition files owned by Microsoft Corporation and licensed under Apache Version 2.0 License
     * https://github.com/Microsoft/TypeScript/blob/master/lib/lib.es5.d.ts - modified
     * https://github.com/Microsoft/TypeScript/blob/master/lib/lib.dom.d.ts - modified
   * DefinitelyTyped definitions for jQuery by multiple contributors licesed under MIT License
     * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/jquery/index.d.ts
   * Declarations for MediaWiki Core JavaScript API created by Tomasz Chojnacki under MIT License based on https://doc.wikimedia.org/mediawiki-core/master/js/ licensed under CC-BY-SA 3.0
 *
 */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved. 
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0  
 
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, 
MERCHANTABLITY OR NON-INFRINGEMENT. 
 
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/// <reference no-default-lib="true"/>

/////////////////////////////
/// ECMAScript APIs
/////////////////////////////

declare const NaN: number;
declare const Infinity: number;

/**
  * Evaluates JavaScript code and executes it.
  * @param x A String value that contains valid JavaScript code.
  */
declare function eval(x: string): any;

/**
  * Converts A string to an integer.
  * @param s A string to convert into a number.
  * @param radix A value between 2 and 36 that specifies the base of the number in numString.
  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.
  * All other strings are considered decimal.
  */
declare function parseInt(s: string, radix?: number): number;

/**
  * Converts a string to a floating-point number.
  * @param string A string that contains a floating-point number.
  */
declare function parseFloat(string: string): number;

/**
  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).
  * @param number A numeric value.
  */
declare function isNaN(number: number): boolean;

/**
  * Determines whether a supplied number is finite.
  * @param number Any numeric value.
  */
declare function isFinite(number: number): boolean;

/**
  * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).
  * @param encodedURI A value representing an encoded URI.
  */
declare function decodeURI(encodedURI: string): string;

/**
  * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).
  * @param encodedURIComponent A value representing an encoded URI component.
  */
declare function decodeURIComponent(encodedURIComponent: string): string;

/**
  * Encodes a text string as a valid Uniform Resource Identifier (URI)
  * @param uri A value representing an encoded URI.
  */
declare function encodeURI(uri: string): string;

/**
  * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).
  * @param uriComponent A value representing an encoded URI component.
  */
declare function encodeURIComponent(uriComponent: string): string;

/**
  * Computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.
  * @param string A string value
  */
declare function escape(string: string): string;

/**
  * Computes a new string in which hexadecimal escape sequences are replaced with the character that it represents.
  * @param string A string value
  */
declare function unescape(string: string): string;

interface Symbol {
  /** Returns a string representation of an object. */
  toString(): string;

  /** Returns the primitive value of the specified object. */
  valueOf(): symbol;
}

type PropertyKey = string | number | symbol;

interface PropertyDescriptor {
    configurable?: boolean;
    enumerable?: boolean;
    value?: any;
    writable?: boolean;
    get?(): any;
    set?(v: any): void;
}

interface PropertyDescriptorMap {
    [s: string]: PropertyDescriptor;
}

interface Object {
    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */
    constructor: Function;

    /** Returns a string representation of an object. */
    toString(): string;

    /** Returns a date converted to a string using the current locale. */
    toLocaleString(): string;

    /** Returns the primitive value of the specified object. */
    valueOf(): Object;

    /**
      * Determines whether an object has a property with the specified name.
      * @param v A property name.
      */
    hasOwnProperty(v: PropertyKey): boolean;

    /**
      * Determines whether an object exists in another object's prototype chain.
      * @param v Another object whose prototype chain is to be checked.
      */
    isPrototypeOf(v: Object): boolean;

    /**
      * Determines whether a specified property is enumerable.
      * @param v A property name.
      */
    propertyIsEnumerable(v: PropertyKey): boolean;
}

interface ObjectConstructor {
    new(value?: any): Object;
    (): any;
    (value: any): any;

    /** A reference to the prototype for a class of objects. */
    readonly prototype: Object;

    /**
      * Returns the prototype of an object.
      * @param o The object that references the prototype.
      */
    getPrototypeOf(o: any): any;

    /**
      * Gets the own property descriptor of the specified object.
      * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.
      * @param o Object that contains the property.
      * @param p Name of the property.
    */
    getOwnPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor | undefined;

    /**
      * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly
      * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.
      * @param o Object that contains the own properties.
      */
    getOwnPropertyNames(o: any): string[];

    /**
      * Creates an object that has the specified prototype or that has null prototype.
      * @param o Object to use as a prototype. May be null.
      */
    create(o: object | null): any;

    /**
      * Creates an object that has the specified prototype, and that optionally contains specified properties.
      * @param o Object to use as a prototype. May be null
      * @param properties JavaScript object that contains one or more property descriptors.
      */
    create(o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;

    /**
      * Adds a property to an object, or modifies attributes of an existing property.
      * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.
      * @param p The property name.
      * @param attributes Descriptor for the property. It can be for a data property or an accessor property.
      */
    defineProperty(o: any, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): any;

    /**
      * Adds one or more properties to an object, and/or modifies attributes of existing properties.
      * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.
      * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.
      */
    defineProperties(o: any, properties: PropertyDescriptorMap & ThisType<any>): any;

    /**
      * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.
      * @param o Object on which to lock the attributes.
      */
    seal<T>(o: T): T;

    /**
      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
      * @param o Object on which to lock the attributes.
      */
    freeze<T>(a: T[]): ReadonlyArray<T>;

    /**
      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
      * @param o Object on which to lock the attributes.
      */
    freeze<T extends Function>(f: T): T;

    /**
      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
      * @param o Object on which to lock the attributes.
      */
    freeze<T>(o: T): Readonly<T>;

    /**
      * Prevents the addition of new properties to an object.
      * @param o Object to make non-extensible.
      */
    preventExtensions<T>(o: T): T;

    /**
      * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.
      * @param o Object to test.
      */
    isSealed(o: any): boolean;

    /**
      * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.
      * @param o Object to test.
      */
    isFrozen(o: any): boolean;

    /**
      * Returns a value that indicates whether new properties can be added to an object.
      * @param o Object to test.
      */
    isExtensible(o: any): boolean;

    /**
      * Returns the names of the enumerable properties and methods of an object.
      * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
      */
    keys(o: {}): string[];
}

/**
  * Provides functionality common to all JavaScript objects.
  */
declare const Object: ObjectConstructor;

/**
  * Creates a new function.
  */
interface Function {
    /**
      * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.
      * @param thisArg The object to be used as the this object.
      * @param argArray A set of arguments to be passed to the function.
      */
    apply(this: Function, thisArg: any, argArray?: any): any;

    /**
      * Calls a method of an object, substituting another object for the current object.
      * @param thisArg The object to be used as the current object.
      * @param argArray A list of arguments to be passed to the method.
      */
    call(this: Function, thisArg: any, ...argArray: any[]): any;

    /**
      * For a given function, creates a bound function that has the same body as the original function.
      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.
      * @param thisArg An object to which the this keyword can refer inside the new function.
      * @param argArray A list of arguments to be passed to the new function.
      */
    bind(this: Function, thisArg: any, ...argArray: any[]): any;

    /** Returns a string representation of a function. */
    toString(): string;

    prototype: any;
    readonly length: number;

    // Non-standard extensions
    arguments: any;
    caller: Function;
}

interface FunctionConstructor {
    /**
      * Creates a new function.
      * @param args A list of arguments the function accepts.
      */
    new(...args: string[]): Function;
    (...args: string[]): Function;
    readonly prototype: Function;
}

declare const Function: FunctionConstructor;

interface IArguments {
    [index: number]: any;
    length: number;
    callee: Function;
}

interface String {
    /** Returns a string representation of a string. */
    toString(): string;

    /**
      * Returns the character at the specified index.
      * @param pos The zero-based index of the desired character.
      */
    charAt(pos: number): string;

    /**
      * Returns the Unicode value of the character at the specified location.
      * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.
      */
    charCodeAt(index: number): number;

    /**
      * Returns a string that contains the concatenation of two or more strings.
      * @param strings The strings to append to the end of the string.
      */
    concat(...strings: string[]): string;

    /**
      * Returns the position of the first occurrence of a substring.
      * @param searchString The substring to search for in the string
      * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.
      */
    indexOf(searchString: string, position?: number): number;

    /**
      * Returns the last occurrence of a substring in the string.
      * @param searchString The substring to search for.
      * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.
      */
    lastIndexOf(searchString: string, position?: number): number;

    /**
      * Determines whether two strings are equivalent in the current locale.
      * @param that String to compare to target string
      */
    localeCompare(that: string): number;

    /**
      * Matches a string with a regular expression, and returns an array containing the results of that search.
      * @param regexp A variable name or string literal containing the regular expression pattern and flags.
      */
    match(regexp: string | RegExp): RegExpMatchArray | null;

    /**
      * Replaces text in a string, using a regular expression or search string.
      * @param searchValue A string to search for.
      * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.
      */
    replace(searchValue: string | RegExp, replaceValue: string): string;

    /**
      * Replaces text in a string, using a regular expression or search string.
      * @param searchValue A string to search for.
      * @param replacer A function that returns the replacement text.
      */
    replace(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;

    /**
      * Finds the first substring match in a regular expression search.
      * @param regexp The regular expression pattern and applicable flags.
      */
    search(regexp: string | RegExp): number;

    /**
      * Returns a section of a string.
      * @param start The index to the beginning of the specified portion of stringObj.
      * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.
      * If this value is not specified, the substring continues to the end of stringObj.
      */
    slice(start?: number, end?: number): string;

    /**
      * Split a string into substrings using the specified separator and return them as an array.
      * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.
      * @param limit A value used to limit the number of elements returned in the array.
      */
    split(separator: string | RegExp, limit?: number): string[];

    /**
      * Returns the substring at the specified location within a String object.
      * @param start The zero-based index number indicating the beginning of the substring.
      * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.
      * If end is omitted, the characters from start through the end of the original string are returned.
      */
    substring(start: number, end?: number): string;

    /** Converts all the alphabetic characters in a string to lowercase. */
    toLowerCase(): string;

    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */
    toLocaleLowerCase(): string;

    /** Converts all the alphabetic characters in a string to uppercase. */
    toUpperCase(): string;

    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */
    toLocaleUpperCase(): string;

    /** Removes the leading and trailing white space and line terminator characters from a string. */
    trim(): string;

    /** Returns the length of a String object. */
    readonly length: number;

    // IE extensions
    /**
      * Gets a substring beginning at the specified location and having the specified length.
      * @param from The starting position of the desired substring. The index of the first character in the string is zero.
      * @param length The number of characters to include in the returned substring.
      */
    substr(from: number, length?: number): string;

    /** Returns the primitive value of the specified object. */
    valueOf(): string;

    readonly [index: number]: string;
}

interface StringConstructor {
    new(value?: any): String;
    (value?: any): string;
    readonly prototype: String;
    fromCharCode(...codes: number[]): string;
}

/**
  * Allows manipulation and formatting of text strings and determination and location of substrings within strings.
  */
declare const String: StringConstructor;

interface Boolean {
    /** Returns the primitive value of the specified object. */
    valueOf(): boolean;
}

interface BooleanConstructor {
    new(value?: any): Boolean;
    (value?: any): boolean;
    readonly prototype: Boolean;
}

declare const Boolean: BooleanConstructor;

interface Number {
    /**
      * Returns a string representation of an object.
      * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.
      */
    toString(radix?: number): string;

    /**
      * Returns a string representing a number in fixed-point notation.
      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
      */
    toFixed(fractionDigits?: number): string;

    /**
      * Returns a string containing a number represented in exponential notation.
      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
      */
    toExponential(fractionDigits?: number): string;

    /**
      * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.
      * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.
      */
    toPrecision(precision?: number): string;

    /** Returns the primitive value of the specified object. */
    valueOf(): number;
}

interface NumberConstructor {
    new(value?: any): Number;
    (value?: any): number;
    readonly prototype: Number;

    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */
    readonly MAX_VALUE: number;

    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */
    readonly MIN_VALUE: number;

    /**
      * A value that is not a number.
      * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.
      */
    readonly NaN: number;

    /**
      * A value that is less than the largest negative number that can be represented in JavaScript.
      * JavaScript displays NEGATIVE_INFINITY values as -infinity.
      */
    readonly NEGATIVE_INFINITY: number;

    /**
      * A value greater than the largest number that can be represented in JavaScript.
      * JavaScript displays POSITIVE_INFINITY values as infinity.
      */
    readonly POSITIVE_INFINITY: number;
}

/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */
declare const Number: NumberConstructor;

interface TemplateStringsArray extends ReadonlyArray<string> {
    readonly raw: ReadonlyArray<string>;
}

/**
 * The type of `import.meta`.
 * 
 * If you need to declare that a given property exists on `import.meta`,
 * this type may be augmented via interface merging.
 */
interface ImportMeta {
}

interface Math {
    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */
    readonly E: number;
    /** The natural logarithm of 10. */
    readonly LN10: number;
    /** The natural logarithm of 2. */
    readonly LN2: number;
    /** The base-2 logarithm of e. */
    readonly LOG2E: number;
    /** The base-10 logarithm of e. */
    readonly LOG10E: number;
    /** Pi. This is the ratio of the circumference of a circle to its diameter. */
    readonly PI: number;
    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */
    readonly SQRT1_2: number;
    /** The square root of 2. */
    readonly SQRT2: number;
    /**
      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).
      * For example, the absolute value of -5 is the same as the absolute value of 5.
      * @param x A numeric expression for which the absolute value is needed.
      */
    abs(x: number): number;
    /**
      * Returns the arc cosine (or inverse cosine) of a number.
      * @param x A numeric expression.
      */
    acos(x: number): number;
    /**
      * Returns the arcsine of a number.
      * @param x A numeric expression.
      */
    asin(x: number): number;
    /**
      * Returns the arctangent of a number.
      * @param x A numeric expression for which the arctangent is needed.
      */
    atan(x: number): number;
    /**
      * Returns the angle (in radians) from the X axis to a point.
      * @param y A numeric expression representing the cartesian y-coordinate.
      * @param x A numeric expression representing the cartesian x-coordinate.
      */
    atan2(y: number, x: number): number;
    /**
      * Returns the smallest integer greater than or equal to its numeric argument.
      * @param x A numeric expression.
      */
    ceil(x: number): number;
    /**
      * Returns the cosine of a number.
      * @param x A numeric expression that contains an angle measured in radians.
      */
    cos(x: number): number;
    /**
      * Returns e (the base of natural logarithms) raised to a power.
      * @param x A numeric expression representing the power of e.
      */
    exp(x: number): number;
    /**
      * Returns the greatest integer less than or equal to its numeric argument.
      * @param x A numeric expression.
      */
    floor(x: number): number;
    /**
      * Returns the natural logarithm (base e) of a number.
      * @param x A numeric expression.
      */
    log(x: number): number;
    /**
      * Returns the larger of a set of supplied numeric expressions.
      * @param values Numeric expressions to be evaluated.
      */
    max(...values: number[]): number;
    /**
      * Returns the smaller of a set of supplied numeric expressions.
      * @param values Numeric expressions to be evaluated.
      */
    min(...values: number[]): number;
    /**
      * Returns the value of a base expression taken to a specified power.
      * @param x The base value of the expression.
      * @param y The exponent value of the expression.
      */
    pow(x: number, y: number): number;
    /** Returns a pseudorandom number between 0 and 1. */
    random(): number;
    /**
      * Returns a supplied numeric expression rounded to the nearest number.
      * @param x The value to be rounded to the nearest number.
      */
    round(x: number): number;
    /**
      * Returns the sine of a number.
      * @param x A numeric expression that contains an angle measured in radians.
      */
    sin(x: number): number;
    /**
      * Returns the square root of a number.
      * @param x A numeric expression.
      */
    sqrt(x: number): number;
    /**
      * Returns the tangent of a number.
      * @param x A numeric expression that contains an angle measured in radians.
      */
    tan(x: number): number;
}
/** An intrinsic object that provides basic mathematics functionality and constants. */
declare const Math: Math;

/** Enables basic storage and retrieval of dates and times. */
interface Date {
    /** Returns a string representation of a date. The format of the string depends on the locale. */
    toString(): string;
    /** Returns a date as a string value. */
    toDateString(): string;
    /** Returns a time as a string value. */
    toTimeString(): string;
    /** Returns a value as a string value appropriate to the host environment's current locale. */
    toLocaleString(): string;
    /** Returns a date as a string value appropriate to the host environment's current locale. */
    toLocaleDateString(): string;
    /** Returns a time as a string value appropriate to the host environment's current locale. */
    toLocaleTimeString(): string;
    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */
    valueOf(): number;
    /** Gets the time value in milliseconds. */
    getTime(): number;
    /** Gets the year, using local time. */
    getFullYear(): number;
    /** Gets the year using Universal Coordinated Time (UTC). */
    getUTCFullYear(): number;
    /** Gets the month, using local time. */
    getMonth(): number;
    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */
    getUTCMonth(): number;
    /** Gets the day-of-the-month, using local time. */
    getDate(): number;
    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */
    getUTCDate(): number;
    /** Gets the day of the week, using local time. */
    getDay(): number;
    /** Gets the day of the week using Universal Coordinated Time (UTC). */
    getUTCDay(): number;
    /** Gets the hours in a date, using local time. */
    getHours(): number;
    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */
    getUTCHours(): number;
    /** Gets the minutes of a Date object, using local time. */
    getMinutes(): number;
    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */
    getUTCMinutes(): number;
    /** Gets the seconds of a Date object, using local time. */
    getSeconds(): number;
    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */
    getUTCSeconds(): number;
    /** Gets the milliseconds of a Date, using local time. */
    getMilliseconds(): number;
    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */
    getUTCMilliseconds(): number;
    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */
    getTimezoneOffset(): number;
    /**
      * Sets the date and time value in the Date object.
      * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.
      */
    setTime(time: number): number;
    /**
      * Sets the milliseconds value in the Date object using local time.
      * @param ms A numeric value equal to the millisecond value.
      */
    setMilliseconds(ms: number): number;
    /**
      * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).
      * @param ms A numeric value equal to the millisecond value.
      */
    setUTCMilliseconds(ms: number): number;

    /**
      * Sets the seconds value in the Date object using local time.
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setSeconds(sec: number, ms?: number): number;
    /**
      * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setUTCSeconds(sec: number, ms?: number): number;
    /**
      * Sets the minutes value in the Date object using local time.
      * @param min A numeric value equal to the minutes value.
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setMinutes(min: number, sec?: number, ms?: number): number;
    /**
      * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).
      * @param min A numeric value equal to the minutes value.
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setUTCMinutes(min: number, sec?: number, ms?: number): number;
    /**
      * Sets the hour value in the Date object using local time.
      * @param hours A numeric value equal to the hours value.
      * @param min A numeric value equal to the minutes value.
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setHours(hours: number, min?: number, sec?: number, ms?: number): number;
    /**
      * Sets the hours value in the Date object using Universal Coordinated Time (UTC).
      * @param hours A numeric value equal to the hours value.
      * @param min A numeric value equal to the minutes value.
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
    /**
      * Sets the numeric day-of-the-month value of the Date object using local time.
      * @param date A numeric value equal to the day of the month.
      */
    setDate(date: number): number;
    /**
      * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).
      * @param date A numeric value equal to the day of the month.
      */
    setUTCDate(date: number): number;
    /**
      * Sets the month value in the Date object using local time.
      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
      */
    setMonth(month: number, date?: number): number;
    /**
      * Sets the month value in the Date object using Universal Coordinated Time (UTC).
      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
      * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.
      */
    setUTCMonth(month: number, date?: number): number;
    /**
      * Sets the year of the Date object using local time.
      * @param year A numeric value for the year.
      * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.
      * @param date A numeric value equal for the day of the month.
      */
    setFullYear(year: number, month?: number, date?: number): number;
    /**
      * Sets the year value in the Date object using Universal Coordinated Time (UTC).
      * @param year A numeric value equal to the year.
      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.
      * @param date A numeric value equal to the day of the month.
      */
    setUTCFullYear(year: number, month?: number, date?: number): number;
    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */
    toUTCString(): string;
    /** Returns a date as a string value in ISO format. */
    toISOString(): string;
    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */
    toJSON(key?: any): string;
}

interface DateConstructor {
    new(): Date;
    new(value: number | string): Date;
    new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;
    (): string;
    readonly prototype: Date;
    /**
      * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.
      * @param s A date string
      */
    parse(s: string): number;
    /**
      * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.
      * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.
      * @param month The month as an number between 0 and 11 (January to December).
      * @param date The date as an number between 1 and 31.
      * @param hours Must be supplied if minutes is supplied. An number from 0 to 23 (midnight to 11pm) that specifies the hour.
      * @param minutes Must be supplied if seconds is supplied. An number from 0 to 59 that specifies the minutes.
      * @param seconds Must be supplied if milliseconds is supplied. An number from 0 to 59 that specifies the seconds.
      * @param ms An number from 0 to 999 that specifies the milliseconds.
      */
    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;
    now(): number;
}

declare const Date: DateConstructor;

interface RegExpMatchArray extends Array<string> {
    index?: number;
    input?: string;
}

interface RegExpExecArray extends Array<string> {
    index: number;
    input: string;
}

interface RegExp {
    /**
      * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.
      * @param string The String object or string literal on which to perform the search.
      */
    exec(string: string): RegExpExecArray | null;

    /**
      * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.
      * @param string String on which to perform the search.
      */
    test(string: string): boolean;

    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */
    readonly source: string;

    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */
    readonly global: boolean;

    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */
    readonly ignoreCase: boolean;

    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */
    readonly multiline: boolean;

    lastIndex: number;

    // Non-standard extensions
    compile(): this;
}

interface RegExpConstructor {
    new(pattern: RegExp | string): RegExp;
    new(pattern: string, flags?: string): RegExp;
    (pattern: RegExp | string): RegExp;
    (pattern: string, flags?: string): RegExp;
    readonly prototype: RegExp;

    // Non-standard extensions
    $1: string;
    $2: string;
    $3: string;
    $4: string;
    $5: string;
    $6: string;
    $7: string;
    $8: string;
    $9: string;
    lastMatch: string;
}

declare const RegExp: RegExpConstructor;

interface Error {
    name: string;
    message: string;
    stack?: string;
}

interface ErrorConstructor {
    new(message?: string): Error;
    (message?: string): Error;
    readonly prototype: Error;
}

declare const Error: ErrorConstructor;

interface EvalError extends Error {
}

interface EvalErrorConstructor {
    new(message?: string): EvalError;
    (message?: string): EvalError;
    readonly prototype: EvalError;
}

interface RangeError extends Error {
}

interface RangeErrorConstructor {
    new(message?: string): RangeError;
    (message?: string): RangeError;
    readonly prototype: RangeError;
}

interface ReferenceError extends Error {
}

interface ReferenceErrorConstructor {
    new(message?: string): ReferenceError;
    (message?: string): ReferenceError;
    readonly prototype: ReferenceError;
}

interface SyntaxError extends Error {
}

interface SyntaxErrorConstructor {
    new(message?: string): SyntaxError;
    (message?: string): SyntaxError;
    readonly prototype: SyntaxError;
}

interface TypeError extends Error {
}

interface TypeErrorConstructor {
    new(message?: string): TypeError;
    (message?: string): TypeError;
    readonly prototype: TypeError;
}

interface URIError extends Error {
}

interface URIErrorConstructor {
    new(message?: string): URIError;
    (message?: string): URIError;
    readonly prototype: URIError;
}

interface JSON {
    /**
      * Converts a JavaScript Object Notation (JSON) string into an object.
      * @param text A valid JSON string.
      * @param reviver A function that transforms the results. This function is called for each member of the object.
      * If a member contains nested objects, the nested objects are transformed before the parent object is.
      */
    parse(text: string, reviver?: (key: any, value: any) => any): any;
    /**
      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
      * @param value A JavaScript value, usually an object or array, to be converted.
      * @param replacer A function that transforms the results.
      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
      */
    stringify(value: any, replacer?: (key: string, value: any) => any, space?: string | number): string;
    /**
      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
      * @param value A JavaScript value, usually an object or array, to be converted.
      * @param replacer An array of strings and numbers that acts as a approved list for selecting the object properties that will be stringified.
      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
      */
    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;
}

/**
  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.
  */
declare const JSON: JSON;


/////////////////////////////
/// ECMAScript Array API (specially handled by compiler)
/////////////////////////////

interface ReadonlyArray<T> {
    /**
      * Gets the length of the array. This is a number one higher than the highest element defined in an array.
      */
    readonly length: number;
    /**
      * Returns a string representation of an array.
      */
    toString(): string;
    /**
      * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.
      */
    toLocaleString(): string;
    /**
      * Combines two or more arrays.
      * @param items Additional items to add to the end of array1.
      */
    concat(...items: ConcatArray<T>[]): T[];
    /**
      * Combines two or more arrays.
      * @param items Additional items to add to the end of array1.
      */
    concat(...items: (T | ConcatArray<T>)[]): T[];
    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;
    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): T[];
    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
      */
    indexOf(searchElement: T, fromIndex?: number): number;
    /**
      * Returns the index of the last occurrence of a specified value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.
      */
    lastIndexOf(searchElement: T, fromIndex?: number): number;
    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => boolean, thisArg?: any): boolean;
    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => boolean, thisArg?: any): boolean;
    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => void, thisArg?: any): void;
    /**
      * Calls a defined callback function on each element of an array, and returns an array that contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    map<U>(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => U, thisArg?: any): U[];
    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
    filter<S extends T>(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => value is S, thisArg?: any): S[];
    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => any, thisArg?: any): T[];
    /**
      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T): T;
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T, initialValue: T): T;
    /**
      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => U, initialValue: U): U;
    /**
      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T): T;
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T, initialValue: T): T;
    /**
      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => U, initialValue: U): U;

    readonly [n: number]: T;
}

interface ConcatArray<T> {
    readonly length: number;
    readonly [n: number]: T;
    join(separator?: string): string;
    slice(start?: number, end?: number): T[];
}

interface Array<T> {
    /**
      * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.
      */
    length: number;
    /**
      * Returns a string representation of an array.
      */
    toString(): string;
    /**
      * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.
      */
    toLocaleString(): string;
    /**
      * Appends new elements to an array, and returns the new length of the array.
      * @param items New elements of the Array.
      */
    push(...items: T[]): number;
    /**
      * Removes the last element from an array and returns it.
      */
    pop(): T | undefined;
    /**
      * Combines two or more arrays.
      * @param items Additional items to add to the end of array1.
      */
    concat(...items: ConcatArray<T>[]): T[];
    /**
      * Combines two or more arrays.
      * @param items Additional items to add to the end of array1.
      */
    concat(...items: (T | ConcatArray<T>)[]): T[];
    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;
    /**
      * Reverses the elements in an Array.
      */
    reverse(): T[];
    /**
      * Removes the first element from an array and returns it.
      */
    shift(): T | undefined;
    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): T[];
    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: T, b: T) => number): this;
    /**
      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
      * @param start The zero-based location in the array from which to start removing elements.
      * @param deleteCount The number of elements to remove.
      */
    splice(start: number, deleteCount?: number): T[];
    /**
      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
      * @param start The zero-based location in the array from which to start removing elements.
      * @param deleteCount The number of elements to remove.
      * @param items Elements to insert into the array in place of the deleted elements.
      */
    splice(start: number, deleteCount: number, ...items: T[]): T[];
    /**
      * Inserts new elements at the start of an array.
      * @param items  Elements to insert at the start of the Array.
      */
    unshift(...items: T[]): number;
    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
      */
    indexOf(searchElement: T, fromIndex?: number): number;
    /**
      * Returns the index of the last occurrence of a specified value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.
      */
    lastIndexOf(searchElement: T, fromIndex?: number): number;
    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;
    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;
    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;
    /**
      * Calls a defined callback function on each element of an array, and returns an array that contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];
    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
    filter<S extends T>(callbackfn: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];
    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: T, index: number, array: T[]) => any, thisArg?: any): T[];
    /**
      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    /**
      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;
    /**
      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    /**
      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;

    [n: number]: T;
}

interface ArrayConstructor {
    new(arrayLength?: number): any[];
    new <T>(arrayLength: number): T[];
    new <T>(...items: T[]): T[];
    (arrayLength?: number): any[];
    <T>(arrayLength: number): T[];
    <T>(...items: T[]): T[];
    isArray(arg: any): arg is Array<any>;
    readonly prototype: Array<any>;
}

declare const Array: ArrayConstructor;

interface TypedPropertyDescriptor<T> {
    enumerable?: boolean;
    configurable?: boolean;
    writable?: boolean;
    value?: T;
    get?: () => T;
    set?: (value: T) => void;
}

type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;
type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;
type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;
type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;

type PromiseConstructorLike = new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;

interface PromiseLike<T> {
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;
}

/**
 * Represents the completion of an asynchronous operation
 */
interface Promise<T> {
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;

    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
}

interface ArrayLike<T> {
    readonly length: number;
    readonly [n: number]: T;
}

/**
 * Make all properties in T optional
 */
type Partial<T> = {
    [P in keyof T]?: T[P];
};

/**
 * Make all properties in T required
 */
type Required<T> = {
    [P in keyof T]-?: T[P];
};

/**
 * Make all properties in T readonly
 */
type Readonly<T> = {
    readonly [P in keyof T]: T[P];
};

/**
 * From T pick a set of properties K
 */
type Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

/**
 * Construct a type with a set of properties K of type T
 */
type Record<K extends keyof any, T> = {
    [P in K]: T;
};

/**
 * Exclude from T those types that are assignable to U
 */
type Exclude<T, U> = T extends U ? never : T;

/**
 * Extract from T those types that are assignable to U
 */
type Extract<T, U> = T extends U ? T : never;

/**
 * Exclude null and undefined from T
 */
type NonNullable<T> = T extends null | undefined ? never : T;

/**
 * Obtain the return type of a function type
 */
type ReturnType<T extends (...args: any[]) => any> = T extends (...args: any[]) => infer R ? R : any;

/**
 * Obtain the return type of a constructor function type
 */
type InstanceType<T extends new (...args: any[]) => any> = T extends new (...args: any[]) => infer R ? R : any;

/**
 * Marker for contextual 'this' type
 */
interface ThisType<T> { }

/**
  * Represents a raw buffer of binary data, which is used to store data for the
  * different typed arrays. ArrayBuffers cannot be read from or written to directly,
  * but can be passed to a typed array or DataView Object to interpret the raw
  * buffer as needed.
  */
interface ArrayBuffer {
    /**
      * Read-only. The length of the ArrayBuffer (in bytes).
      */
    readonly byteLength: number;

    /**
      * Returns a section of an ArrayBuffer.
      */
    slice(begin: number, end?: number): ArrayBuffer;
}

/**
 * Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.
 */
interface ArrayBufferTypes {
    ArrayBuffer: ArrayBuffer;
}
type ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];

interface ArrayBufferConstructor {
    readonly prototype: ArrayBuffer;
    new(byteLength: number): ArrayBuffer;
    isView(arg: any): arg is ArrayBufferView;
}
const ArrayBuffer: ArrayBufferConstructor;

interface ArrayBufferView {
    /**
      * The ArrayBuffer instance referenced by the array.
      */
    buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    byteOffset: number;
}

interface DataView {
    readonly buffer: ArrayBuffer;
    readonly byteLength: number;
    readonly byteOffset: number;
    /**
      * Gets the Float32 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getFloat32(byteOffset: number, littleEndian?: boolean): number;

    /**
      * Gets the Float64 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getFloat64(byteOffset: number, littleEndian?: boolean): number;

    /**
      * Gets the Int8 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getInt8(byteOffset: number): number;

    /**
      * Gets the Int16 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getInt16(byteOffset: number, littleEndian?: boolean): number;
    /**
      * Gets the Int32 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getInt32(byteOffset: number, littleEndian?: boolean): number;

    /**
      * Gets the Uint8 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getUint8(byteOffset: number): number;

    /**
      * Gets the Uint16 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getUint16(byteOffset: number, littleEndian?: boolean): number;

    /**
      * Gets the Uint32 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getUint32(byteOffset: number, littleEndian?: boolean): number;

    /**
      * Stores an Float32 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;

    /**
      * Stores an Float64 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;

    /**
      * Stores an Int8 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      */
    setInt8(byteOffset: number, value: number): void;

    /**
      * Stores an Int16 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;

    /**
      * Stores an Int32 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;

    /**
      * Stores an Uint8 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      */
    setUint8(byteOffset: number, value: number): void;

    /**
      * Stores an Uint16 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;

    /**
      * Stores an Uint32 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;
}

interface DataViewConstructor {
    new(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;
}
const DataView: DataViewConstructor;

/**
  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested
  * number of bytes could not be allocated an exception is raised.
  */
interface Int8Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Int8Array) => any, thisArg?: any): Int8Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Int8Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Int8Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Int8Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}
interface Int8ArrayConstructor {
    readonly prototype: Int8Array;
    new(length: number): Int8Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int8Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int8Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Int8Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;


}
const Int8Array: Int8ArrayConstructor;

/**
  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
  */
interface Uint8Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Uint8Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Uint8Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Uint8Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Uint8ArrayConstructor {
    readonly prototype: Uint8Array;
    new(length: number): Uint8Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint8Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint8Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Uint8Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;

}
const Uint8Array: Uint8ArrayConstructor;

/**
  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.
  * If the requested number of bytes could not be allocated an exception is raised.
  */
interface Uint8ClampedArray {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => any, thisArg?: any): Uint8ClampedArray;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Uint8ClampedArray;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Uint8ClampedArray;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Uint8ClampedArray;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Uint8ClampedArrayConstructor {
    readonly prototype: Uint8ClampedArray;
    new(length: number): Uint8ClampedArray;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint8ClampedArray;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint8ClampedArray;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Uint8ClampedArray;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;
}
const Uint8ClampedArray: Uint8ClampedArrayConstructor;

/**
  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
  */
interface Int16Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Int16Array) => any, thisArg?: any): Int16Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;
    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Int16Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Int16Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Int16Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Int16ArrayConstructor {
    readonly prototype: Int16Array;
    new(length: number): Int16Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int16Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int16Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Int16Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array;


}
const Int16Array: Int16ArrayConstructor;

/**
  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
  */
interface Uint16Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Uint16Array) => any, thisArg?: any): Uint16Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Uint16Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Uint16Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Uint16Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Uint16ArrayConstructor {
    readonly prototype: Uint16Array;
    new(length: number): Uint16Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint16Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint16Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Uint16Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;


}
const Uint16Array: Uint16ArrayConstructor;
/**
  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
  */
interface Int32Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Int32Array) => any, thisArg?: any): Int32Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Int32Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Int32Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Int32Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Int32ArrayConstructor {
    readonly prototype: Int32Array;
    new(length: number): Int32Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int32Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int32Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Int32Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;

}
const Int32Array: Int32ArrayConstructor;

/**
  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
  */
interface Uint32Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Uint32Array) => any, thisArg?: any): Uint32Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;
    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Uint32Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Uint32Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Uint32Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Uint32ArrayConstructor {
    readonly prototype: Uint32Array;
    new(length: number): Uint32Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint32Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint32Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Uint32Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;

}
const Uint32Array: Uint32ArrayConstructor;

/**
  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number
  * of bytes could not be allocated an exception is raised.
  */
interface Float32Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Float32Array) => any, thisArg?: any): Float32Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Float32Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Float32Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Float32Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Float32ArrayConstructor {
    readonly prototype: Float32Array;
    new(length: number): Float32Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Float32Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Float32Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Float32Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;


}
const Float32Array: Float32ArrayConstructor;

/**
  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested
  * number of bytes could not be allocated an exception is raised.
  */
interface Float64Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Float64Array) => any, thisArg?: any): Float64Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Float64Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Float64Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Float64Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Float64ArrayConstructor {
    readonly prototype: Float64Array;
    new(length: number): Float64Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Float64Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Float64Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Float64Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;

}
const Float64Array: Float64ArrayConstructor;

/////////////////////////////
/// ECMAScript Internationalization API
/////////////////////////////

namespace Intl {
    interface CollatorOptions {
        usage?: string;
        localeMatcher?: string;
        numeric?: boolean;
        caseFirst?: string;
        sensitivity?: string;
        ignorePunctuation?: boolean;
    }

    interface ResolvedCollatorOptions {
        locale: string;
        usage: string;
        sensitivity: string;
        ignorePunctuation: boolean;
        collation: string;
        caseFirst: string;
        numeric: boolean;
    }

    interface Collator {
        compare(x: string, y: string): number;
        resolvedOptions(): ResolvedCollatorOptions;
    }
    var Collator: {
        new(locales?: string | string[], options?: CollatorOptions): Collator;
        (locales?: string | string[], options?: CollatorOptions): Collator;
        supportedLocalesOf(locales: string | string[], options?: CollatorOptions): string[];
    };

    interface NumberFormatOptions {
        localeMatcher?: string;
        style?: string;
        currency?: string;
        currencyDisplay?: string;
        useGrouping?: boolean;
        minimumIntegerDigits?: number;
        minimumFractionDigits?: number;
        maximumFractionDigits?: number;
        minimumSignificantDigits?: number;
        maximumSignificantDigits?: number;
    }

    interface ResolvedNumberFormatOptions {
        locale: string;
        numberingSystem: string;
        style: string;
        currency?: string;
        currencyDisplay?: string;
        minimumIntegerDigits: number;
        minimumFractionDigits: number;
        maximumFractionDigits: number;
        minimumSignificantDigits?: number;
        maximumSignificantDigits?: number;
        useGrouping: boolean;
    }

    interface NumberFormat {
        format(value: number): string;
        resolvedOptions(): ResolvedNumberFormatOptions;
    }
    var NumberFormat: {
        new(locales?: string | string[], options?: NumberFormatOptions): NumberFormat;
        (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;
        supportedLocalesOf(locales: string | string[], options?: NumberFormatOptions): string[];
    };

    interface DateTimeFormatOptions {
        localeMatcher?: string;
        weekday?: string;
        era?: string;
        year?: string;
        month?: string;
        day?: string;
        hour?: string;
        minute?: string;
        second?: string;
        timeZoneName?: string;
        formatMatcher?: string;
        hour12?: boolean;
        timeZone?: string;
    }

    interface ResolvedDateTimeFormatOptions {
        locale: string;
        calendar: string;
        numberingSystem: string;
        timeZone: string;
        hour12?: boolean;
        weekday?: string;
        era?: string;
        year?: string;
        month?: string;
        day?: string;
        hour?: string;
        minute?: string;
        second?: string;
        timeZoneName?: string;
    }

    interface DateTimeFormat {
        format(date?: Date | number): string;
        resolvedOptions(): ResolvedDateTimeFormatOptions;
    }
    var DateTimeFormat: {
        new(locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;
        (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;
        supportedLocalesOf(locales: string | string[], options?: DateTimeFormatOptions): string[];
    };
}

interface String {
    /**
      * Determines whether two strings are equivalent in the current or specified locale.
      * @param that String to compare to target string
      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.
      * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.
      */
    localeCompare(that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
}

interface Number {
    /**
      * Converts a number to a string by using the current or specified locale.
      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
      * @param options An object that contains one or more properties that specify comparison options.
      */
    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;
}

interface Date {
    /**
      * Converts a date and time to a string by using the current or specified locale.
      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
      * @param options An object that contains one or more properties that specify comparison options.
      */
    toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
    /**
      * Converts a date to a string by using the current or specified locale.
      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
      * @param options An object that contains one or more properties that specify comparison options.
      */
    toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;

    /**
      * Converts a time to a string by using the current or specified locale.
      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
      * @param options An object that contains one or more properties that specify comparison options.
      */
    toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
 
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, 
MERCHANTABLITY OR NON-INFRINGEMENT.
 
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/////////////////////////////
/// DOM APIs
/////////////////////////////

interface Account {
  displayName: string;
  id: string;
  imageURL?: string;
  name?: string;
  rpDisplayName: string;
}

interface AddEventListenerOptions extends EventListenerOptions {
  once?: boolean;
  passive?: boolean;
}

interface AesCbcParams extends Algorithm {
  iv: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;
}

interface AesCtrParams extends Algorithm {
  counter: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;
  length: number;
}

interface AesDerivedKeyParams extends Algorithm {
  length: number;
}

interface AesGcmParams extends Algorithm {
  additionalData?: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;
  iv: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;
  tagLength?: number;
}

interface AesKeyAlgorithm extends KeyAlgorithm {
  length: number;
}

interface AesKeyGenParams extends Algorithm {
  length: number;
}

interface Algorithm {
  name: string;
}

interface AnalyserOptions extends AudioNodeOptions {
  fftSize?: number;
  maxDecibels?: number;
  minDecibels?: number;
  smoothingTimeConstant?: number;
}

interface AnimationEventInit extends EventInit {
  animationName?: string;
  elapsedTime?: number;
  pseudoElement?: string;
}

interface AnimationPlaybackEventInit extends EventInit {
  currentTime?: number | null;
  timelineTime?: number | null;
}

interface AssertionOptions {
  allowList?: ScopedCredentialDescriptor[];
  extensions?: WebAuthnExtensions;
  rpId?: string;
  timeoutSeconds?: number;
}

interface AudioBufferOptions {
  length: number;
  numberOfChannels?: number;
  sampleRate: number;
}

interface AudioBufferSourceOptions {
  buffer?: AudioBuffer | null;
  detune?: number;
  loop?: boolean;
  loopEnd?: number;
  loopStart?: number;
  playbackRate?: number;
}

interface AudioContextInfo {
  currentTime?: number;
  sampleRate?: number;
}

interface AudioContextOptions {
  latencyHint?: AudioContextLatencyCategory | number;
  sampleRate?: number;
}

interface AudioNodeOptions {
  channelCount?: number;
  channelCountMode?: ChannelCountMode;
  channelInterpretation?: ChannelInterpretation;
}

interface AudioParamDescriptor {
  automationRate?: AutomationRate;
  defaultValue?: number;
  maxValue?: number;
  minValue?: number;
  name: string;
}

interface AudioProcessingEventInit extends EventInit {
  inputBuffer: AudioBuffer;
  outputBuffer: AudioBuffer;
  playbackTime: number;
}

interface AudioTimestamp {
  contextTime?: number;
  performanceTime?: number;
}

interface AudioWorkletNodeOptions extends AudioNodeOptions {
  numberOfInputs?: number;
  numberOfOutputs?: number;
  outputChannelCount?: number[];
  parameterData?: Record<string, number>;
  processorOptions?: any;
}

interface BiquadFilterOptions extends AudioNodeOptions {
  Q?: number;
  detune?: number;
  frequency?: number;
  gain?: number;
  type?: BiquadFilterType;
}

interface BlobPropertyBag {
  type?: string;
}

interface ByteLengthChunk {
  byteLength?: number;
}

interface CacheQueryOptions {
  cacheName?: string;
  ignoreMethod?: boolean;
  ignoreSearch?: boolean;
  ignoreVary?: boolean;
}

interface ChannelMergerOptions extends AudioNodeOptions {
  numberOfInputs?: number;
}

interface ChannelSplitterOptions extends AudioNodeOptions {
  numberOfOutputs?: number;
}

interface ClientData {
  challenge: string;
  extensions?: WebAuthnExtensions;
  hashAlg: string | Algorithm;
  origin: string;
  rpId: string;
  tokenBinding?: string;
}

interface ClientQueryOptions {
  includeUncontrolled?: boolean;
  type?: ClientTypes;
}

interface CloseEventInit extends EventInit {
  code?: number;
  reason?: string;
  wasClean?: boolean;
}

interface CompositionEventInit extends UIEventInit {
  data?: string;
}

interface ComputedEffectTiming extends EffectTiming {
  activeDuration?: number;
  currentIteration?: number | null;
  endTime?: number;
  localTime?: number | null;
  progress?: number | null;
}

interface ComputedKeyframe extends Record<keyof CSSStyleDeclaration, string> {
  composite?: CompositeOperation | null;
  computedOffset?: number;
  easing?: string;
  offset?: number | null;
}

interface ConfirmSiteSpecificExceptionsInformation extends ExceptionInformation {
  arrayOfDomainStrings?: string[];
}

interface ConstantSourceOptions {
  offset?: number;
}

interface ConstrainBooleanParameters {
  exact?: boolean;
  ideal?: boolean;
}

interface ConstrainDOMStringParameters {
  exact?: string | string[];
  ideal?: string | string[];
}

interface ConstrainDoubleRange extends DoubleRange {
  exact?: number;
  ideal?: number;
}

interface ConstrainLongRange extends LongRange {
  exact?: number;
  ideal?: number;
}

interface ConstrainVideoFacingModeParameters {
  exact?: VideoFacingModeEnum | VideoFacingModeEnum[];
  ideal?: VideoFacingModeEnum | VideoFacingModeEnum[];
}

interface ConvolverOptions extends AudioNodeOptions {
  buffer?: AudioBuffer | null;
  disableNormalization?: boolean;
}

interface CustomEventInit<T = any> extends EventInit {
  detail?: T;
}

interface DOMMatrix2DInit {
  a?: number;
  b?: number;
  c?: number;
  d?: number;
  e?: number;
  f?: number;
  m11?: number;
  m12?: number;
  m21?: number;
  m22?: number;
  m41?: number;
  m42?: number;
}

interface DOMMatrixInit extends DOMMatrix2DInit {
  is2D?: boolean;
  m13?: number;
  m14?: number;
  m23?: number;
  m24?: number;
  m31?: number;
  m32?: number;
  m33?: number;
  m34?: number;
  m43?: number;
  m44?: number;
}

interface DOMPointInit {
  w?: number;
  x?: number;
  y?: number;
  z?: number;
}

interface DOMQuadInit {
  p1?: DOMPointInit;
  p2?: DOMPointInit;
  p3?: DOMPointInit;
  p4?: DOMPointInit;
}

interface DOMRectInit {
  height?: number;
  width?: number;
  x?: number;
  y?: number;
}

interface DelayOptions extends AudioNodeOptions {
  delayTime?: number;
  maxDelayTime?: number;
}

interface DeviceAccelerationDict {
  x?: number | null;
  y?: number | null;
  z?: number | null;
}

interface DeviceLightEventInit extends EventInit {
  value?: number;
}

interface DeviceMotionEventInit extends EventInit {
  acceleration?: DeviceAccelerationDict | null;
  accelerationIncludingGravity?: DeviceAccelerationDict | null;
  interval?: number | null;
  rotationRate?: DeviceRotationRateDict | null;
}

interface DeviceOrientationEventInit extends EventInit {
  absolute?: boolean;
  alpha?: number | null;
  beta?: number | null;
  gamma?: number | null;
}

interface DeviceRotationRateDict {
  alpha?: number | null;
  beta?: number | null;
  gamma?: number | null;
}

interface DocumentTimelineOptions {
  originTime?: number;
}

interface DoubleRange {
  max?: number;
  min?: number;
}

interface DynamicsCompressorOptions extends AudioNodeOptions {
  attack?: number;
  knee?: number;
  ratio?: number;
  release?: number;
  threshold?: number;
}

interface EcKeyAlgorithm extends KeyAlgorithm {
  namedCurve: string;
}

interface EcKeyGenParams extends Algorithm {
  namedCurve: string;
}

interface EcKeyImportParams extends Algorithm {
  namedCurve: string;
}

interface EcdhKeyDeriveParams extends Algorithm {
  public: CryptoKey;
}

interface EcdsaParams extends Algorithm {
  hash: string | Algorithm;
}

interface EffectTiming {
  delay?: number;
  direction?: PlaybackDirection;
  duration?: number | string;
  easing?: string;
  endDelay?: number;
  fill?: FillMode;
  iterationStart?: number;
  iterations?: number;
}

interface ErrorEventInit extends EventInit {
  colno?: number;
  error?: any;
  filename?: string;
  lineno?: number;
  message?: string;
}

interface EventInit {
  bubbles?: boolean;
  cancelable?: boolean;
  composed?: boolean;
}

interface EventListenerOptions {
  capture?: boolean;
}

interface EventModifierInit extends UIEventInit {
  altKey?: boolean;
  ctrlKey?: boolean;
  metaKey?: boolean;
  modifierAltGraph?: boolean;
  modifierCapsLock?: boolean;
  modifierFn?: boolean;
  modifierFnLock?: boolean;
  modifierHyper?: boolean;
  modifierNumLock?: boolean;
  modifierOS?: boolean;
  modifierScrollLock?: boolean;
  modifierSuper?: boolean;
  modifierSymbol?: boolean;
  modifierSymbolLock?: boolean;
  shiftKey?: boolean;
}

interface ExceptionInformation {
  domain?: string | null;
}

interface ExtendableEventInit extends EventInit {
}

interface ExtendableMessageEventInit extends ExtendableEventInit {
  data?: any;
  lastEventId?: string;
  origin?: string;
  ports?: MessagePort[];
  source?: object | ServiceWorker | MessagePort;
}

interface FetchEventInit extends ExtendableEventInit {
  clientId?: string;
  preloadResponse: Promise<any>;
  request: Request;
  resultingClientId?: string;
  targetClientId?: string;
}

interface FilePropertyBag extends BlobPropertyBag {
  lastModified?: number;
}

interface FocusEventInit extends UIEventInit {
  relatedTarget?: EventTarget | null;
}

interface FocusNavigationEventInit extends EventInit {
  navigationReason?: string | null;
  originHeight?: number;
  originLeft?: number;
  originTop?: number;
  originWidth?: number;
}

interface FocusNavigationOrigin {
  originHeight?: number;
  originLeft?: number;
  originTop?: number;
  originWidth?: number;
}

interface GainOptions extends AudioNodeOptions {
  gain?: number;
}

interface GamepadEventInit extends EventInit {
  gamepad?: Gamepad;
}

interface GetNotificationOptions {
  tag?: string;
}

interface HashChangeEventInit extends EventInit {
  newURL?: string;
  oldURL?: string;
}

interface HkdfParams extends Algorithm {
  hash: string | Algorithm;
  info: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;
  salt: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;
}

interface HmacImportParams extends Algorithm {
  hash: string | Algorithm;
  length?: number;
}

interface HmacKeyAlgorithm extends KeyAlgorithm {
  hash: KeyAlgorithm;
  length: number;
}

interface HmacKeyGenParams extends Algorithm {
  hash: string | Algorithm;
  length?: number;
}

interface IDBIndexParameters {
  multiEntry?: boolean;
  unique?: boolean;
}

interface IDBObjectStoreParameters {
  autoIncrement?: boolean;
  keyPath?: string | string[];
}

interface IDBVersionChangeEventInit extends EventInit {
  newVersion?: number | null;
  oldVersion?: number;
}

interface IIRFilterOptions extends AudioNodeOptions {
  feedback: number[];
  feedforward: number[];
}

interface IntersectionObserverEntryInit {
  boundingClientRect: DOMRectInit;
  intersectionRect: DOMRectInit;
  isIntersecting: boolean;
  rootBounds: DOMRectInit;
  target: Element;
  time: number;
}

interface IntersectionObserverInit {
  root?: Element | null;
  rootMargin?: string;
  threshold?: number | number[];
}

interface JsonWebKey {
  alg?: string;
  crv?: string;
  d?: string;
  dp?: string;
  dq?: string;
  e?: string;
  ext?: boolean;
  k?: string;
  key_ops?: string[];
  kty?: string;
  n?: string;
  oth?: RsaOtherPrimesInfo[];
  p?: string;
  q?: string;
  qi?: string;
  use?: string;
  x?: string;
  y?: string;
}

interface KeyAlgorithm {
  name: string;
}

interface KeyboardEventInit extends EventModifierInit {
  code?: string;
  key?: string;
  location?: number;
  repeat?: boolean;
}

interface Keyframe extends Record<keyof CSSStyleDeclaration, string> {
  composite?: CompositeOperation | null;
  easing?: string;
  offset?: number | null;
}

interface KeyframeAnimationOptions extends KeyframeEffectOptions {
  id?: string;
}

interface KeyframeEffectOptions extends EffectTiming {
  composite?: CompositeOperation;
  iterationComposite?: IterationCompositeOperation;
}

interface LongRange {
  max?: number;
  min?: number;
}

interface MSAccountInfo {
  accountImageUri?: string;
  accountName?: string;
  rpDisplayName: string;
  userDisplayName: string;
  userId?: string;
}

interface MSAudioLocalClientEvent extends MSLocalClientEventBase {
  cpuInsufficientEventRatio?: number;
  deviceCaptureNotFunctioningEventRatio?: number;
  deviceClippingEventRatio?: number;
  deviceEchoEventRatio?: number;
  deviceGlitchesEventRatio?: number;
  deviceHalfDuplexAECEventRatio?: number;
  deviceHowlingEventCount?: number;
  deviceLowSNREventRatio?: number;
  deviceLowSpeechLevelEventRatio?: number;
  deviceMultipleEndpointsEventCount?: number;
  deviceNearEndToEchoRatioEventRatio?: number;
  deviceRenderMuteEventRatio?: number;
  deviceRenderNotFunctioningEventRatio?: number;
  deviceRenderZeroVolumeEventRatio?: number;
  networkDelayEventRatio?: number;
  networkSendQualityEventRatio?: number;
}

interface MSAudioRecvPayload extends MSPayloadBase {
  burstLossLength1?: number;
  burstLossLength2?: number;
  burstLossLength3?: number;
  burstLossLength4?: number;
  burstLossLength5?: number;
  burstLossLength6?: number;
  burstLossLength7?: number;
  burstLossLength8OrHigher?: number;
  fecRecvDistance1?: number;
  fecRecvDistance2?: number;
  fecRecvDistance3?: number;
  packetReorderDepthAvg?: number;
  packetReorderDepthMax?: number;
  packetReorderRatio?: number;
  ratioCompressedSamplesAvg?: number;
  ratioConcealedSamplesAvg?: number;
  ratioStretchedSamplesAvg?: number;
  samplingRate?: number;
  signal?: MSAudioRecvSignal;
}

interface MSAudioRecvSignal {
  initialSignalLevelRMS?: number;
  recvNoiseLevelCh1?: number;
  recvSignalLevelCh1?: number;
  renderLoopbackSignalLevel?: number;
  renderNoiseLevel?: number;
  renderSignalLevel?: number;
}

interface MSAudioSendPayload extends MSPayloadBase {
  audioFECUsed?: boolean;
  samplingRate?: number;
  sendMutePercent?: number;
  signal?: MSAudioSendSignal;
}

interface MSAudioSendSignal {
  noiseLevel?: number;
  sendNoiseLevelCh1?: number;
  sendSignalLevelCh1?: number;
}

interface MSConnectivity {
  iceType?: MSIceType;
  iceWarningFlags?: MSIceWarningFlags;
  relayAddress?: MSRelayAddress;
}

interface MSCredentialFilter {
  accept?: MSCredentialSpec[];
}

interface MSCredentialParameters {
  type?: MSCredentialType;
}

interface MSCredentialSpec {
  id?: string;
  type: MSCredentialType;
}

interface MSDCCEventInit extends EventInit {
  maxFr?: number;
  maxFs?: number;
}

interface MSDSHEventInit extends EventInit {
  sources?: number[];
  timestamp?: number;
}

interface MSDelay {
  roundTrip?: number;
  roundTripMax?: number;
}

interface MSDescription extends RTCStats {
  connectivity?: MSConnectivity;
  deviceDevName?: string;
  localAddr?: MSIPAddressInfo;
  networkconnectivity?: MSNetworkConnectivityInfo;
  reflexiveLocalIPAddr?: MSIPAddressInfo;
  remoteAddr?: MSIPAddressInfo;
  transport?: RTCIceProtocol;
}

interface MSFIDOCredentialParameters extends MSCredentialParameters {
  algorithm?: string | Algorithm;
  authenticators?: string[];
}

interface MSIPAddressInfo {
  ipAddr?: string;
  manufacturerMacAddrMask?: string;
  port?: number;
}

interface MSIceWarningFlags {
  allocationMessageIntegrityFailed?: boolean;
  alternateServerReceived?: boolean;
  connCheckMessageIntegrityFailed?: boolean;
  connCheckOtherError?: boolean;
  fipsAllocationFailure?: boolean;
  multipleRelayServersAttempted?: boolean;
  noRelayServersConfigured?: boolean;
  portRangeExhausted?: boolean;
  pseudoTLSFailure?: boolean;
  tcpNatConnectivityFailed?: boolean;
  tcpRelayConnectivityFailed?: boolean;
  turnAuthUnknownUsernameError?: boolean;
  turnTcpAllocateFailed?: boolean;
  turnTcpSendFailed?: boolean;
  turnTcpTimedOut?: boolean;
  turnTurnTcpConnectivityFailed?: boolean;
  turnUdpAllocateFailed?: boolean;
  turnUdpSendFailed?: boolean;
  udpLocalConnectivityFailed?: boolean;
  udpNatConnectivityFailed?: boolean;
  udpRelayConnectivityFailed?: boolean;
  useCandidateChecksFailed?: boolean;
}

interface MSJitter {
  interArrival?: number;
  interArrivalMax?: number;
  interArrivalSD?: number;
}

interface MSLocalClientEventBase extends RTCStats {
  networkBandwidthLowEventRatio?: number;
  networkReceiveQualityEventRatio?: number;
}

interface MSNetwork extends RTCStats {
  delay?: MSDelay;
  jitter?: MSJitter;
  packetLoss?: MSPacketLoss;
  utilization?: MSUtilization;
}

interface MSNetworkConnectivityInfo {
  linkspeed?: number;
  networkConnectionDetails?: string;
  vpn?: boolean;
}

interface MSNetworkInterfaceType {
  interfaceTypeEthernet?: boolean;
  interfaceTypePPP?: boolean;
  interfaceTypeTunnel?: boolean;
  interfaceTypeWWAN?: boolean;
  interfaceTypeWireless?: boolean;
}

interface MSOutboundNetwork extends MSNetwork {
  appliedBandwidthLimit?: number;
}

interface MSPacketLoss {
  lossRate?: number;
  lossRateMax?: number;
}

interface MSPayloadBase extends RTCStats {
  payloadDescription?: string;
}

interface MSPortRange {
  max?: number;
  min?: number;
}

interface MSRelayAddress {
  port?: number;
  relayAddress?: string;
}

interface MSSignatureParameters {
  userPrompt?: string;
}

interface MSTransportDiagnosticsStats extends RTCStats {
  allocationTimeInMs?: number;
  baseAddress?: string;
  baseInterface?: MSNetworkInterfaceType;
  iceRole?: RTCIceRole;
  iceWarningFlags?: MSIceWarningFlags;
  interfaces?: MSNetworkInterfaceType;
  localAddrType?: MSIceAddrType;
  localAddress?: string;
  localInterface?: MSNetworkInterfaceType;
  localMR?: string;
  localMRTCPPort?: number;
  localSite?: string;
  msRtcEngineVersion?: string;
  networkName?: string;
  numConsentReqReceived?: number;
  numConsentReqSent?: number;
  numConsentRespReceived?: number;
  numConsentRespSent?: number;
  portRangeMax?: number;
  portRangeMin?: number;
  protocol?: RTCIceProtocol;
  remoteAddrType?: MSIceAddrType;
  remoteAddress?: string;
  remoteMR?: string;
  remoteMRTCPPort?: number;
  remoteSite?: string;
  rtpRtcpMux?: boolean;
  stunVer?: number;
}

interface MSUtilization {
  bandwidthEstimation?: number;
  bandwidthEstimationAvg?: number;
  bandwidthEstimationMax?: number;
  bandwidthEstimationMin?: number;
  bandwidthEstimationStdDev?: number;
  packets?: number;
}

interface MSVideoPayload extends MSPayloadBase {
  durationSeconds?: number;
  resolution?: string;
  videoBitRateAvg?: number;
  videoBitRateMax?: number;
  videoFrameRateAvg?: number;
  videoPacketLossRate?: number;
}

interface MSVideoRecvPayload extends MSVideoPayload {
  lowBitRateCallPercent?: number;
  lowFrameRateCallPercent?: number;
  recvBitRateAverage?: number;
  recvBitRateMaximum?: number;
  recvCodecType?: string;
  recvFpsHarmonicAverage?: number;
  recvFrameRateAverage?: number;
  recvNumResSwitches?: number;
  recvReorderBufferMaxSuccessfullyOrderedExtent?: number;
  recvReorderBufferMaxSuccessfullyOrderedLateTime?: number;
  recvReorderBufferPacketsDroppedDueToBufferExhaustion?: number;
  recvReorderBufferPacketsDroppedDueToTimeout?: number;
  recvReorderBufferReorderedPackets?: number;
  recvResolutionHeight?: number;
  recvResolutionWidth?: number;
  recvVideoStreamsMax?: number;
  recvVideoStreamsMin?: number;
  recvVideoStreamsMode?: number;
  reorderBufferTotalPackets?: number;
  videoFrameLossRate?: number;
  videoPostFECPLR?: number;
  videoResolutions?: MSVideoResolutionDistribution;
}

interface MSVideoResolutionDistribution {
  cifQuality?: number;
  h1080Quality?: number;
  h1440Quality?: number;
  h2160Quality?: number;
  h720Quality?: number;
  vgaQuality?: number;
}

interface MSVideoSendPayload extends MSVideoPayload {
  sendBitRateAverage?: number;
  sendBitRateMaximum?: number;
  sendFrameRateAverage?: number;
  sendResolutionHeight?: number;
  sendResolutionWidth?: number;
  sendVideoStreamsMax?: number;
}

interface MediaElementAudioSourceOptions {
  mediaElement: HTMLMediaElement;
}

interface MediaEncryptedEventInit extends EventInit {
  initData?: ArrayBuffer | null;
  initDataType?: string;
}

interface MediaKeyMessageEventInit extends EventInit {
  message?: ArrayBuffer | null;
  messageType?: MediaKeyMessageType;
}

interface MediaKeySystemConfiguration {
  audioCapabilities?: MediaKeySystemMediaCapability[];
  distinctiveIdentifier?: MediaKeysRequirement;
  initDataTypes?: string[];
  persistentState?: MediaKeysRequirement;
  videoCapabilities?: MediaKeySystemMediaCapability[];
}

interface MediaKeySystemMediaCapability {
  contentType?: string;
  robustness?: string;
}

interface MediaStreamAudioSourceOptions {
  mediaStream: MediaStream;
}

interface MediaStreamConstraints {
  audio?: boolean | MediaTrackConstraints;
  peerIdentity?: string;
  video?: boolean | MediaTrackConstraints;
}

interface MediaStreamErrorEventInit extends EventInit {
  error?: MediaStreamError | null;
}

interface MediaStreamEventInit extends EventInit {
  stream?: MediaStream;
}

interface MediaStreamTrackAudioSourceOptions {
  mediaStreamTrack: MediaStreamTrack;
}

interface MediaStreamTrackEventInit extends EventInit {
  track?: MediaStreamTrack | null;
}

interface MediaTrackCapabilities {
  aspectRatio?: number | DoubleRange;
  deviceId?: string;
  echoCancellation?: boolean[];
  facingMode?: string;
  frameRate?: number | DoubleRange;
  groupId?: string;
  height?: number | LongRange;
  sampleRate?: number | LongRange;
  sampleSize?: number | LongRange;
  volume?: number | DoubleRange;
  width?: number | LongRange;
}

interface MediaTrackConstraintSet {
  aspectRatio?: number | ConstrainDoubleRange;
  channelCount?: number | ConstrainLongRange;
  deviceId?: string | string[] | ConstrainDOMStringParameters;
  displaySurface?: string | string[] | ConstrainDOMStringParameters;
  echoCancellation?: boolean | ConstrainBooleanParameters;
  facingMode?: string | string[] | ConstrainDOMStringParameters;
  frameRate?: number | ConstrainDoubleRange;
  groupId?: string | string[] | ConstrainDOMStringParameters;
  height?: number | ConstrainLongRange;
  latency?: number | ConstrainDoubleRange;
  logicalSurface?: boolean | ConstrainBooleanParameters;
  sampleRate?: number | ConstrainLongRange;
  sampleSize?: number | ConstrainLongRange;
  volume?: number | ConstrainDoubleRange;
  width?: number | ConstrainLongRange;
}

interface MediaTrackConstraints extends MediaTrackConstraintSet {
  advanced?: MediaTrackConstraintSet[];
}

interface MediaTrackSettings {
  aspectRatio?: number;
  deviceId?: string;
  echoCancellation?: boolean;
  facingMode?: string;
  frameRate?: number;
  groupId?: string;
  height?: number;
  sampleRate?: number;
  sampleSize?: number;
  volume?: number;
  width?: number;
}

interface MediaTrackSupportedConstraints {
  aspectRatio?: boolean;
  deviceId?: boolean;
  echoCancellation?: boolean;
  facingMode?: boolean;
  frameRate?: boolean;
  groupId?: boolean;
  height?: boolean;
  sampleRate?: boolean;
  sampleSize?: boolean;
  volume?: boolean;
  width?: boolean;
}

interface MessageEventInit extends EventInit {
  channel?: string;
  data?: any;
  lastEventId?: string;
  origin?: string;
  ports?: MessagePort[];
  source?: Window | null;
}

interface MouseEventInit extends EventModifierInit {
  button?: number;
  buttons?: number;
  clientX?: number;
  clientY?: number;
  relatedTarget?: EventTarget | null;
  screenX?: number;
  screenY?: number;
}

interface MsZoomToOptions {
  animate?: string;
  contentX?: number;
  contentY?: number;
  scaleFactor?: number;
  viewportX?: string | null;
  viewportY?: string | null;
}

interface MutationObserverInit {
  attributeFilter?: string[];
  attributeOldValue?: boolean;
  attributes?: boolean;
  characterData?: boolean;
  characterDataOldValue?: boolean;
  childList?: boolean;
  subtree?: boolean;
}

interface NavigationPreloadState {
  enabled?: boolean;
  headerValue?: string;
}

interface NotificationAction {
  action: string;
  icon?: string;
  title: string;
}

interface NotificationEventInit extends ExtendableEventInit {
  action?: string;
  notification: Notification;
}

interface NotificationOptions {
  actions?: NotificationAction[];
  badge?: string;
  body?: string;
  data?: any;
  dir?: NotificationDirection;
  icon?: string;
  image?: string;
  lang?: string;
  renotify?: boolean;
  requireInteraction?: boolean;
  silent?: boolean;
  tag?: string;
  timestamp?: number;
  vibrate?: VibratePattern;
}

interface OfflineAudioCompletionEventInit extends EventInit {
  renderedBuffer: AudioBuffer;
}

interface OfflineAudioContextOptions {
  length: number;
  numberOfChannels?: number;
  sampleRate: number;
}

interface OptionalEffectTiming {
  delay?: number;
  direction?: PlaybackDirection;
  duration?: number | string;
  easing?: string;
  endDelay?: number;
  fill?: FillMode;
  iterationStart?: number;
  iterations?: number;
}

interface OscillatorOptions extends AudioNodeOptions {
  detune?: number;
  frequency?: number;
  periodicWave?: PeriodicWave;
  type?: OscillatorType;
}

interface PannerOptions extends AudioNodeOptions {
  coneInnerAngle?: number;
  coneOuterAngle?: number;
  coneOuterGain?: number;
  distanceModel?: DistanceModelType;
  maxDistance?: number;
  orientationX?: number;
  orientationY?: number;
  orientationZ?: number;
  panningModel?: PanningModelType;
  positionX?: number;
  positionY?: number;
  positionZ?: number;
  refDistance?: number;
  rolloffFactor?: number;
}

interface PaymentCurrencyAmount {
  currency: string;
  currencySystem?: string;
  value: string;
}

interface PaymentDetailsBase {
  displayItems?: PaymentItem[];
  modifiers?: PaymentDetailsModifier[];
  shippingOptions?: PaymentShippingOption[];
}

interface PaymentDetailsInit extends PaymentDetailsBase {
  id?: string;
  total: PaymentItem;
}

interface PaymentDetailsModifier {
  additionalDisplayItems?: PaymentItem[];
  data?: any;
  supportedMethods: string | string[];
  total?: PaymentItem;
}

interface PaymentDetailsUpdate extends PaymentDetailsBase {
  error?: string;
  total?: PaymentItem;
}

interface PaymentItem {
  amount: PaymentCurrencyAmount;
  label: string;
  pending?: boolean;
}

interface PaymentMethodData {
  data?: any;
  supportedMethods: string | string[];
}

interface PaymentOptions {
  requestPayerEmail?: boolean;
  requestPayerName?: boolean;
  requestPayerPhone?: boolean;
  requestShipping?: boolean;
  shippingType?: string;
}

interface PaymentRequestUpdateEventInit extends EventInit {
}

interface PaymentShippingOption {
  amount: PaymentCurrencyAmount;
  id: string;
  label: string;
  selected?: boolean;
}

interface Pbkdf2Params extends Algorithm {
  hash: string | Algorithm;
  iterations: number;
  salt: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;
}

interface PerformanceObserverInit {
  buffered?: boolean;
  entryTypes: string[];
}

interface PeriodicWaveConstraints {
  disableNormalization?: boolean;
}

interface PeriodicWaveOptions extends PeriodicWaveConstraints {
  imag?: number[] | Float32Array;
  real?: number[] | Float32Array;
}

interface PointerEventInit extends MouseEventInit {
  height?: number;
  isPrimary?: boolean;
  pointerId?: number;
  pointerType?: string;
  pressure?: number;
  tangentialPressure?: number;
  tiltX?: number;
  tiltY?: number;
  twist?: number;
  width?: number;
}

interface PopStateEventInit extends EventInit {
  state?: any;
}

interface PositionOptions {
  enableHighAccuracy?: boolean;
  maximumAge?: number;
  timeout?: number;
}

interface ProgressEventInit extends EventInit {
  lengthComputable?: boolean;
  loaded?: number;
  total?: number;
}

interface PromiseRejectionEventInit extends EventInit {
  promise: Promise<any>;
  reason?: any;
}

interface PropertyIndexedKeyframes extends Record<keyof CSSStyleDeclaration, string | string[]> {
  composite?: CompositeOperation | (CompositeOperation | null)[];
  easing?: string | string[];
  offset?: number | (number | null)[];
}

interface PushEventInit extends ExtendableEventInit {
  data?: PushMessageDataInit;
}

interface PushSubscriptionChangeInit extends ExtendableEventInit {
  newSubscription?: PushSubscription;
  oldSubscription?: PushSubscription;
}

interface PushSubscriptionJSON {
  endpoint?: string;
  expirationTime?: number | null;
  keys?: Record<string, string>;
}

interface PushSubscriptionOptionsInit {
  applicationServerKey?: BufferSource | string;
  userVisibleOnly?: boolean;
}

interface QueuingStrategy {
  highWaterMark?: number;
  size?: WritableStreamChunkCallback;
}

interface RTCAnswerOptions extends RTCOfferAnswerOptions {
}

interface RTCCertificateExpiration {
  expires?: number;
}

interface RTCConfiguration {
  bundlePolicy?: RTCBundlePolicy;
  certificates?: RTCCertificate[];
  iceCandidatePoolSize?: number;
  iceServers?: RTCIceServer[];
  iceTransportPolicy?: RTCIceTransportPolicy;
  peerIdentity?: string;
  rtcpMuxPolicy?: RTCRtcpMuxPolicy;
}

interface RTCDTMFToneChangeEventInit extends EventInit {
  tone: string;
}

interface RTCDataChannelEventInit extends EventInit {
  channel: RTCDataChannel;
}

interface RTCDataChannelInit {
  id?: number;
  maxPacketLifeTime?: number;
  maxRetransmits?: number;
  negotiated?: boolean;
  ordered?: boolean;
  priority?: RTCPriorityType;
  protocol?: string;
}

interface RTCDtlsFingerprint {
  algorithm?: string;
  value?: string;
}

interface RTCDtlsParameters {
  fingerprints?: RTCDtlsFingerprint[];
  role?: RTCDtlsRole;
}

interface RTCErrorEventInit extends EventInit {
  error?: RTCError | null;
}

interface RTCIceCandidateAttributes extends RTCStats {
  addressSourceUrl?: string;
  candidateType?: RTCStatsIceCandidateType;
  ipAddress?: string;
  portNumber?: number;
  priority?: number;
  transport?: string;
}

interface RTCIceCandidateComplete {
}

interface RTCIceCandidateDictionary {
  foundation?: string;
  ip?: string;
  msMTurnSessionId?: string;
  port?: number;
  priority?: number;
  protocol?: RTCIceProtocol;
  relatedAddress?: string;
  relatedPort?: number;
  tcpType?: RTCIceTcpCandidateType;
  type?: RTCIceCandidateType;
}

interface RTCIceCandidateInit {
  candidate?: string;
  sdpMLineIndex?: number | null;
  sdpMid?: string | null;
  usernameFragment?: string;
}

interface RTCIceCandidatePair {
  local?: RTCIceCandidate;
  remote?: RTCIceCandidate;
}

interface RTCIceCandidatePairStats extends RTCStats {
  availableIncomingBitrate?: number;
  availableOutgoingBitrate?: number;
  bytesReceived?: number;
  bytesSent?: number;
  localCandidateId?: string;
  nominated?: boolean;
  priority?: number;
  readable?: boolean;
  remoteCandidateId?: string;
  roundTripTime?: number;
  state?: RTCStatsIceCandidatePairState;
  transportId?: string;
  writable?: boolean;
}

interface RTCIceGatherOptions {
  gatherPolicy?: RTCIceGatherPolicy;
  iceservers?: RTCIceServer[];
  portRange?: MSPortRange;
}

interface RTCIceParameters {
  password?: string;
  usernameFragment?: string;
}

interface RTCIceServer {
  credential?: string | RTCOAuthCredential;
  credentialType?: RTCIceCredentialType;
  urls: string | string[];
  username?: string;
}

interface RTCIdentityAssertionResult {
  assertion: string;
  idp: RTCIdentityProviderDetails;
}

interface RTCIdentityProvider {
  generateAssertion: GenerateAssertionCallback;
  validateAssertion: ValidateAssertionCallback;
}

interface RTCIdentityProviderDetails {
  domain: string;
  protocol?: string;
}

interface RTCIdentityProviderOptions {
  peerIdentity?: string;
  protocol?: string;
  usernameHint?: string;
}

interface RTCIdentityValidationResult {
  contents: string;
  identity: string;
}

interface RTCInboundRTPStreamStats extends RTCRTPStreamStats {
  bytesReceived?: number;
  fractionLost?: number;
  jitter?: number;
  packetsLost?: number;
  packetsReceived?: number;
}

interface RTCMediaStreamTrackStats extends RTCStats {
  audioLevel?: number;
  echoReturnLoss?: number;
  echoReturnLossEnhancement?: number;
  frameHeight?: number;
  frameWidth?: number;
  framesCorrupted?: number;
  framesDecoded?: number;
  framesDropped?: number;
  framesPerSecond?: number;
  framesReceived?: number;
  framesSent?: number;
  remoteSource?: boolean;
  ssrcIds?: string[];
  trackIdentifier?: string;
}

interface RTCOAuthCredential {
  accessToken: string;
  macKey: string;
}

interface RTCOfferAnswerOptions {
  voiceActivityDetection?: boolean;
}

interface RTCOfferOptions extends RTCOfferAnswerOptions {
  iceRestart?: boolean;
  offerToReceiveAudio?: boolean;
  offerToReceiveVideo?: boolean;
}

interface RTCOutboundRTPStreamStats extends RTCRTPStreamStats {
  bytesSent?: number;
  packetsSent?: number;
  roundTripTime?: number;
  targetBitrate?: number;
}

interface RTCPeerConnectionIceErrorEventInit extends EventInit {
  errorCode: number;
  hostCandidate?: string;
  statusText?: string;
  url?: string;
}

interface RTCPeerConnectionIceEventInit extends EventInit {
  candidate?: RTCIceCandidate | null;
  url?: string | null;
}

interface RTCRTPStreamStats extends RTCStats {
  associateStatsId?: string;
  codecId?: string;
  firCount?: number;
  isRemote?: boolean;
  mediaTrackId?: string;
  mediaType?: string;
  nackCount?: number;
  pliCount?: number;
  sliCount?: number;
  ssrc?: string;
  transportId?: string;
}

interface RTCRtcpFeedback {
  parameter?: string;
  type?: string;
}

interface RTCRtcpParameters {
  cname?: string;
  reducedSize?: boolean;
}

interface RTCRtpCapabilities {
  codecs: RTCRtpCodecCapability[];
  headerExtensions: RTCRtpHeaderExtensionCapability[];
}

interface RTCRtpCodecCapability {
  channels?: number;
  clockRate: number;
  mimeType: string;
  sdpFmtpLine?: string;
}

interface RTCRtpCodecParameters {
  channels?: number;
  clockRate: number;
  mimeType: string;
  payloadType: number;
  sdpFmtpLine?: string;
}

interface RTCRtpCodingParameters {
  rid?: string;
}

interface RTCRtpContributingSource {
  audioLevel?: number;
  source: number;
  timestamp: number;
}

interface RTCRtpDecodingParameters extends RTCRtpCodingParameters {
}

interface RTCRtpEncodingParameters extends RTCRtpCodingParameters {
  active?: boolean;
  codecPayloadType?: number;
  dtx?: RTCDtxStatus;
  maxBitrate?: number;
  maxFramerate?: number;
  priority?: RTCPriorityType;
  ptime?: number;
  scaleResolutionDownBy?: number;
}

interface RTCRtpFecParameters {
  mechanism?: string;
  ssrc?: number;
}

interface RTCRtpHeaderExtension {
  kind?: string;
  preferredEncrypt?: boolean;
  preferredId?: number;
  uri?: string;
}

interface RTCRtpHeaderExtensionCapability {
  uri?: string;
}

interface RTCRtpHeaderExtensionParameters {
  encrypted?: boolean;
  id: number;
  uri: string;
}

interface RTCRtpParameters {
  codecs: RTCRtpCodecParameters[];
  headerExtensions: RTCRtpHeaderExtensionParameters[];
  rtcp: RTCRtcpParameters;
}

interface RTCRtpReceiveParameters extends RTCRtpParameters {
  encodings: RTCRtpDecodingParameters[];
}

interface RTCRtpRtxParameters {
  ssrc?: number;
}

interface RTCRtpSendParameters extends RTCRtpParameters {
  degradationPreference?: RTCDegradationPreference;
  encodings: RTCRtpEncodingParameters[];
  transactionId: string;
}

interface RTCRtpSynchronizationSource extends RTCRtpContributingSource {
  voiceActivityFlag?: boolean;
}

interface RTCRtpTransceiverInit {
  direction?: RTCRtpTransceiverDirection;
  sendEncodings?: RTCRtpEncodingParameters[];
  streams?: MediaStream[];
}

interface RTCRtpUnhandled {
  muxId?: string;
  payloadType?: number;
  ssrc?: number;
}

interface RTCSessionDescriptionInit {
  sdp?: string;
  type: RTCSdpType;
}

interface RTCSrtpKeyParam {
  keyMethod?: string;
  keySalt?: string;
  lifetime?: string;
  mkiLength?: number;
  mkiValue?: number;
}

interface RTCSrtpSdesParameters {
  cryptoSuite?: string;
  keyParams?: RTCSrtpKeyParam[];
  sessionParams?: string[];
  tag?: number;
}

interface RTCSsrcRange {
  max?: number;
  min?: number;
}

interface RTCStats {
  id: string;
  timestamp: number;
  type: RTCStatsType;
}

interface RTCStatsEventInit extends EventInit {
  report: RTCStatsReport;
}

interface RTCStatsReport {
}

interface RTCTrackEventInit extends EventInit {
  receiver: RTCRtpReceiver;
  streams?: MediaStream[];
  track: MediaStreamTrack;
  transceiver: RTCRtpTransceiver;
}

interface RTCTransportStats extends RTCStats {
  activeConnection?: boolean;
  bytesReceived?: number;
  bytesSent?: number;
  localCertificateId?: string;
  remoteCertificateId?: string;
  rtcpTransportStatsId?: string;
  selectedCandidatePairId?: string;
}

interface RegistrationOptions {
  scope?: string;
  type?: WorkerType;
  updateViaCache?: ServiceWorkerUpdateViaCache;
}

interface RequestInit {
  body?: BodyInit | null;
  cache?: RequestCache;
  credentials?: RequestCredentials;
  headers?: HeadersInit;
  integrity?: string;
  keepalive?: boolean;
  method?: string;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  referrerPolicy?: ReferrerPolicy;
  signal?: AbortSignal | null;
  window?: any;
}

interface ResponseInit {
  headers?: HeadersInit;
  status?: number;
  statusText?: string;
}

interface RsaHashedImportParams extends Algorithm {
  hash: string | Algorithm;
}

interface RsaHashedKeyAlgorithm extends RsaKeyAlgorithm {
  hash: KeyAlgorithm;
}

interface RsaHashedKeyGenParams extends RsaKeyGenParams {
  hash: string | Algorithm;
}

interface RsaKeyAlgorithm extends KeyAlgorithm {
  modulusLength: number;
  publicExponent: Uint8Array;
}

interface RsaKeyGenParams extends Algorithm {
  modulusLength: number;
  publicExponent: Uint8Array;
}

interface RsaOaepParams extends Algorithm {
  label?: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;
}

interface RsaOtherPrimesInfo {
  d?: string;
  r?: string;
  t?: string;
}

interface RsaPssParams extends Algorithm {
  saltLength: number;
}

interface ScopedCredentialDescriptor {
  id: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null;
  transports?: Transport[];
  type: ScopedCredentialType;
}

interface ScopedCredentialOptions {
  excludeList?: ScopedCredentialDescriptor[];
  extensions?: WebAuthnExtensions;
  rpId?: string;
  timeoutSeconds?: number;
}

interface ScopedCredentialParameters {
  algorithm: string | Algorithm;
  type: ScopedCredentialType;
}

interface ScrollIntoViewOptions extends ScrollOptions {
  block?: ScrollLogicalPosition;
  inline?: ScrollLogicalPosition;
}

interface ScrollOptions {
  behavior?: ScrollBehavior;
}

interface ScrollToOptions extends ScrollOptions {
  left?: number;
  top?: number;
}

interface SecurityPolicyViolationEventInit extends EventInit {
  blockedURI?: string;
  columnNumber?: number;
  documentURI?: string;
  effectiveDirective?: string;
  lineNumber?: number;
  originalPolicy?: string;
  referrer?: string;
  sourceFile?: string;
  statusCode?: number;
  violatedDirective?: string;
}

interface ServiceWorkerMessageEventInit extends EventInit {
  data?: any;
  lastEventId?: string;
  origin?: string;
  ports?: MessagePort[] | null;
  source?: ServiceWorker | MessagePort | null;
}

interface SpeechSynthesisEventInit extends EventInit {
  charIndex?: number;
  charLength?: number;
  elapsedTime?: number;
  name?: string;
  utterance?: SpeechSynthesisUtterance | null;
}

interface StereoPannerOptions extends AudioNodeOptions {
  pan?: number;
}

interface StorageEstimate {
  quota?: number;
  usage?: number;
}

interface StorageEventInit extends EventInit {
  key?: string | null;
  newValue?: string | null;
  oldValue?: string | null;
  storageArea?: Storage | null;
  url?: string;
}

interface StoreExceptionsInformation extends ExceptionInformation {
  detailURI?: string | null;
  explanationString?: string | null;
  siteName?: string | null;
}

interface StoreSiteSpecificExceptionsInformation extends StoreExceptionsInformation {
  arrayOfDomainStrings?: string[];
}

interface SyncEventInit extends ExtendableEventInit {
  lastChance?: boolean;
  tag: string;
}

interface TextDecodeOptions {
  stream?: boolean;
}

interface TextDecoderOptions {
  fatal?: boolean;
  ignoreBOM?: boolean;
}

interface TouchEventInit extends EventModifierInit {
  changedTouches?: Touch[];
  targetTouches?: Touch[];
  touches?: Touch[];
}

interface TouchInit {
  altitudeAngle?: number;
  azimuthAngle?: number;
  clientX?: number;
  clientY?: number;
  force?: number;
  identifier: number;
  pageX?: number;
  pageY?: number;
  radiusX?: number;
  radiusY?: number;
  rotationAngle?: number;
  screenX?: number;
  screenY?: number;
  target: EventTarget;
  touchType?: TouchType;
}

interface TrackEventInit extends EventInit {
  track?: VideoTrack | AudioTrack | TextTrack | null;
}

interface TransitionEventInit extends EventInit {
  elapsedTime?: number;
  propertyName?: string;
  pseudoElement?: string;
}

interface UIEventInit extends EventInit {
  detail?: number;
  view?: Window | null;
}

interface UnderlyingSink {
  abort?: WritableStreamErrorCallback;
  close?: WritableStreamDefaultControllerCallback;
  start: WritableStreamDefaultControllerCallback;
  write?: WritableStreamChunkCallback;
}

interface VRDisplayEventInit extends EventInit {
  display: VRDisplay;
  reason?: VRDisplayEventReason;
}

interface VRLayer {
  leftBounds?: number[] | Float32Array | null;
  rightBounds?: number[] | Float32Array | null;
  source?: HTMLCanvasElement | null;
}

interface VRStageParameters {
  sittingToStandingTransform?: Float32Array;
  sizeX?: number;
  sizeY?: number;
}

interface WaveShaperOptions extends AudioNodeOptions {
  curve?: number[] | Float32Array;
  oversample?: OverSampleType;
}

interface WebAuthnExtensions {
}

interface WebGLContextAttributes {
  alpha?: boolean;
  antialias?: boolean;
  depth?: boolean;
  failIfMajorPerformanceCaveat?: boolean;
  premultipliedAlpha?: boolean;
  preserveDrawingBuffer?: boolean;
  stencil?: boolean;
}

interface WebGLContextEventInit extends EventInit {
  statusMessage?: string;
}

interface WheelEventInit extends MouseEventInit {
  deltaMode?: number;
  deltaX?: number;
  deltaY?: number;
  deltaZ?: number;
}

interface WorkletOptions {
  credentials?: RequestCredentials;
}

interface EventListener {
  (evt: Event): void;
}

interface ANGLE_instanced_arrays {
  drawArraysInstancedANGLE(mode: number, first: number, count: number, primcount: number): void;
  drawElementsInstancedANGLE(mode: number, count: number, type: number, offset: number, primcount: number): void;
  vertexAttribDivisorANGLE(index: number, divisor: number): void;
  readonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: number;
}

interface AbortController {
  readonly signal: AbortSignal;
  abort(): void;
}

interface AbortSignalEventMap {
  "abort": ProgressEvent;
}

interface AbortSignal extends EventTarget {
  readonly aborted: boolean;
  onabort: ((this: AbortSignal, ev: ProgressEvent) => any) | null;
  addEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface AbstractWorkerEventMap {
  "error": ErrorEvent;
}

interface AbstractWorker {
  onerror: ((this: AbstractWorker, ev: ErrorEvent) => any) | null;
  addEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface AesCfbParams extends Algorithm {
  iv: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;
}

interface AesCmacParams extends Algorithm {
  length: number;
}

interface AnalyserNode extends AudioNode {
  fftSize: number;
  readonly frequencyBinCount: number;
  maxDecibels: number;
  minDecibels: number;
  smoothingTimeConstant: number;
  getByteFrequencyData(array: Uint8Array): void;
  getByteTimeDomainData(array: Uint8Array): void;
  getFloatFrequencyData(array: Float32Array): void;
  getFloatTimeDomainData(array: Float32Array): void;
}

interface Animatable {
  animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
  getAnimations(): Animation[];
}

interface AnimationEventMap {
  "cancel": AnimationPlaybackEvent;
  "finish": AnimationPlaybackEvent;
}

interface Animation extends EventTarget {
  currentTime: number | null;
  effect: AnimationEffect | null;
  readonly finished: Promise<Animation>;
  id: string;
  oncancel: ((this: Animation, ev: AnimationPlaybackEvent) => any) | null;
  onfinish: ((this: Animation, ev: AnimationPlaybackEvent) => any) | null;
  readonly pending: boolean;
  readonly playState: AnimationPlayState;
  playbackRate: number;
  readonly ready: Promise<Animation>;
  startTime: number | null;
  timeline: AnimationTimeline | null;
  cancel(): void;
  finish(): void;
  pause(): void;
  play(): void;
  reverse(): void;
  updatePlaybackRate(playbackRate: number): void;
  addEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: Animation, ev: AnimationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: Animation, ev: AnimationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface AnimationEffect {
  getComputedTiming(): ComputedEffectTiming;
  getTiming(): EffectTiming;
  updateTiming(timing?: OptionalEffectTiming): void;
}

interface AnimationEvent extends Event {
  readonly animationName: string;
  readonly elapsedTime: number;
  readonly pseudoElement: string;
}

interface AnimationPlaybackEvent extends Event {
  readonly currentTime: number | null;
  readonly timelineTime: number | null;
}

interface AnimationTimeline {
  readonly currentTime: number | null;
}

interface ApplicationCacheEventMap {
  "cached": Event;
  "checking": Event;
  "downloading": Event;
  "error": Event;
  "noupdate": Event;
  "obsolete": Event;
  "progress": ProgressEvent;
  "updateready": Event;
}

interface ApplicationCache extends EventTarget {
  oncached: ((this: ApplicationCache, ev: Event) => any) | null;
  onchecking: ((this: ApplicationCache, ev: Event) => any) | null;
  ondownloading: ((this: ApplicationCache, ev: Event) => any) | null;
  onerror: ((this: ApplicationCache, ev: Event) => any) | null;
  onnoupdate: ((this: ApplicationCache, ev: Event) => any) | null;
  onobsolete: ((this: ApplicationCache, ev: Event) => any) | null;
  onprogress: ((this: ApplicationCache, ev: ProgressEvent) => any) | null;
  onupdateready: ((this: ApplicationCache, ev: Event) => any) | null;
  readonly status: number;
  abort(): void;
  swapCache(): void;
  update(): void;
  readonly CHECKING: number;
  readonly DOWNLOADING: number;
  readonly IDLE: number;
  readonly OBSOLETE: number;
  readonly UNCACHED: number;
  readonly UPDATEREADY: number;
  addEventListener<K extends keyof ApplicationCacheEventMap>(type: K, listener: (this: ApplicationCache, ev: ApplicationCacheEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof ApplicationCacheEventMap>(type: K, listener: (this: ApplicationCache, ev: ApplicationCacheEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface AssignedNodesOptions {
  flatten?: boolean;
}

interface Attr extends Node {
  readonly name: string;
  readonly ownerElement: Element | null;
  readonly prefix: string | null;
  readonly specified: boolean;
  value: string;
}

interface AudioBuffer {
  readonly duration: number;
  readonly length: number;
  readonly numberOfChannels: number;
  readonly sampleRate: number;
  copyFromChannel(destination: Float32Array, channelNumber: number, startInChannel?: number): void;
  copyToChannel(source: Float32Array, channelNumber: number, startInChannel?: number): void;
  getChannelData(channel: number): Float32Array;
}

interface AudioBufferSourceNode extends AudioScheduledSourceNode {
  buffer: AudioBuffer | null;
  readonly detune: AudioParam;
  loop: boolean;
  loopEnd: number;
  loopStart: number;
  readonly playbackRate: AudioParam;
  start(when?: number, offset?: number, duration?: number): void;
  addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioBufferSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioBufferSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface AudioContext extends BaseAudioContext {
  readonly baseLatency: number;
  readonly outputLatency: number;
  close(): Promise<void>;
  createMediaElementSource(mediaElement: HTMLMediaElement): MediaElementAudioSourceNode;
  createMediaStreamDestination(): MediaStreamAudioDestinationNode;
  createMediaStreamSource(mediaStream: MediaStream): MediaStreamAudioSourceNode;
  createMediaStreamTrackSource(mediaStreamTrack: MediaStreamTrack): MediaStreamTrackAudioSourceNode;
  getOutputTimestamp(): AudioTimestamp;
  suspend(): Promise<void>;
  addEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: AudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: AudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface AudioDestinationNode extends AudioNode {
  readonly maxChannelCount: number;
}

interface AudioListener {
  readonly forwardX: AudioParam;
  readonly forwardY: AudioParam;
  readonly forwardZ: AudioParam;
  readonly positionX: AudioParam;
  readonly positionY: AudioParam;
  readonly positionZ: AudioParam;
  readonly upX: AudioParam;
  readonly upY: AudioParam;
  readonly upZ: AudioParam;
  /** @deprecated */
  setOrientation(x: number, y: number, z: number, xUp: number, yUp: number, zUp: number): void;
  /** @deprecated */
  setPosition(x: number, y: number, z: number): void;
}

interface AudioNode extends EventTarget {
  channelCount: number;
  channelCountMode: ChannelCountMode;
  channelInterpretation: ChannelInterpretation;
  readonly context: BaseAudioContext;
  readonly numberOfInputs: number;
  readonly numberOfOutputs: number;
  connect(destinationNode: AudioNode, output?: number, input?: number): AudioNode;
  connect(destinationParam: AudioParam, output?: number): void;
  disconnect(): void;
  disconnect(output: number): void;
  disconnect(destinationNode: AudioNode): void;
  disconnect(destinationNode: AudioNode, output: number): void;
  disconnect(destinationNode: AudioNode, output: number, input: number): void;
  disconnect(destinationParam: AudioParam): void;
  disconnect(destinationParam: AudioParam, output: number): void;
}

interface AudioParam {
  automationRate: AutomationRate;
  readonly defaultValue: number;
  readonly maxValue: number;
  readonly minValue: number;
  value: number;
  cancelAndHoldAtTime(cancelTime: number): AudioParam;
  cancelScheduledValues(cancelTime: number): AudioParam;
  exponentialRampToValueAtTime(value: number, endTime: number): AudioParam;
  linearRampToValueAtTime(value: number, endTime: number): AudioParam;
  setTargetAtTime(target: number, startTime: number, timeConstant: number): AudioParam;
  setValueAtTime(value: number, startTime: number): AudioParam;
  setValueCurveAtTime(values: number[] | Float32Array, startTime: number, duration: number): AudioParam;
}

interface AudioParamMap {
  forEach(callbackfn: (value: AudioParam, key: string, parent: AudioParamMap) => void, thisArg?: any): void;
}

interface AudioProcessingEvent extends Event {
  readonly inputBuffer: AudioBuffer;
  readonly outputBuffer: AudioBuffer;
  readonly playbackTime: number;
}

interface AudioScheduledSourceNodeEventMap {
  "ended": Event;
}

interface AudioScheduledSourceNode extends AudioNode {
  onended: ((this: AudioScheduledSourceNode, ev: Event) => any) | null;
  start(when?: number): void;
  stop(when?: number): void;
  addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioScheduledSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioScheduledSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface AudioTrack {
  enabled: boolean;
  readonly id: string;
  kind: string;
  readonly label: string;
  language: string;
  readonly sourceBuffer: SourceBuffer;
}

interface AudioTrackListEventMap {
  "addtrack": TrackEvent;
  "change": Event;
  "removetrack": TrackEvent;
}

interface AudioTrackList extends EventTarget {
  readonly length: number;
  onaddtrack: ((this: AudioTrackList, ev: TrackEvent) => any) | null;
  onchange: ((this: AudioTrackList, ev: Event) => any) | null;
  onremovetrack: ((this: AudioTrackList, ev: TrackEvent) => any) | null;
  getTrackById(id: string): AudioTrack | null;
  item(index: number): AudioTrack;
  addEventListener<K extends keyof AudioTrackListEventMap>(type: K, listener: (this: AudioTrackList, ev: AudioTrackListEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof AudioTrackListEventMap>(type: K, listener: (this: AudioTrackList, ev: AudioTrackListEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  [index: number]: AudioTrack;
}

interface AudioWorklet extends Worklet {
}

interface AudioWorkletNodeEventMap {
  "processorerror": Event;
}

interface AudioWorkletNode extends AudioNode {
  onprocessorerror: ((this: AudioWorkletNode, ev: Event) => any) | null;
  readonly parameters: AudioParamMap;
  readonly port: MessagePort;
  addEventListener<K extends keyof AudioWorkletNodeEventMap>(type: K, listener: (this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof AudioWorkletNodeEventMap>(type: K, listener: (this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface BarProp {
  readonly visible: boolean;
}

interface BaseAudioContextEventMap {
  "statechange": Event;
}

interface BaseAudioContext extends EventTarget {
  readonly audioWorklet: AudioWorklet;
  readonly currentTime: number;
  readonly destination: AudioDestinationNode;
  readonly listener: AudioListener;
  onstatechange: ((this: BaseAudioContext, ev: Event) => any) | null;
  readonly sampleRate: number;
  readonly state: AudioContextState;
  createAnalyser(): AnalyserNode;
  createBiquadFilter(): BiquadFilterNode;
  createBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer;
  createBufferSource(): AudioBufferSourceNode;
  createChannelMerger(numberOfInputs?: number): ChannelMergerNode;
  createChannelSplitter(numberOfOutputs?: number): ChannelSplitterNode;
  createConstantSource(): ConstantSourceNode;
  createConvolver(): ConvolverNode;
  createDelay(maxDelayTime?: number): DelayNode;
  createDynamicsCompressor(): DynamicsCompressorNode;
  createGain(): GainNode;
  createIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode;
  createOscillator(): OscillatorNode;
  createPanner(): PannerNode;
  createPeriodicWave(real: number[] | Float32Array, imag: number[] | Float32Array, constraints?: PeriodicWaveConstraints): PeriodicWave;
  createScriptProcessor(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number): ScriptProcessorNode;
  createStereoPanner(): StereoPannerNode;
  createWaveShaper(): WaveShaperNode;
  decodeAudioData(audioData: ArrayBuffer, successCallback?: DecodeSuccessCallback, errorCallback?: DecodeErrorCallback): Promise<AudioBuffer>;
  resume(): Promise<void>;
  addEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: BaseAudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: BaseAudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface BeforeUnloadEvent extends Event {
  returnValue: any;
}

interface BhxBrowser {
  readonly lastError: DOMException;
  checkMatchesGlobExpression(pattern: string, value: string): boolean;
  checkMatchesUriExpression(pattern: string, value: string): boolean;
  clearLastError(): void;
  currentWindowId(): number;
  fireExtensionApiTelemetry(functionName: string, isSucceeded: boolean, isSupported: boolean, errorString: string): void;
  genericFunction(functionId: number, destination: any, parameters?: string, callbackId?: number): void;
  genericSynchronousFunction(functionId: number, parameters?: string): string;
  getExtensionId(): string;
  getThisAddress(): any;
  registerGenericFunctionCallbackHandler(callbackHandler: Function): void;
  registerGenericListenerHandler(eventHandler: Function): void;
  setLastError(parameters: string): void;
  webPlatformGenericFunction(destination: any, parameters?: string, callbackId?: number): void;
}

interface BiquadFilterNode extends AudioNode {
  readonly Q: AudioParam;
  readonly detune: AudioParam;
  readonly frequency: AudioParam;
  readonly gain: AudioParam;
  type: BiquadFilterType;
  getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void;
}

interface Blob {
  readonly size: number;
  readonly type: string;
  slice(start?: number, end?: number, contentType?: string): Blob;
}

interface Body {
  readonly body: ReadableStream | null;
  readonly bodyUsed: boolean;
  arrayBuffer(): Promise<ArrayBuffer>;
  blob(): Promise<Blob>;
  formData(): Promise<FormData>;
  json(): Promise<any>;
  text(): Promise<string>;
}

interface BroadcastChannelEventMap {
  "message": MessageEvent;
  "messageerror": MessageEvent;
}

interface BroadcastChannel extends EventTarget {
  /**
   * Returns the channel name (as passed to the constructor).
   */
  readonly name: string;
  onmessage: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;
  onmessageerror: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;
  /**
   * Closes the BroadcastChannel object, opening it up to garbage collection.
   */
  close(): void;
  /**
   * Sends the given message to other BroadcastChannel objects set up for this channel. Messages can be structured objects, e.g. nested objects and arrays.
   */
  postMessage(message: any): void;
  addEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface BroadcastChannelEventMap {
  message: MessageEvent;
  messageerror: MessageEvent;
}

interface ByteLengthQueuingStrategy {
  highWaterMark: number;
  size(chunk?: any): number;
}

interface CDATASection extends Text {
}

interface CSS {
  escape(value: string): string;
  supports(property: string, value?: string): boolean;
}

interface CSSConditionRule extends CSSGroupingRule {
  conditionText: string;
}

interface CSSFontFaceRule extends CSSRule {
  readonly style: CSSStyleDeclaration;
}

interface CSSGroupingRule extends CSSRule {
  readonly cssRules: CSSRuleList;
  deleteRule(index: number): void;
  insertRule(rule: string, index: number): number;
}

interface CSSImportRule extends CSSRule {
  readonly href: string;
  readonly media: MediaList;
  readonly styleSheet: CSSStyleSheet;
}

interface CSSKeyframeRule extends CSSRule {
  keyText: string;
  readonly style: CSSStyleDeclaration;
}

interface CSSKeyframesRule extends CSSRule {
  readonly cssRules: CSSRuleList;
  name: string;
  appendRule(rule: string): void;
  deleteRule(select: string): void;
  findRule(select: string): CSSKeyframeRule | null;
}

interface CSSMediaRule extends CSSConditionRule {
  readonly media: MediaList;
}

interface CSSNamespaceRule extends CSSRule {
  readonly namespaceURI: string;
  readonly prefix: string;
}

interface CSSPageRule extends CSSRule {
  readonly pseudoClass: string;
  readonly selector: string;
  selectorText: string;
  readonly style: CSSStyleDeclaration;
}

interface CSSRule {
  cssText: string;
  readonly parentRule: CSSRule | null;
  readonly parentStyleSheet: CSSStyleSheet | null;
  readonly type: number;
  readonly CHARSET_RULE: number;
  readonly FONT_FACE_RULE: number;
  readonly IMPORT_RULE: number;
  readonly KEYFRAMES_RULE: number;
  readonly KEYFRAME_RULE: number;
  readonly MEDIA_RULE: number;
  readonly NAMESPACE_RULE: number;
  readonly PAGE_RULE: number;
  readonly STYLE_RULE: number;
  readonly SUPPORTS_RULE: number;
  readonly UNKNOWN_RULE: number;
  readonly VIEWPORT_RULE: number;
}

interface CSSRuleList {
  readonly length: number;
  item(index: number): CSSRule | null;
  [index: number]: CSSRule;
}

interface CSSStyleDeclaration {
  alignContent: string | null;
  alignItems: string | null;
  alignSelf: string | null;
  alignmentBaseline: string | null;
  animation: string | null;
  animationDelay: string | null;
  animationDirection: string | null;
  animationDuration: string | null;
  animationFillMode: string | null;
  animationIterationCount: string | null;
  animationName: string | null;
  animationPlayState: string | null;
  animationTimingFunction: string | null;
  backfaceVisibility: string | null;
  background: string | null;
  backgroundAttachment: string | null;
  backgroundClip: string | null;
  backgroundColor: string | null;
  backgroundImage: string | null;
  backgroundOrigin: string | null;
  backgroundPosition: string | null;
  backgroundPositionX: string | null;
  backgroundPositionY: string | null;
  backgroundRepeat: string | null;
  backgroundSize: string | null;
  baselineShift: string | null;
  border: string | null;
  borderBottom: string | null;
  borderBottomColor: string | null;
  borderBottomLeftRadius: string | null;
  borderBottomRightRadius: string | null;
  borderBottomStyle: string | null;
  borderBottomWidth: string | null;
  borderCollapse: string | null;
  borderColor: string | null;
  borderImage: string | null;
  borderImageOutset: string | null;
  borderImageRepeat: string | null;
  borderImageSlice: string | null;
  borderImageSource: string | null;
  borderImageWidth: string | null;
  borderLeft: string | null;
  borderLeftColor: string | null;
  borderLeftStyle: string | null;
  borderLeftWidth: string | null;
  borderRadius: string | null;
  borderRight: string | null;
  borderRightColor: string | null;
  borderRightStyle: string | null;
  borderRightWidth: string | null;
  borderSpacing: string | null;
  borderStyle: string | null;
  borderTop: string | null;
  borderTopColor: string | null;
  borderTopLeftRadius: string | null;
  borderTopRightRadius: string | null;
  borderTopStyle: string | null;
  borderTopWidth: string | null;
  borderWidth: string | null;
  bottom: string | null;
  boxShadow: string | null;
  boxSizing: string | null;
  breakAfter: string | null;
  breakBefore: string | null;
  breakInside: string | null;
  captionSide: string | null;
  clear: string | null;
  clip: string | null;
  clipPath: string | null;
  clipRule: string | null;
  color: string | null;
  colorInterpolationFilters: string | null;
  columnCount: any;
  columnFill: string | null;
  columnGap: any;
  columnRule: string | null;
  columnRuleColor: any;
  columnRuleStyle: string | null;
  columnRuleWidth: any;
  columnSpan: string | null;
  columnWidth: any;
  columns: string | null;
  content: string | null;
  counterIncrement: string | null;
  counterReset: string | null;
  cssFloat: string | null;
  cssText: string;
  cursor: string | null;
  direction: string | null;
  display: string | null;
  dominantBaseline: string | null;
  emptyCells: string | null;
  enableBackground: string | null;
  fill: string | null;
  fillOpacity: string | null;
  fillRule: string | null;
  filter: string | null;
  flex: string | null;
  flexBasis: string | null;
  flexDirection: string | null;
  flexFlow: string | null;
  flexGrow: string | null;
  flexShrink: string | null;
  flexWrap: string | null;
  floodColor: string | null;
  floodOpacity: string | null;
  font: string | null;
  fontFamily: string | null;
  fontFeatureSettings: string | null;
  fontSize: string | null;
  fontSizeAdjust: string | null;
  fontStretch: string | null;
  fontStyle: string | null;
  fontVariant: string | null;
  fontWeight: string | null;
  gap: string | null;
  glyphOrientationHorizontal: string | null;
  glyphOrientationVertical: string | null;
  grid: string | null;
  gridArea: string | null;
  gridAutoColumns: string | null;
  gridAutoFlow: string | null;
  gridAutoRows: string | null;
  gridColumn: string | null;
  gridColumnEnd: string | null;
  gridColumnGap: string | null;
  gridColumnStart: string | null;
  gridGap: string | null;
  gridRow: string | null;
  gridRowEnd: string | null;
  gridRowGap: string | null;
  gridRowStart: string | null;
  gridTemplate: string | null;
  gridTemplateAreas: string | null;
  gridTemplateColumns: string | null;
  gridTemplateRows: string | null;
  height: string | null;
  imeMode: string | null;
  justifyContent: string | null;
  justifyItems: string | null;
  justifySelf: string | null;
  kerning: string | null;
  layoutGrid: string | null;
  layoutGridChar: string | null;
  layoutGridLine: string | null;
  layoutGridMode: string | null;
  layoutGridType: string | null;
  left: string | null;
  readonly length: number;
  letterSpacing: string | null;
  lightingColor: string | null;
  lineBreak: string | null;
  lineHeight: string | null;
  listStyle: string | null;
  listStyleImage: string | null;
  listStylePosition: string | null;
  listStyleType: string | null;
  margin: string | null;
  marginBottom: string | null;
  marginLeft: string | null;
  marginRight: string | null;
  marginTop: string | null;
  marker: string | null;
  markerEnd: string | null;
  markerMid: string | null;
  markerStart: string | null;
  mask: string | null;
  maskImage: string | null;
  maxHeight: string | null;
  maxWidth: string | null;
  minHeight: string | null;
  minWidth: string | null;
  msContentZoomChaining: string | null;
  msContentZoomLimit: string | null;
  msContentZoomLimitMax: any;
  msContentZoomLimitMin: any;
  msContentZoomSnap: string | null;
  msContentZoomSnapPoints: string | null;
  msContentZoomSnapType: string | null;
  msContentZooming: string | null;
  msFlowFrom: string | null;
  msFlowInto: string | null;
  msFontFeatureSettings: string | null;
  msGridColumn: any;
  msGridColumnAlign: string | null;
  msGridColumnSpan: any;
  msGridColumns: string | null;
  msGridRow: any;
  msGridRowAlign: string | null;
  msGridRowSpan: any;
  msGridRows: string | null;
  msHighContrastAdjust: string | null;
  msHyphenateLimitChars: string | null;
  msHyphenateLimitLines: any;
  msHyphenateLimitZone: any;
  msHyphens: string | null;
  msImeAlign: string | null;
  msOverflowStyle: string | null;
  msScrollChaining: string | null;
  msScrollLimit: string | null;
  msScrollLimitXMax: any;
  msScrollLimitXMin: any;
  msScrollLimitYMax: any;
  msScrollLimitYMin: any;
  msScrollRails: string | null;
  msScrollSnapPointsX: string | null;
  msScrollSnapPointsY: string | null;
  msScrollSnapType: string | null;
  msScrollSnapX: string | null;
  msScrollSnapY: string | null;
  msScrollTranslation: string | null;
  msTextCombineHorizontal: string | null;
  msTextSizeAdjust: any;
  msTouchAction: string | null;
  msTouchSelect: string | null;
  msUserSelect: string | null;
  msWrapFlow: string;
  msWrapMargin: any;
  msWrapThrough: string;
  objectFit: string | null;
  objectPosition: string | null;
  opacity: string | null;
  order: string | null;
  orphans: string | null;
  outline: string | null;
  outlineColor: string | null;
  outlineOffset: string | null;
  outlineStyle: string | null;
  outlineWidth: string | null;
  overflow: string | null;
  overflowX: string | null;
  overflowY: string | null;
  padding: string | null;
  paddingBottom: string | null;
  paddingLeft: string | null;
  paddingRight: string | null;
  paddingTop: string | null;
  pageBreakAfter: string | null;
  pageBreakBefore: string | null;
  pageBreakInside: string | null;
  readonly parentRule: CSSRule;
  penAction: string | null;
  perspective: string | null;
  perspectiveOrigin: string | null;
  pointerEvents: string | null;
  position: string | null;
  quotes: string | null;
  resize: string | null;
  right: string | null;
  rotate: string | null;
  rowGap: string | null;
  rubyAlign: string | null;
  rubyOverhang: string | null;
  rubyPosition: string | null;
  scale: string | null;
  stopColor: string | null;
  stopOpacity: string | null;
  stroke: string | null;
  strokeDasharray: string | null;
  strokeDashoffset: string | null;
  strokeLinecap: string | null;
  strokeLinejoin: string | null;
  strokeMiterlimit: string | null;
  strokeOpacity: string | null;
  strokeWidth: string | null;
  tableLayout: string | null;
  textAlign: string | null;
  textAlignLast: string | null;
  textAnchor: string | null;
  textCombineUpright: string | null;
  textDecoration: string | null;
  textIndent: string | null;
  textJustify: string | null;
  textKashida: string | null;
  textKashidaSpace: string | null;
  textOverflow: string | null;
  textShadow: string | null;
  textTransform: string | null;
  textUnderlinePosition: string | null;
  top: string | null;
  touchAction: string | null;
  transform: string | null;
  transformOrigin: string | null;
  transformStyle: string | null;
  transition: string | null;
  transitionDelay: string | null;
  transitionDuration: string | null;
  transitionProperty: string | null;
  transitionTimingFunction: string | null;
  translate: string | null;
  unicodeBidi: string | null;
  userSelect: string | null;
  verticalAlign: string | null;
  visibility: string | null;
  webkitAlignContent: string | null;
  webkitAlignItems: string | null;
  webkitAlignSelf: string | null;
  webkitAnimation: string | null;
  webkitAnimationDelay: string | null;
  webkitAnimationDirection: string | null;
  webkitAnimationDuration: string | null;
  webkitAnimationFillMode: string | null;
  webkitAnimationIterationCount: string | null;
  webkitAnimationName: string | null;
  webkitAnimationPlayState: string | null;
  webkitAnimationTimingFunction: string | null;
  webkitAppearance: string | null;
  webkitBackfaceVisibility: string | null;
  webkitBackgroundClip: string | null;
  webkitBackgroundOrigin: string | null;
  webkitBackgroundSize: string | null;
  webkitBorderBottomLeftRadius: string | null;
  webkitBorderBottomRightRadius: string | null;
  webkitBorderImage: string | null;
  webkitBorderRadius: string | null;
  webkitBorderTopLeftRadius: string | null;
  webkitBorderTopRightRadius: string | null;
  webkitBoxAlign: string | null;
  webkitBoxDirection: string | null;
  webkitBoxFlex: string | null;
  webkitBoxOrdinalGroup: string | null;
  webkitBoxOrient: string | null;
  webkitBoxPack: string | null;
  webkitBoxSizing: string | null;
  webkitColumnBreakAfter: string | null;
  webkitColumnBreakBefore: string | null;
  webkitColumnBreakInside: string | null;
  webkitColumnCount: any;
  webkitColumnGap: any;
  webkitColumnRule: string | null;
  webkitColumnRuleColor: any;
  webkitColumnRuleStyle: string | null;
  webkitColumnRuleWidth: any;
  webkitColumnSpan: string | null;
  webkitColumnWidth: any;
  webkitColumns: string | null;
  webkitFilter: string | null;
  webkitFlex: string | null;
  webkitFlexBasis: string | null;
  webkitFlexDirection: string | null;
  webkitFlexFlow: string | null;
  webkitFlexGrow: string | null;
  webkitFlexShrink: string | null;
  webkitFlexWrap: string | null;
  webkitJustifyContent: string | null;
  webkitOrder: string | null;
  webkitPerspective: string | null;
  webkitPerspectiveOrigin: string | null;
  webkitTapHighlightColor: string | null;
  webkitTextFillColor: string | null;
  webkitTextSizeAdjust: any;
  webkitTextStroke: string | null;
  webkitTextStrokeColor: string | null;
  webkitTextStrokeWidth: string | null;
  webkitTransform: string | null;
  webkitTransformOrigin: string | null;
  webkitTransformStyle: string | null;
  webkitTransition: string | null;
  webkitTransitionDelay: string | null;
  webkitTransitionDuration: string | null;
  webkitTransitionProperty: string | null;
  webkitTransitionTimingFunction: string | null;
  webkitUserModify: string | null;
  webkitUserSelect: string | null;
  webkitWritingMode: string | null;
  whiteSpace: string | null;
  widows: string | null;
  width: string | null;
  wordBreak: string | null;
  wordSpacing: string | null;
  wordWrap: string | null;
  writingMode: string | null;
  zIndex: string | null;
  zoom: string | null;
  getPropertyPriority(propertyName: string): string;
  getPropertyValue(propertyName: string): string;
  item(index: number): string;
  removeProperty(propertyName: string): string;
  setProperty(propertyName: string, value: string | null, priority?: string | null): void;
  [index: number]: string;
}

interface CSSStyleRule extends CSSRule {
  selectorText: string;
  readonly style: CSSStyleDeclaration;
}

interface CSSStyleSheet extends StyleSheet {
  readonly cssRules: CSSRuleList;
  /** @deprecated */
  cssText: string;
  /** @deprecated */
  readonly id: string;
  /** @deprecated */
  readonly imports: StyleSheetList;
  /** @deprecated */
  readonly isAlternate: boolean;
  /** @deprecated */
  readonly isPrefAlternate: boolean;
  readonly ownerRule: CSSRule | null;
  /** @deprecated */
  readonly owningElement: Element;
  /** @deprecated */
  readonly pages: any;
  /** @deprecated */
  readonly readOnly: boolean;
  readonly rules: CSSRuleList;
  /** @deprecated */
  addImport(bstrURL: string, lIndex?: number): number;
  /** @deprecated */
  addPageRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;
  addRule(bstrSelector: string, bstrStyle?: string, lIndex?: number): number;
  deleteRule(index?: number): void;
  insertRule(rule: string, index?: number): number;
  /** @deprecated */
  removeImport(lIndex: number): void;
  removeRule(lIndex: number): void;
}

interface CSSSupportsRule extends CSSConditionRule {
}

interface Cache {
  add(request: RequestInfo): Promise<void>;
  addAll(requests: RequestInfo[]): Promise<void>;
  delete(request: RequestInfo, options?: CacheQueryOptions): Promise<boolean>;
  keys(request?: RequestInfo, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;
  match(request: RequestInfo, options?: CacheQueryOptions): Promise<Response | undefined>;
  matchAll(request?: RequestInfo, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;
  put(request: RequestInfo, response: Response): Promise<void>;
}

interface CacheStorage {
  delete(cacheName: string): Promise<boolean>;
  has(cacheName: string): Promise<boolean>;
  keys(): Promise<string[]>;
  match(request: RequestInfo, options?: CacheQueryOptions): Promise<Response | undefined>;
  open(cacheName: string): Promise<Cache>;
}

interface Canvas2DContextAttributes {
  alpha?: boolean;
  storage?: boolean;
  willReadFrequently?: boolean;
  [attribute: string]: boolean | string | undefined;
}

interface CanvasGradient {
  addColorStop(offset: number, color: string): void;
}

interface CanvasPathMethods {
  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;
  arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
  arcTo(x1: number, y1: number, x2: number, y2: number, radiusX: number, radiusY: number, rotation: number): void;
  bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;
  closePath(): void;
  ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;
  lineTo(x: number, y: number): void;
  moveTo(x: number, y: number): void;
  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
  rect(x: number, y: number, w: number, h: number): void;
}

interface CanvasPattern {
  setTransform(matrix: SVGMatrix): void;
}

interface CanvasRenderingContext2D extends CanvasPathMethods {
  readonly canvas: HTMLCanvasElement;
  fillStyle: string | CanvasGradient | CanvasPattern;
  font: string;
  globalAlpha: number;
  globalCompositeOperation: string;
  imageSmoothingEnabled: boolean;
  lineCap: string;
  lineDashOffset: number;
  lineJoin: string;
  lineWidth: number;
  miterLimit: number;
  mozImageSmoothingEnabled: boolean;
  msFillRule: CanvasFillRule;
  oImageSmoothingEnabled: boolean;
  shadowBlur: number;
  shadowColor: string;
  shadowOffsetX: number;
  shadowOffsetY: number;
  strokeStyle: string | CanvasGradient | CanvasPattern;
  textAlign: string;
  textBaseline: string;
  webkitImageSmoothingEnabled: boolean;
  beginPath(): void;
  clearRect(x: number, y: number, w: number, h: number): void;
  clip(fillRule?: CanvasFillRule): void;
  clip(path: Path2D, fillRule?: CanvasFillRule): void;
  createImageData(imageDataOrSw: number | ImageData, sh?: number): ImageData;
  createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;
  createPattern(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, repetition: string): CanvasPattern;
  createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;
  drawFocusIfNeeded(element: Element): void;
  drawFocusIfNeeded(path: Path2D, element: Element): void;
  drawImage(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap, dstX: number, dstY: number): void;
  drawImage(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap, dstX: number, dstY: number, dstW: number, dstH: number): void;
  drawImage(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap, srcX: number, srcY: number, srcW: number, srcH: number, dstX: number, dstY: number, dstW: number, dstH: number): void;
  fill(fillRule?: CanvasFillRule): void;
  fill(path: Path2D, fillRule?: CanvasFillRule): void;
  fillRect(x: number, y: number, w: number, h: number): void;
  fillText(text: string, x: number, y: number, maxWidth?: number): void;
  getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;
  getLineDash(): number[];
  isPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean;
  isPointInPath(path: Path2D, x: number, y: number, fillRule?: CanvasFillRule): boolean;
  isPointInStroke(x: number, y: number, fillRule?: CanvasFillRule): boolean;
  isPointInStroke(path: Path2D, x: number, y: number, fillRule?: CanvasFillRule): boolean;
  measureText(text: string): TextMetrics;
  putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX?: number, dirtyY?: number, dirtyWidth?: number, dirtyHeight?: number): void;
  restore(): void;
  rotate(angle: number): void;
  save(): void;
  scale(x: number, y: number): void;
  setLineDash(segments: number[]): void;
  setTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;
  stroke(path?: Path2D): void;
  strokeRect(x: number, y: number, w: number, h: number): void;
  strokeText(text: string, x: number, y: number, maxWidth?: number): void;
  transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;
  translate(x: number, y: number): void;
}

interface ChannelMergerNode extends AudioNode {
}

interface ChannelSplitterNode extends AudioNode {
}

interface CharacterData extends Node, ChildNode {
  data: string;
  readonly length: number;
  appendData(arg: string): void;
  deleteData(offset: number, count: number): void;
  insertData(offset: number, arg: string): void;
  replaceData(offset: number, count: number, arg: string): void;
  substringData(offset: number, count: number): string;
}

interface ChildNode {
  remove(): void;
}

interface ClientRect {
  bottom: number;
  readonly height: number;
  left: number;
  right: number;
  top: number;
  readonly width: number;
}

interface ClientRectList {
  readonly length: number;
  item(index: number): ClientRect;
  [index: number]: ClientRect;
}

interface ClipboardEvent extends Event {
  readonly clipboardData: DataTransfer;
}

interface ClipboardEventInit extends EventInit {
  data?: string;
  dataType?: string;
}

interface CloseEvent extends Event {
  readonly code: number;
  readonly reason: string;
  readonly wasClean: boolean;
  /** @deprecated */
  initCloseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, wasCleanArg: boolean, codeArg: number, reasonArg: string): void;
}

interface Comment extends CharacterData {
  text: string;
}

interface CompositionEvent extends UIEvent {
  readonly data: string;
  readonly locale: string;
  initCompositionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, locale: string): void;
}

interface ConcatParams extends Algorithm {
  algorithmId: Uint8Array;
  hash?: string | Algorithm;
  partyUInfo: Uint8Array;
  partyVInfo: Uint8Array;
  privateInfo?: Uint8Array;
  publicInfo?: Uint8Array;
}

interface Console {
  memory: any;
  assert(condition?: boolean, message?: string, ...data: any[]): void;
  clear(): void;
  count(label?: string): void;
  debug(message?: any, ...optionalParams: any[]): void;
  dir(value?: any, ...optionalParams: any[]): void;
  dirxml(value: any): void;
  error(message?: any, ...optionalParams: any[]): void;
  exception(message?: string, ...optionalParams: any[]): void;
  group(groupTitle?: string, ...optionalParams: any[]): void;
  groupCollapsed(groupTitle?: string, ...optionalParams: any[]): void;
  groupEnd(): void;
  info(message?: any, ...optionalParams: any[]): void;
  log(message?: any, ...optionalParams: any[]): void;
  markTimeline(label?: string): void;
  msIsIndependentlyComposed(element: Element): boolean;
  profile(reportName?: string): void;
  profileEnd(): void;
  select(element: Element): void;
  table(...tabularData: any[]): void;
  time(label?: string): void;
  timeEnd(label?: string): void;
  timeStamp(label?: string): void;
  timeline(label?: string): void;
  timelineEnd(label?: string): void;
  trace(message?: any, ...optionalParams: any[]): void;
  warn(message?: any, ...optionalParams: any[]): void;
}

interface ConstantSourceNode extends AudioScheduledSourceNode {
  readonly offset: AudioParam;
  addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: ConstantSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: ConstantSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface ConvolverNode extends AudioNode {
  buffer: AudioBuffer | null;
  normalize: boolean;
}

interface Coordinates {
  readonly accuracy: number;
  readonly altitude: number | null;
  readonly altitudeAccuracy: number | null;
  readonly heading: number | null;
  readonly latitude: number;
  readonly longitude: number;
  readonly speed: number | null;
}

interface CountQueuingStrategy {
  highWaterMark: number;
  size(): number;
}

interface Crypto {
  readonly subtle: SubtleCrypto;
  getRandomValues<T extends Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | null>(array: T): T;
}

interface CryptoKey {
  readonly algorithm: KeyAlgorithm;
  readonly extractable: boolean;
  readonly type: string;
  readonly usages: string[];
}

interface CryptoKeyPair {
  privateKey: CryptoKey;
  publicKey: CryptoKey;
}

interface CustomElementRegistry {
  define(name: string, constructor: Function, options?: ElementDefinitionOptions): void;
  get(name: string): any;
  whenDefined(name: string): PromiseLike<void>;
}

interface CustomEvent<T = any> extends Event {
  readonly detail: T;
  initCustomEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, detailArg: T): void;
}

interface DOMError {
  readonly name: string;
  toString(): string;
}

interface DOMException {
  readonly code: number;
  readonly message: string;
  readonly name: string;
  readonly ABORT_ERR: number;
  readonly DATA_CLONE_ERR: number;
  readonly DOMSTRING_SIZE_ERR: number;
  readonly HIERARCHY_REQUEST_ERR: number;
  readonly INDEX_SIZE_ERR: number;
  readonly INUSE_ATTRIBUTE_ERR: number;
  readonly INVALID_ACCESS_ERR: number;
  readonly INVALID_CHARACTER_ERR: number;
  readonly INVALID_MODIFICATION_ERR: number;
  readonly INVALID_NODE_TYPE_ERR: number;
  readonly INVALID_STATE_ERR: number;
  readonly NAMESPACE_ERR: number;
  readonly NETWORK_ERR: number;
  readonly NOT_FOUND_ERR: number;
  readonly NOT_SUPPORTED_ERR: number;
  readonly NO_DATA_ALLOWED_ERR: number;
  readonly NO_MODIFICATION_ALLOWED_ERR: number;
  readonly QUOTA_EXCEEDED_ERR: number;
  readonly SECURITY_ERR: number;
  readonly SYNTAX_ERR: number;
  readonly TIMEOUT_ERR: number;
  readonly TYPE_MISMATCH_ERR: number;
  readonly URL_MISMATCH_ERR: number;
  readonly VALIDATION_ERR: number;
  readonly WRONG_DOCUMENT_ERR: number;
}

interface DOMImplementation {
  createDocument(namespaceURI: string | null, qualifiedName: string | null, doctype: DocumentType | null): Document;
  createDocumentType(qualifiedName: string, publicId: string, systemId: string): DocumentType;
  createHTMLDocument(title?: string): Document;
  hasFeature(feature: string | null, version: string | null): boolean;
}

interface DOML2DeprecatedColorProperty {
  color: string;
}

interface DOML2DeprecatedSizeProperty {
  size: number;
}

interface DOMMatrix extends DOMMatrixReadOnly {
  a: number;
  b: number;
  c: number;
  d: number;
  e: number;
  f: number;
  m11: number;
  m12: number;
  m13: number;
  m14: number;
  m21: number;
  m22: number;
  m23: number;
  m24: number;
  m31: number;
  m32: number;
  m33: number;
  m34: number;
  m41: number;
  m42: number;
  m43: number;
  m44: number;
  invertSelf(): DOMMatrix;
  multiplySelf(other?: DOMMatrixInit): DOMMatrix;
  preMultiplySelf(other?: DOMMatrixInit): DOMMatrix;
  rotateAxisAngleSelf(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
  rotateFromVectorSelf(x?: number, y?: number): DOMMatrix;
  rotateSelf(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;
  scale3dSelf(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
  scaleSelf(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
  setMatrixValue(transformList: string): DOMMatrix;
  skewXSelf(sx?: number): DOMMatrix;
  skewYSelf(sy?: number): DOMMatrix;
  translateSelf(tx?: number, ty?: number, tz?: number): DOMMatrix;
}

type SVGMatrix = DOMMatrix;

type WebKitCSSMatrix = DOMMatrix;

interface DOMMatrixReadOnly {
  readonly a: number;
  readonly b: number;
  readonly c: number;
  readonly d: number;
  readonly e: number;
  readonly f: number;
  readonly is2D: boolean;
  readonly isIdentity: boolean;
  readonly m11: number;
  readonly m12: number;
  readonly m13: number;
  readonly m14: number;
  readonly m21: number;
  readonly m22: number;
  readonly m23: number;
  readonly m24: number;
  readonly m31: number;
  readonly m32: number;
  readonly m33: number;
  readonly m34: number;
  readonly m41: number;
  readonly m42: number;
  readonly m43: number;
  readonly m44: number;
  flipX(): DOMMatrix;
  flipY(): DOMMatrix;
  inverse(): DOMMatrix;
  multiply(other?: DOMMatrixInit): DOMMatrix;
  rotate(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;
  rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
  rotateFromVector(x?: number, y?: number): DOMMatrix;
  scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
  scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
  skewX(sx?: number): DOMMatrix;
  skewY(sy?: number): DOMMatrix;
  toFloat32Array(): Float32Array;
  toFloat64Array(): Float64Array;
  toJSON(): any;
  transformPoint(point?: DOMPointInit): DOMPoint;
  translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
}

interface DOMParser {
  parseFromString(source: string, mimeType: string): Document;
}

declare var DOMParser: {
  prototype: DOMParser;
  new(): DOMParser;
};

interface DOMPoint extends DOMPointReadOnly {
  w: number;
  x: number;
  y: number;
  z: number;
}

type SVGPoint = DOMPoint;

interface DOMPointReadOnly {
  readonly w: number;
  readonly x: number;
  readonly y: number;
  readonly z: number;
  matrixTransform(matrix?: DOMMatrixInit): DOMPoint;
  toJSON(): any;
}

interface DOMQuad {
  readonly p1: DOMPoint;
  readonly p2: DOMPoint;
  readonly p3: DOMPoint;
  readonly p4: DOMPoint;
  getBounds(): DOMRect;
  toJSON(): any;
}

interface DOMRect extends DOMRectReadOnly {
  height: number;
  width: number;
  x: number;
  y: number;
}

type SVGRect = DOMRect;

interface DOMRectList {
  readonly length: number;
  item(index: number): DOMRect | null;
  [index: number]: DOMRect;
}

interface DOMRectReadOnly {
  readonly bottom: number;
  readonly height: number;
  readonly left: number;
  readonly right: number;
  readonly top: number;
  readonly width: number;
  readonly x: number;
  readonly y: number;
  toJSON(): any;
}

interface DOMSettableTokenList extends DOMTokenList {
  value: string;
}

interface DOMStringList {
  /**
   * Returns the number of strings in strings.
   */
  readonly length: number;
  /**
   * Returns true if strings contains string, and false
   * otherwise.
   */
  contains(string: string): boolean;
  /**
   * Returns the string with index index from strings.
   */
  item(index: number): string | null;
  [index: number]: string;
}

interface DOMStringMap {
  [name: string]: string | undefined;
}

interface DOMTokenList {
  readonly length: number;
  add(...tokens: string[]): void;
  contains(token: string): boolean;
  item(index: number): string | null;
  remove(...tokens: string[]): void;
  replace(oldToken: string, newToken: string): void;
  toString(): string;
  toggle(token: string, force?: boolean): boolean;
  [index: number]: string;
}

interface DataCue extends TextTrackCue {
  data: ArrayBuffer;
  addEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: DataCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: DataCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface DataTransfer {
  dropEffect: string;
  effectAllowed: string;
  readonly files: FileList;
  readonly items: DataTransferItemList;
  readonly types: string[];
  clearData(format?: string): boolean;
  getData(format: string): string;
  setData(format: string, data: string): boolean;
  setDragImage(image: Element, x: number, y: number): void;
}

interface DataTransferItem {
  readonly kind: string;
  readonly type: string;
  getAsFile(): File | null;
  getAsString(_callback: FunctionStringCallback | null): void;
  webkitGetAsEntry(): any;
}

interface DataTransferItemList {
  readonly length: number;
  add(data: File): DataTransferItem | null;
  add(data: string, type: string): DataTransferItem | null;
  clear(): void;
  item(index: number): DataTransferItem;
  remove(index: number): void;
  [name: number]: DataTransferItem;
}

interface DeferredPermissionRequest {
  readonly id: number;
  readonly type: MSWebViewPermissionType;
  readonly uri: string;
  allow(): void;
  deny(): void;
}

interface DelayNode extends AudioNode {
  readonly delayTime: AudioParam;
}

interface DeviceAcceleration {
  readonly x: number | null;
  readonly y: number | null;
  readonly z: number | null;
}

interface DeviceLightEvent extends Event {
  readonly value: number;
}

interface DeviceMotionEvent extends Event {
  readonly acceleration: DeviceAcceleration | null;
  readonly accelerationIncludingGravity: DeviceAcceleration | null;
  readonly interval: number | null;
  readonly rotationRate: DeviceRotationRate | null;
  initDeviceMotionEvent(type: string, bubbles: boolean, cancelable: boolean, acceleration: DeviceAccelerationDict | null, accelerationIncludingGravity: DeviceAccelerationDict | null, rotationRate: DeviceRotationRateDict | null, interval: number | null): void;
}

interface DeviceOrientationEvent extends Event {
  readonly absolute: boolean;
  readonly alpha: number | null;
  readonly beta: number | null;
  readonly gamma: number | null;
  initDeviceOrientationEvent(type: string, bubbles: boolean, cancelable: boolean, alpha: number | null, beta: number | null, gamma: number | null, absolute: boolean): void;
}

interface DeviceRotationRate {
  readonly alpha: number | null;
  readonly beta: number | null;
  readonly gamma: number | null;
}

interface DhImportKeyParams extends Algorithm {
  generator: Uint8Array;
  prime: Uint8Array;
}

interface DhKeyAlgorithm extends KeyAlgorithm {
  generator: Uint8Array;
  prime: Uint8Array;
}

interface DhKeyDeriveParams extends Algorithm {
  public: CryptoKey;
}

interface DhKeyGenParams extends Algorithm {
  generator: Uint8Array;
  prime: Uint8Array;
}

interface DocumentEventMap extends GlobalEventHandlersEventMap {
  "abort": UIEvent;
  "activate": Event;
  "beforeactivate": Event;
  "beforedeactivate": Event;
  "blur": FocusEvent;
  "canplay": Event;
  "canplaythrough": Event;
  "change": Event;
  "click": MouseEvent;
  "contextmenu": PointerEvent;
  "dblclick": MouseEvent;
  "deactivate": Event;
  "drag": DragEvent;
  "dragend": DragEvent;
  "dragenter": DragEvent;
  "dragleave": DragEvent;
  "dragover": DragEvent;
  "dragstart": DragEvent;
  "drop": DragEvent;
  "durationchange": Event;
  "emptied": Event;
  "ended": Event;
  "error": ErrorEvent;
  "focus": FocusEvent;
  "fullscreenchange": Event;
  "fullscreenerror": Event;
  "input": Event;
  "invalid": Event;
  "keydown": KeyboardEvent;
  "keypress": KeyboardEvent;
  "keyup": KeyboardEvent;
  "load": Event;
  "loadeddata": Event;
  "loadedmetadata": Event;
  "loadstart": Event;
  "mousedown": MouseEvent;
  "mousemove": MouseEvent;
  "mouseout": MouseEvent;
  "mouseover": MouseEvent;
  "mouseup": MouseEvent;
  "mousewheel": WheelEvent;
  "MSContentZoom": Event;
  "MSGestureChange": Event;
  "MSGestureDoubleTap": Event;
  "MSGestureEnd": Event;
  "MSGestureHold": Event;
  "MSGestureStart": Event;
  "MSGestureTap": Event;
  "MSInertiaStart": Event;
  "MSManipulationStateChanged": Event;
  "MSPointerCancel": Event;
  "MSPointerDown": Event;
  "MSPointerEnter": Event;
  "MSPointerLeave": Event;
  "MSPointerMove": Event;
  "MSPointerOut": Event;
  "MSPointerOver": Event;
  "MSPointerUp": Event;
  "mssitemodejumplistitemremoved": Event;
  "msthumbnailclick": Event;
  "pause": Event;
  "play": Event;
  "playing": Event;
  "pointerlockchange": Event;
  "pointerlockerror": Event;
  "progress": ProgressEvent;
  "ratechange": Event;
  "readystatechange": Event;
  "reset": Event;
  "scroll": UIEvent;
  "seeked": Event;
  "seeking": Event;
  "select": UIEvent;
  "selectionchange": Event;
  "selectstart": Event;
  "stalled": Event;
  "stop": Event;
  "submit": Event;
  "suspend": Event;
  "timeupdate": Event;
  "touchcancel": TouchEvent;
  "touchend": TouchEvent;
  "touchmove": TouchEvent;
  "touchstart": TouchEvent;
  "volumechange": Event;
  "waiting": Event;
  "webkitfullscreenchange": Event;
  "webkitfullscreenerror": Event;
}

interface Document extends Node, GlobalEventHandlers, ParentNode, DocumentEvent {
  /**
   * Sets or gets the URL for the current document.
   */
  readonly URL: string;
  /**
   * Gets the URL for the document, stripped of any character encoding.
   */
  readonly URLUnencoded: string;
  /**
   * Gets the object that has the focus when the parent document has focus.
   */
  readonly activeElement: Element;
  /**
   * Sets or gets the color of all active links in the document.
   */
  /** @deprecated */
  alinkColor: string;
  /**
   * Returns a reference to the collection of elements contained by the object.
   */
  /** @deprecated */
  readonly all: HTMLAllCollection;
  /**
   * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.
   */
  /** @deprecated */
  readonly anchors: HTMLCollectionOf<HTMLAnchorElement>;
  /**
   * Retrieves a collection of all applet objects in the document.
   */
  /** @deprecated */
  readonly applets: HTMLCollectionOf<HTMLAppletElement>;
  /**
   * Deprecated. Sets or retrieves a value that indicates the background color behind the object.
   */
  /** @deprecated */
  bgColor: string;
  /**
   * Specifies the beginning and end of the document body.
   */
  body: HTMLElement;
  readonly characterSet: string;
  /**
   * Gets or sets the character set used to encode the object.
   */
  charset: string;
  /**
   * Gets a value that indicates whether standards-compliant mode is switched on for the object.
   */
  readonly compatMode: string;
  cookie: string;
  readonly currentScript: HTMLScriptElement | SVGScriptElement | null;
  readonly defaultView: Window;
  /**
   * Sets or gets a value that indicates whether the document can be edited.
   */
  designMode: string;
  /**
   * Sets or retrieves a value that indicates the reading order of the object.
   */
  dir: string;
  /**
   * Gets an object representing the document type declaration associated with the current document.
   */
  readonly doctype: DocumentType;
  /**
   * Gets a reference to the root node of the document.
   */
  readonly documentElement: HTMLElement;
  /**
   * Sets or gets the security domain of the document.
   */
  domain: string;
  /**
   * Retrieves a collection of all embed objects in the document.
   */
  readonly embeds: HTMLCollectionOf<HTMLEmbedElement>;
  /**
   * Sets or gets the foreground (text) color of the document.
   */
  /** @deprecated */
  fgColor: string;
  /**
   * Retrieves a collection, in source order, of all form objects in the document.
   */
  readonly forms: HTMLCollectionOf<HTMLFormElement>;
  readonly fullscreenElement: Element | null;
  readonly fullscreenEnabled: boolean;
  readonly head: HTMLHeadElement;
  readonly hidden: boolean;
  /**
   * Retrieves a collection, in source order, of img objects in the document.
   */
  readonly images: HTMLCollectionOf<HTMLImageElement>;
  /**
   * Gets the implementation object of the current document.
   */
  readonly implementation: DOMImplementation;
  /**
   * Returns the character encoding used to create the webpage that is loaded into the document object.
   */
  readonly inputEncoding: string | null;
  /**
   * Gets the date that the page was last modified, if the page supplies one.
   */
  readonly lastModified: string;
  /**
   * Sets or gets the color of the document links.
   */
  /** @deprecated */
  linkColor: string;
  /**
   * Retrieves a collection of all a objects that specify the href property and all area objects in the document.
   */
  readonly links: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;
  /**
   * Contains information about the current URL.
   */
  location: Location;
  msCSSOMElementFloatMetrics: boolean;
  msCapsLockWarningOff: boolean;
  /**
   * Fires when the user aborts the download.
   * @param ev The event.
   */
  onabort: ((this: Document, ev: UIEvent) => any) | null;
  /**
   * Fires when the object is set as the active element.
   * @param ev The event.
   */
  onactivate: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires immediately before the object is set as the active element.
   * @param ev The event.
   */
  onbeforeactivate: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires immediately before the activeElement is changed from the current object to another object in the parent document.
   * @param ev The event.
   */
  onbeforedeactivate: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires when the object loses the input focus.
   * @param ev The focus event.
   */
  onblur: ((this: Document, ev: FocusEvent) => any) | null;
  /**
   * Occurs when playback is possible, but would require further buffering.
   * @param ev The event.
   */
  oncanplay: ((this: Document, ev: Event) => any) | null;
  oncanplaythrough: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires when the contents of the object or selection have changed.
   * @param ev The event.
   */
  onchange: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires when the user clicks the left mouse button on the object
   * @param ev The mouse event.
   */
  onclick: ((this: Document, ev: MouseEvent) => any) | null;
  /**
   * Fires when the user clicks the right mouse button in the client area, opening the context menu.
   * @param ev The mouse event.
   */
  oncontextmenu: ((this: Document, ev: PointerEvent) => any) | null;
  /**
   * Fires when the user double-clicks the object.
   * @param ev The mouse event.
   */
  ondblclick: ((this: Document, ev: MouseEvent) => any) | null;
  /**
   * Fires when the activeElement is changed from the current object to another object in the parent document.
   * @param ev The UI Event
   */
  ondeactivate: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires on the source object continuously during a drag operation.
   * @param ev The event.
   */
  ondrag: ((this: Document, ev: DragEvent) => any) | null;
  /**
   * Fires on the source object when the user releases the mouse at the close of a drag operation.
   * @param ev The event.
   */
  ondragend: ((this: Document, ev: DragEvent) => any) | null;
  /**
   * Fires on the target element when the user drags the object to a valid drop target.
   * @param ev The drag event.
   */
  ondragenter: ((this: Document, ev: DragEvent) => any) | null;
  /**
   * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
   * @param ev The drag event.
   */
  ondragleave: ((this: Document, ev: DragEvent) => any) | null;
  /**
   * Fires on the target element continuously while the user drags the object over a valid drop target.
   * @param ev The event.
   */
  ondragover: ((this: Document, ev: DragEvent) => any) | null;
  /**
   * Fires on the source object when the user starts to drag a text selection or selected object.
   * @param ev The event.
   */
  ondragstart: ((this: Document, ev: DragEvent) => any) | null;
  ondrop: ((this: Document, ev: DragEvent) => any) | null;
  /**
   * Occurs when the duration attribute is updated.
   * @param ev The event.
   */
  ondurationchange: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when the media element is reset to its initial state.
   * @param ev The event.
   */
  onemptied: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when the end of playback is reached.
   * @param ev The event
   */
  onended: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires when an error occurs during object loading.
   * @param ev The event.
   */
  onerror: ((this: Document, ev: ErrorEvent) => any) | null;
  /**
   * Fires when the object receives focus.
   * @param ev The event.
   */
  onfocus: ((this: Document, ev: FocusEvent) => any) | null;
  onfullscreenchange: ((this: Document, ev: Event) => any) | null;
  onfullscreenerror: ((this: Document, ev: Event) => any) | null;
  oninput: ((this: Document, ev: Event) => any) | null;
  oninvalid: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires when the user presses a key.
   * @param ev The keyboard event
   */
  onkeydown: ((this: Document, ev: KeyboardEvent) => any) | null;
  /**
   * Fires when the user presses an alphanumeric key.
   * @param ev The event.
   */
  onkeypress: ((this: Document, ev: KeyboardEvent) => any) | null;
  /**
   * Fires when the user releases a key.
   * @param ev The keyboard event
   */
  onkeyup: ((this: Document, ev: KeyboardEvent) => any) | null;
  /**
   * Fires immediately after the browser loads the object.
   * @param ev The event.
   */
  onload: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when media data is loaded at the current playback position.
   * @param ev The event.
   */
  onloadeddata: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when the duration and dimensions of the media have been determined.
   * @param ev The event.
   */
  onloadedmetadata: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when Internet Explorer begins looking for media data.
   * @param ev The event.
   */
  onloadstart: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires when the user clicks the object with either mouse button.
   * @param ev The mouse event.
   */
  onmousedown: ((this: Document, ev: MouseEvent) => any) | null;
  /**
   * Fires when the user moves the mouse over the object.
   * @param ev The mouse event.
   */
  onmousemove: ((this: Document, ev: MouseEvent) => any) | null;
  /**
   * Fires when the user moves the mouse pointer outside the boundaries of the object.
   * @param ev The mouse event.
   */
  onmouseout: ((this: Document, ev: MouseEvent) => any) | null;
  /**
   * Fires when the user moves the mouse pointer into the object.
   * @param ev The mouse event.
   */
  onmouseover: ((this: Document, ev: MouseEvent) => any) | null;
  /**
   * Fires when the user releases a mouse button while the mouse is over the object.
   * @param ev The mouse event.
   */
  onmouseup: ((this: Document, ev: MouseEvent) => any) | null;
  /**
   * Fires when the wheel button is rotated.
   * @param ev The mouse event
   */
  onmousewheel: ((this: Document, ev: WheelEvent) => any) | null;
  onmscontentzoom: ((this: Document, ev: Event) => any) | null;
  onmsgesturechange: ((this: Document, ev: Event) => any) | null;
  onmsgesturedoubletap: ((this: Document, ev: Event) => any) | null;
  onmsgestureend: ((this: Document, ev: Event) => any) | null;
  onmsgesturehold: ((this: Document, ev: Event) => any) | null;
  onmsgesturestart: ((this: Document, ev: Event) => any) | null;
  onmsgesturetap: ((this: Document, ev: Event) => any) | null;
  onmsinertiastart: ((this: Document, ev: Event) => any) | null;
  onmsmanipulationstatechanged: ((this: Document, ev: Event) => any) | null;
  onmspointercancel: ((this: Document, ev: Event) => any) | null;
  onmspointerdown: ((this: Document, ev: Event) => any) | null;
  onmspointerenter: ((this: Document, ev: Event) => any) | null;
  onmspointerleave: ((this: Document, ev: Event) => any) | null;
  onmspointermove: ((this: Document, ev: Event) => any) | null;
  onmspointerout: ((this: Document, ev: Event) => any) | null;
  onmspointerover: ((this: Document, ev: Event) => any) | null;
  onmspointerup: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when an item is removed from a Jump List of a webpage running in Site Mode.
   * @param ev The event.
   */
  onmssitemodejumplistitemremoved: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when a user clicks a button in a Thumbnail Toolbar of a webpage running in Site Mode.
   * @param ev The event.
   */
  onmsthumbnailclick: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when playback is paused.
   * @param ev The event.
   */
  onpause: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when the play method is requested.
   * @param ev The event.
   */
  onplay: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when the audio or video has started playing.
   * @param ev The event.
   */
  onplaying: ((this: Document, ev: Event) => any) | null;
  onpointerlockchange: ((this: Document, ev: Event) => any) | null;
  onpointerlockerror: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs to indicate progress while downloading media data.
   * @param ev The event.
   */
  onprogress: ((this: Document, ev: ProgressEvent) => any) | null;
  /**
   * Occurs when the playback rate is increased or decreased.
   * @param ev The event.
   */
  onratechange: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires when the state of the object has changed.
   * @param ev The event
   */
  onreadystatechange: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires when the user resets a form.
   * @param ev The event.
   */
  onreset: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires when the user repositions the scroll box in the scroll bar on the object.
   * @param ev The event.
   */
  onscroll: ((this: Document, ev: UIEvent) => any) | null;
  /**
   * Occurs when the seek operation ends.
   * @param ev The event.
   */
  onseeked: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when the current playback position is moved.
   * @param ev The event.
   */
  onseeking: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires when the current selection changes.
   * @param ev The event.
   */
  onselect: ((this: Document, ev: UIEvent) => any) | null;
  /**
   * Fires when the selection state of a document changes.
   * @param ev The event.
   */
  onselectionchange: ((this: Document, ev: Event) => any) | null;
  onselectstart: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when the download has stopped.
   * @param ev The event.
   */
  onstalled: ((this: Document, ev: Event) => any) | null;
  /**
   * Fires when the user clicks the Stop button or leaves the Web page.
   * @param ev The event.
   */
  onstop: ((this: Document, ev: Event) => any) | null;
  onsubmit: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs if the load operation has been intentionally halted.
   * @param ev The event.
   */
  onsuspend: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs to indicate the current playback position.
   * @param ev The event.
   */
  ontimeupdate: ((this: Document, ev: Event) => any) | null;
  onvisibilitychange: (this: Document, ev: Event) => any;
  /**
   * Occurs when the volume is changed, or playback is muted or unmuted.
   * @param ev The event.
   */
  onvolumechange: ((this: Document, ev: Event) => any) | null;
  /**
   * Occurs when playback stops because the next frame of a video resource is not available.
   * @param ev The event.
   */
  onwaiting: ((this: Document, ev: Event) => any) | null;
  onwebkitfullscreenchange: ((this: Document, ev: Event) => any) | null;
  onwebkitfullscreenerror: ((this: Document, ev: Event) => any) | null;
  readonly plugins: HTMLCollectionOf<HTMLEmbedElement>;
  readonly pointerLockElement: Element;
  /**
   * Retrieves a value that indicates the current state of the object.
   */
  readonly readyState: DocumentReadyState;
  /**
   * Gets the URL of the location that referred the user to the current page.
   */
  readonly referrer: string;
  /**
   * Gets the root svg element in the document hierarchy.
   */
  readonly rootElement: SVGSVGElement;
  /**
   * Retrieves a collection of all script objects in the document.
   */
  readonly scripts: HTMLCollectionOf<HTMLScriptElement>;
  readonly scrollingElement: Element | null;
  /**
   * Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.
   */
  readonly styleSheets: StyleSheetList;
  readonly timeline: DocumentTimeline;
  /**
   * Contains the title of the document.
   */
  title: string;
  readonly visibilityState: VisibilityState;
  /**
   * Sets or gets the color of the links that the user has visited.
   */
  /** @deprecated */
  vlinkColor: string;
  readonly webkitCurrentFullScreenElement: Element | null;
  readonly webkitFullscreenElement: Element | null;
  readonly webkitFullscreenEnabled: boolean;
  readonly webkitIsFullScreen: boolean;
  readonly xmlEncoding: string | null;
  xmlStandalone: boolean;
  /**
   * Gets or sets the version attribute specified in the declaration of an XML document.
   */
  xmlVersion: string | null;
  adoptNode<T extends Node>(source: T): T;
  /** @deprecated */
  captureEvents(): void;
  caretRangeFromPoint(x: number, y: number): Range;
  /** @deprecated */
  clear(): void;
  /**
   * Closes an output stream and forces the sent data to display.
   */
  close(): void;
  /**
   * Creates an attribute object with a specified name.
   * @param name String that sets the attribute object's name.
   */
  createAttribute(name: string): Attr;
  createAttributeNS(namespaceURI: string | null, qualifiedName: string): Attr;
  createCDATASection(data: string): CDATASection;
  /**
   * Creates a comment object with the specified data.
   * @param data Sets the comment object's data.
   */
  createComment(data: string): Comment;
  /**
   * Creates a new document.
   */
  createDocumentFragment(): DocumentFragment;
  /**
   * Creates an instance of the element for the specified tag.
   * @param tagName The name of an element.
   */
  createElement<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];
  createElement(tagName: string, options?: ElementCreationOptions): HTMLElement;
  createElementNS(namespaceURI: "http://www.w3.org/1999/xhtml", qualifiedName: string): HTMLElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "a"): SVGAElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "circle"): SVGCircleElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "clipPath"): SVGClipPathElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "componentTransferFunction"): SVGComponentTransferFunctionElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "defs"): SVGDefsElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "desc"): SVGDescElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "ellipse"): SVGEllipseElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feBlend"): SVGFEBlendElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feColorMatrix"): SVGFEColorMatrixElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feComponentTransfer"): SVGFEComponentTransferElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feComposite"): SVGFECompositeElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feConvolveMatrix"): SVGFEConvolveMatrixElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feDiffuseLighting"): SVGFEDiffuseLightingElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feDisplacementMap"): SVGFEDisplacementMapElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feDistantLight"): SVGFEDistantLightElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feFlood"): SVGFEFloodElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feFuncA"): SVGFEFuncAElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feFuncB"): SVGFEFuncBElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feFuncG"): SVGFEFuncGElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feFuncR"): SVGFEFuncRElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feGaussianBlur"): SVGFEGaussianBlurElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feImage"): SVGFEImageElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feMerge"): SVGFEMergeElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feMergeNode"): SVGFEMergeNodeElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feMorphology"): SVGFEMorphologyElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feOffset"): SVGFEOffsetElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "fePointLight"): SVGFEPointLightElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feSpecularLighting"): SVGFESpecularLightingElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feSpotLight"): SVGFESpotLightElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feTile"): SVGFETileElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "feTurbulence"): SVGFETurbulenceElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "filter"): SVGFilterElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "foreignObject"): SVGForeignObjectElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "g"): SVGGElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "image"): SVGImageElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "gradient"): SVGGradientElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "line"): SVGLineElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "linearGradient"): SVGLinearGradientElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "marker"): SVGMarkerElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "mask"): SVGMaskElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "path"): SVGPathElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "metadata"): SVGMetadataElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "pattern"): SVGPatternElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "polygon"): SVGPolygonElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "polyline"): SVGPolylineElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "radialGradient"): SVGRadialGradientElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "rect"): SVGRectElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "svg"): SVGSVGElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "script"): SVGScriptElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "stop"): SVGStopElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "style"): SVGStyleElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "switch"): SVGSwitchElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "symbol"): SVGSymbolElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "tspan"): SVGTSpanElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "textContent"): SVGTextContentElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "text"): SVGTextElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "textPath"): SVGTextPathElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "textPositioning"): SVGTextPositioningElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "title"): SVGTitleElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "use"): SVGUseElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: "view"): SVGViewElement;
  createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: string): SVGElement;
  createElementNS(namespaceURI: string | null, qualifiedName: string): Element;
  createExpression(expression: string, resolver: XPathNSResolver): XPathExpression;
  createNSResolver(nodeResolver: Node): XPathNSResolver;
  /**
   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
   * @param root The root element or node to start traversing on.
   * @param whatToShow The type of nodes or elements to appear in the node list
   * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.
   * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.
   */
  createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): NodeIterator;
  createProcessingInstruction(target: string, data: string): ProcessingInstruction;
  /**
   *  Returns an empty range object that has both of its boundary points positioned at the beginning of the document.
   */
  createRange(): Range;
  /**
   * Creates a text string from the specified value.
   * @param data String that specifies the nodeValue property of the text node.
   */
  createTextNode(data: string): Text;
  createTouch(view: Window, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number): Touch;
  createTouchList(...touches: Touch[]): TouchList;
  /**
   * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.
   * @param root The root element or node to start traversing on.
   * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.
   * @param filter A custom NodeFilter function to use.
   * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.
   */
  createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): TreeWalker;
  /**
   * Returns the element for the specified x coordinate and the specified y coordinate.
   * @param x The x-offset
   * @param y The y-offset
   */
  elementFromPoint(x: number, y: number): Element;
  elementsFromPoint(x: number, y: number): Element[];
  evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver | null, type: number, result: XPathResult | null): XPathResult;
  /**
   * Executes a command on the current document, current selection, or the given range.
   * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.
   * @param showUI Display the user interface, defaults to false.
   * @param value Value to assign.
   */
  execCommand(commandId: string, showUI?: boolean, value?: any): boolean;
  /**
   * Displays help information for the given command identifier.
   * @param commandId Displays help information for the given command identifier.
   */
  execCommandShowHelp(commandId: string): boolean;
  exitFullscreen(): void;
  exitPointerLock(): void;
  /**
   * Causes the element to receive the focus and executes the code specified by the onfocus event.
   */
  /** @deprecated */
  focus(): void;
  getAnimations(): Animation[];
  /**
   * Returns a reference to the first object with the specified value of the ID or NAME attribute.
   * @param elementId String that specifies the ID value. Case-insensitive.
   */
  getElementById(elementId: string): HTMLElement | null;
  getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
  /**
   * Gets a collection of objects based on the value of the NAME or ID attribute.
   * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.
   */
  getElementsByName(elementName: string): NodeListOf<HTMLElement>;
  /**
   * Retrieves a collection of objects based on the specified element name.
   * @param name Specifies the name of an element.
   */
  getElementsByTagName<K extends keyof HTMLElementTagNameMap>(tagname: K): NodeListOf<HTMLElementTagNameMap[K]>;
  getElementsByTagName<K extends keyof SVGElementTagNameMap>(tagname: K): NodeListOf<SVGElementTagNameMap[K]>;
  getElementsByTagName(tagname: string): NodeListOf<Element>;
  getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
  getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
  getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;
  /**
   * Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.
   */
  getSelection(): Selection;
  /**
   * Gets a value indicating whether the object currently has focus.
   */
  hasFocus(): boolean;
  importNode<T extends Node>(importedNode: T, deep: boolean): T;
  msElementsFromPoint(x: number, y: number): NodeListOf<Element>;
  msElementsFromRect(left: number, top: number, width: number, height: number): NodeListOf<Element>;
  /**
   * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.
   * @param url Specifies a MIME type for the document.
   * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.
   * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following values are supported.
   * @param replace Specifies whether the existing entry for the document is replaced in the history list.
   */
  open(url?: string, name?: string, features?: string, replace?: boolean): Document;
  /**
   * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.
   * @param commandId Specifies a command identifier.
   */
  queryCommandEnabled(commandId: string): boolean;
  /**
   * Returns a Boolean value that indicates whether the specified command is in the indeterminate state.
   * @param commandId String that specifies a command identifier.
   */
  queryCommandIndeterm(commandId: string): boolean;
  /**
   * Returns a Boolean value that indicates the current state of the command.
   * @param commandId String that specifies a command identifier.
   */
  queryCommandState(commandId: string): boolean;
  /**
   * Returns a Boolean value that indicates whether the current command is supported on the current range.
   * @param commandId Specifies a command identifier.
   */
  queryCommandSupported(commandId: string): boolean;
  /**
   * Retrieves the string associated with a command.
   * @param commandId String that contains the identifier of a command. This can be any command identifier given in the list of Command Identifiers.
   */
  queryCommandText(commandId: string): string;
  /**
   * Returns the current value of the document, range, or current selection for the given command.
   * @param commandId String that specifies a command identifier.
   */
  queryCommandValue(commandId: string): string;
  /** @deprecated */
  releaseEvents(): void;
  updateSettings(): void;
  webkitCancelFullScreen(): void;
  webkitExitFullscreen(): void;
  /**
   * Writes one or more HTML expressions to a document in the specified window.
   * @param content Specifies the text and HTML tags to write.
   */
  write(...content: string[]): void;
  /**
   * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.
   * @param content The text and HTML tags to write.
   */
  writeln(...content: string[]): void;
  addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface DocumentEvent {
  createEvent(eventInterface: "AnimationEvent"): AnimationEvent;
  createEvent(eventInterface: "AnimationPlaybackEvent"): AnimationPlaybackEvent;
  createEvent(eventInterface: "AudioProcessingEvent"): AudioProcessingEvent;
  createEvent(eventInterface: "BeforeUnloadEvent"): BeforeUnloadEvent;
  createEvent(eventInterface: "ClipboardEvent"): ClipboardEvent;
  createEvent(eventInterface: "CloseEvent"): CloseEvent;
  createEvent(eventInterface: "CompositionEvent"): CompositionEvent;
  createEvent(eventInterface: "CustomEvent"): CustomEvent;
  createEvent(eventInterface: "DeviceLightEvent"): DeviceLightEvent;
  createEvent(eventInterface: "DeviceMotionEvent"): DeviceMotionEvent;
  createEvent(eventInterface: "DeviceOrientationEvent"): DeviceOrientationEvent;
  createEvent(eventInterface: "DragEvent"): DragEvent;
  createEvent(eventInterface: "ErrorEvent"): ErrorEvent;
  createEvent(eventInterface: "Event"): Event;
  createEvent(eventInterface: "Events"): Event;
  createEvent(eventInterface: "FocusEvent"): FocusEvent;
  createEvent(eventInterface: "FocusNavigationEvent"): FocusNavigationEvent;
  createEvent(eventInterface: "GamepadEvent"): GamepadEvent;
  createEvent(eventInterface: "HashChangeEvent"): HashChangeEvent;
  createEvent(eventInterface: "IDBVersionChangeEvent"): IDBVersionChangeEvent;
  createEvent(eventInterface: "KeyboardEvent"): KeyboardEvent;
  createEvent(eventInterface: "ListeningStateChangedEvent"): ListeningStateChangedEvent;
  createEvent(eventInterface: "MSDCCEvent"): MSDCCEvent;
  createEvent(eventInterface: "MSDSHEvent"): MSDSHEvent;
  createEvent(eventInterface: "MSMediaKeyMessageEvent"): MSMediaKeyMessageEvent;
  createEvent(eventInterface: "MSMediaKeyNeededEvent"): MSMediaKeyNeededEvent;
  createEvent(eventInterface: "MediaEncryptedEvent"): MediaEncryptedEvent;
  createEvent(eventInterface: "MediaKeyMessageEvent"): MediaKeyMessageEvent;
  createEvent(eventInterface: "MediaStreamErrorEvent"): MediaStreamErrorEvent;
  createEvent(eventInterface: "MediaStreamEvent"): MediaStreamEvent;
  createEvent(eventInterface: "MediaStreamTrackEvent"): MediaStreamTrackEvent;
  createEvent(eventInterface: "MessageEvent"): MessageEvent;
  createEvent(eventInterface: "MouseEvent"): MouseEvent;
  createEvent(eventInterface: "MouseEvents"): MouseEvent;
  createEvent(eventInterface: "MutationEvent"): MutationEvent;
  createEvent(eventInterface: "MutationEvents"): MutationEvent;
  createEvent(eventInterface: "OfflineAudioCompletionEvent"): OfflineAudioCompletionEvent;
  createEvent(eventInterface: "OverflowEvent"): OverflowEvent;
  createEvent(eventInterface: "PageTransitionEvent"): PageTransitionEvent;
  createEvent(eventInterface: "PaymentRequestUpdateEvent"): PaymentRequestUpdateEvent;
  createEvent(eventInterface: "PermissionRequestedEvent"): PermissionRequestedEvent;
  createEvent(eventInterface: "PointerEvent"): PointerEvent;
  createEvent(eventInterface: "PopStateEvent"): PopStateEvent;
  createEvent(eventInterface: "ProgressEvent"): ProgressEvent;
  createEvent(eventInterface: "PromiseRejectionEvent"): PromiseRejectionEvent;
  createEvent(eventInterface: "RTCDTMFToneChangeEvent"): RTCDTMFToneChangeEvent;
  createEvent(eventInterface: "RTCDataChannelEvent"): RTCDataChannelEvent;
  createEvent(eventInterface: "RTCDtlsTransportStateChangedEvent"): RTCDtlsTransportStateChangedEvent;
  createEvent(eventInterface: "RTCErrorEvent"): RTCErrorEvent;
  createEvent(eventInterface: "RTCIceCandidatePairChangedEvent"): RTCIceCandidatePairChangedEvent;
  createEvent(eventInterface: "RTCIceGathererEvent"): RTCIceGathererEvent;
  createEvent(eventInterface: "RTCIceTransportStateChangedEvent"): RTCIceTransportStateChangedEvent;
  createEvent(eventInterface: "RTCPeerConnectionIceErrorEvent"): RTCPeerConnectionIceErrorEvent;
  createEvent(eventInterface: "RTCPeerConnectionIceEvent"): RTCPeerConnectionIceEvent;
  createEvent(eventInterface: "RTCSsrcConflictEvent"): RTCSsrcConflictEvent;
  createEvent(eventInterface: "RTCStatsEvent"): RTCStatsEvent;
  createEvent(eventInterface: "RTCTrackEvent"): RTCTrackEvent;
  createEvent(eventInterface: "SVGZoomEvent"): SVGZoomEvent;
  createEvent(eventInterface: "SVGZoomEvents"): SVGZoomEvent;
  createEvent(eventInterface: "SecurityPolicyViolationEvent"): SecurityPolicyViolationEvent;
  createEvent(eventInterface: "ServiceWorkerMessageEvent"): ServiceWorkerMessageEvent;
  createEvent(eventInterface: "SpeechSynthesisEvent"): SpeechSynthesisEvent;
  createEvent(eventInterface: "StorageEvent"): StorageEvent;
  createEvent(eventInterface: "TextEvent"): TextEvent;
  createEvent(eventInterface: "TouchEvent"): TouchEvent;
  createEvent(eventInterface: "TrackEvent"): TrackEvent;
  createEvent(eventInterface: "TransitionEvent"): TransitionEvent;
  createEvent(eventInterface: "UIEvent"): UIEvent;
  createEvent(eventInterface: "UIEvents"): UIEvent;
  createEvent(eventInterface: "VRDisplayEvent"): VRDisplayEvent;
  createEvent(eventInterface: "VRDisplayEvent "): VRDisplayEvent ;
  createEvent(eventInterface: "WebGLContextEvent"): WebGLContextEvent;
  createEvent(eventInterface: "WheelEvent"): WheelEvent;
  createEvent(eventInterface: string): Event;
}

interface DocumentFragment extends Node, ParentNode {
  getElementById(elementId: string): HTMLElement | null;
}

interface DocumentOrShadowRoot {
  readonly activeElement: Element | null;
  readonly styleSheets: StyleSheetList;
  elementFromPoint(x: number, y: number): Element | null;
  elementsFromPoint(x: number, y: number): Element[];
  getSelection(): Selection | null;
}

interface DocumentTimeline extends AnimationTimeline {
}

interface DocumentType extends Node, ChildNode {
  readonly entities: NamedNodeMap;
  readonly internalSubset: string | null;
  readonly name: string;
  readonly notations: NamedNodeMap;
  readonly publicId: string;
  readonly systemId: string;
}

interface DragEvent extends MouseEvent {
  readonly dataTransfer: DataTransfer;
  initDragEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, dataTransferArg: DataTransfer): void;
  msConvertURL(file: File, targetType: string, targetURL?: string): void;
}

interface DynamicsCompressorNode extends AudioNode {
  readonly attack: AudioParam;
  readonly knee: AudioParam;
  readonly ratio: AudioParam;
  readonly reduction: number;
  readonly release: AudioParam;
  readonly threshold: AudioParam;
}

interface EXT_blend_minmax {
  readonly MAX_EXT: number;
  readonly MIN_EXT: number;
}

interface EXT_frag_depth {
}

interface EXT_sRGB {
  readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: number;
  readonly SRGB8_ALPHA8_EXT: number;
  readonly SRGB_ALPHA_EXT: number;
  readonly SRGB_EXT: number;
}

interface EXT_shader_texture_lod {
}

interface EXT_texture_filter_anisotropic {
  readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;
  readonly TEXTURE_MAX_ANISOTROPY_EXT: number;
}

interface ElementEventMap extends GlobalEventHandlersEventMap {
  "ariarequest": Event;
  "command": Event;
  "gotpointercapture": PointerEvent;
  "lostpointercapture": PointerEvent;
  "MSGestureChange": Event;
  "MSGestureDoubleTap": Event;
  "MSGestureEnd": Event;
  "MSGestureHold": Event;
  "MSGestureStart": Event;
  "MSGestureTap": Event;
  "MSGotPointerCapture": Event;
  "MSInertiaStart": Event;
  "MSLostPointerCapture": Event;
  "MSPointerCancel": Event;
  "MSPointerDown": Event;
  "MSPointerEnter": Event;
  "MSPointerLeave": Event;
  "MSPointerMove": Event;
  "MSPointerOut": Event;
  "MSPointerOver": Event;
  "MSPointerUp": Event;
  "touchcancel": TouchEvent;
  "touchend": TouchEvent;
  "touchmove": TouchEvent;
  "touchstart": TouchEvent;
  "webkitfullscreenchange": Event;
  "webkitfullscreenerror": Event;
}

interface Element extends Node, GlobalEventHandlers, ElementTraversal, ParentNode, ChildNode, Animatable {
  readonly assignedSlot: HTMLSlotElement | null;
  readonly attributes: NamedNodeMap;
  readonly classList: DOMTokenList;
  className: string;
  readonly clientHeight: number;
  readonly clientLeft: number;
  readonly clientTop: number;
  readonly clientWidth: number;
  id: string;
  innerHTML: string;
  msContentZoomFactor: number;
  readonly msRegionOverflow: string;
  onariarequest: ((this: Element, ev: Event) => any) | null;
  oncommand: ((this: Element, ev: Event) => any) | null;
  onmsgesturechange: ((this: Element, ev: Event) => any) | null;
  onmsgesturedoubletap: ((this: Element, ev: Event) => any) | null;
  onmsgestureend: ((this: Element, ev: Event) => any) | null;
  onmsgesturehold: ((this: Element, ev: Event) => any) | null;
  onmsgesturestart: ((this: Element, ev: Event) => any) | null;
  onmsgesturetap: ((this: Element, ev: Event) => any) | null;
  onmsgotpointercapture: ((this: Element, ev: Event) => any) | null;
  onmsinertiastart: ((this: Element, ev: Event) => any) | null;
  onmslostpointercapture: ((this: Element, ev: Event) => any) | null;
  onmspointercancel: ((this: Element, ev: Event) => any) | null;
  onmspointerdown: ((this: Element, ev: Event) => any) | null;
  onmspointerenter: ((this: Element, ev: Event) => any) | null;
  onmspointerleave: ((this: Element, ev: Event) => any) | null;
  onmspointermove: ((this: Element, ev: Event) => any) | null;
  onmspointerout: ((this: Element, ev: Event) => any) | null;
  onmspointerover: ((this: Element, ev: Event) => any) | null;
  onmspointerup: ((this: Element, ev: Event) => any) | null;
  onwebkitfullscreenchange: ((this: Element, ev: Event) => any) | null;
  onwebkitfullscreenerror: ((this: Element, ev: Event) => any) | null;
  outerHTML: string;
  readonly prefix: string | null;
  readonly scrollHeight: number;
  scrollLeft: number;
  scrollTop: number;
  readonly scrollWidth: number;
  readonly shadowRoot: ShadowRoot | null;
  slot: string;
  readonly tagName: string;
  attachShadow(shadowRootInitDict: ShadowRootInit): ShadowRoot;
  closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
  closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
  closest(selector: string): Element | null;
  getAttribute(qualifiedName: string): string | null;
  getAttributeNS(namespaceURI: string, localName: string): string;
  getAttributeNode(name: string): Attr | null;
  getAttributeNodeNS(namespaceURI: string, localName: string): Attr | null;
  getBoundingClientRect(): ClientRect | DOMRect;
  getClientRects(): ClientRectList | DOMRectList;
  getElementsByClassName(classNames: string): NodeListOf<Element>;
  getElementsByTagName<K extends keyof HTMLElementTagNameMap>(name: K): NodeListOf<HTMLElementTagNameMap[K]>;
  getElementsByTagName<K extends keyof SVGElementTagNameMap>(name: K): NodeListOf<SVGElementTagNameMap[K]>;
  getElementsByTagName(name: string): NodeListOf<Element>;
  getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
  getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
  getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;
  hasAttribute(name: string): boolean;
  hasAttributeNS(namespaceURI: string, localName: string): boolean;
  hasAttributes(): boolean;
  hasPointerCapture(pointerId: number): boolean;
  insertAdjacentElement(position: InsertPosition, insertedElement: Element): Element | null;
  insertAdjacentHTML(where: InsertPosition, html: string): void;
  insertAdjacentText(where: InsertPosition, text: string): void;
  matches(selectors: string): boolean;
  msGetRegionContent(): any;
  msGetUntransformedBounds(): ClientRect;
  msMatchesSelector(selectors: string): boolean;
  msReleasePointerCapture(pointerId: number): void;
  msSetPointerCapture(pointerId: number): void;
  msZoomTo(args: MsZoomToOptions): void;
  releasePointerCapture(pointerId: number): void;
  removeAttribute(qualifiedName: string): void;
  removeAttributeNS(namespaceURI: string, localName: string): void;
  removeAttributeNode(oldAttr: Attr): Attr;
  requestFullscreen(): void;
  requestPointerLock(): void;
  scroll(options?: ScrollToOptions): void;
  scroll(x: number, y: number): void;
  scrollBy(options?: ScrollToOptions): void;
  scrollBy(x: number, y: number): void;
  scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
  scrollTo(options?: ScrollToOptions): void;
  scrollTo(x: number, y: number): void;
  setAttribute(qualifiedName: string, value: string): void;
  setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;
  setAttributeNode(newAttr: Attr): Attr;
  setAttributeNodeNS(newAttr: Attr): Attr;
  setPointerCapture(pointerId: number): void;
  webkitMatchesSelector(selectors: string): boolean;
  webkitRequestFullScreen(): void;
  webkitRequestFullscreen(): void;
  addEventListener<K extends keyof ElementEventMap>(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof ElementEventMap>(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface ElementCSSInlineStyle {
  readonly style: CSSStyleDeclaration;
}

interface ElementCreationOptions {
  is?: string;
}

interface ElementDefinitionOptions {
  extends: string;
}

interface ElementTraversal {
  readonly childElementCount: number;
  readonly firstElementChild: Element | null;
  readonly lastElementChild: Element | null;
  readonly nextElementSibling: Element | null;
  readonly previousElementSibling: Element | null;
}

interface ErrorEvent extends Event {
  readonly colno: number;
  readonly error: any;
  readonly filename: string;
  readonly lineno: number;
  readonly message: string;
  initErrorEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, messageArg: string, filenameArg: string, linenoArg: number): void;
}

interface Event {
  readonly bubbles: boolean;
  cancelBubble: boolean;
  readonly cancelable: boolean;
  readonly composed: boolean;
  readonly currentTarget: EventTarget | null;
  readonly defaultPrevented: boolean;
  readonly eventPhase: number;
  readonly isTrusted: boolean;
  returnValue: boolean;
  readonly srcElement: Element | null;
  readonly target: EventTarget | null;
  readonly timeStamp: number;
  readonly type: string;
  deepPath(): EventTarget[];
  initEvent(type: string, bubbles?: boolean, cancelable?: boolean): void;
  preventDefault(): void;
  stopImmediatePropagation(): void;
  stopPropagation(): void;
  readonly AT_TARGET: number;
  readonly BUBBLING_PHASE: number;
  readonly CAPTURING_PHASE: number;
  readonly NONE: number;
}

interface EventListenerObject {
  handleEvent(evt: Event): void;
}

interface EventSource extends EventTarget {
  readonly CLOSED: number;
  readonly CONNECTING: number;
  readonly OPEN: number;
  onerror: (evt: MessageEvent) => any;
  onmessage: (evt: MessageEvent) => any;
  onopen: (evt: MessageEvent) => any;
  readonly readyState: number;
  readonly url: string;
  readonly withCredentials: boolean;
  close(): void;
}

interface EventSourceInit {
  readonly withCredentials: boolean;
}

interface EventTarget {
  addEventListener(type: string, listener: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void;
  dispatchEvent(evt: Event): boolean;
  removeEventListener(type: string, listener?: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;
}

interface ExtensionScriptApis {
  extensionIdToShortId(extensionId: string): number;
  fireExtensionApiTelemetry(functionName: string, isSucceeded: boolean, isSupported: boolean, errorString: string): void;
  genericFunction(routerAddress: any, parameters?: string, callbackId?: number): void;
  genericSynchronousFunction(functionId: number, parameters?: string): string;
  genericWebRuntimeCallout(to: any, from: any, payload: string): void;
  getExtensionId(): string;
  registerGenericFunctionCallbackHandler(callbackHandler: Function): void;
  registerGenericPersistentCallbackHandler(callbackHandler: Function): void;
  registerWebRuntimeCallbackHandler(handler: Function): any;
}

interface External {
  /** @deprecated */
  AddSearchProvider(): void;
  /** @deprecated */
  IsSearchProviderInstalled(): void;
}

interface File extends Blob {
  readonly lastModified: number;
  readonly name: string;
}

interface FileList {
  readonly length: number;
  item(index: number): File | null;
  [index: number]: File;
}

interface FileReaderEventMap {
  "abort": ProgressEvent;
  "error": ProgressEvent;
  "load": ProgressEvent;
  "loadend": ProgressEvent;
  "loadstart": ProgressEvent;
  "progress": ProgressEvent;
}

interface FileReader extends EventTarget {
  readonly error: DOMException | null;
  onabort: ((this: FileReader, ev: ProgressEvent) => any) | null;
  onerror: ((this: FileReader, ev: ProgressEvent) => any) | null;
  onload: ((this: FileReader, ev: ProgressEvent) => any) | null;
  onloadend: ((this: FileReader, ev: ProgressEvent) => any) | null;
  onloadstart: ((this: FileReader, ev: ProgressEvent) => any) | null;
  onprogress: ((this: FileReader, ev: ProgressEvent) => any) | null;
  readonly readyState: number;
  readonly result: string | ArrayBuffer | null;
  abort(): void;
  readAsArrayBuffer(blob: Blob): void;
  readAsBinaryString(blob: Blob): void;
  readAsDataURL(blob: Blob): void;
  readAsText(blob: Blob, label?: string): void;
  readonly DONE: number;
  readonly EMPTY: number;
  readonly LOADING: number;
  addEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface FocusEvent extends UIEvent {
  readonly relatedTarget: EventTarget;
  initFocusEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, relatedTargetArg: EventTarget): void;
}

interface FocusNavigationEvent extends Event {
  readonly navigationReason: NavigationReason;
  readonly originHeight: number;
  readonly originLeft: number;
  readonly originTop: number;
  readonly originWidth: number;
  requestFocus(): void;
}

interface FormData {
  append(name: string, value: string | Blob, fileName?: string): void;
  delete(name: string): void;
  get(name: string): FormDataEntryValue | null;
  getAll(name: string): FormDataEntryValue[];
  has(name: string): boolean;
  set(name: string, value: string | Blob, fileName?: string): void;
  forEach(callbackfn: (value: FormDataEntryValue, key: string, parent: FormData) => void, thisArg?: any): void;
}

declare var FormData: {
  prototype: FormData;
  new(form?: HTMLFormElement): FormData;
};

interface GainNode extends AudioNode {
  readonly gain: AudioParam;
}

interface Gamepad {
  readonly axes: number[];
  readonly buttons: GamepadButton[];
  readonly connected: boolean;
  readonly displayId: number;
  readonly hand: GamepadHand;
  readonly hapticActuators: GamepadHapticActuator[];
  readonly id: string;
  readonly index: number;
  readonly mapping: GamepadMappingType;
  readonly pose: GamepadPose | null;
  readonly timestamp: number;
}

interface GamepadButton {
  readonly pressed: boolean;
  readonly touched: boolean;
  readonly value: number;
}

interface GamepadEvent extends Event {
  readonly gamepad: Gamepad;
}

interface GamepadHapticActuator {
  readonly type: GamepadHapticActuatorType;
  pulse(value: number, duration: number): Promise<boolean>;
}

interface GamepadPose {
  readonly angularAcceleration: Float32Array | null;
  readonly angularVelocity: Float32Array | null;
  readonly hasOrientation: boolean;
  readonly hasPosition: boolean;
  readonly linearAcceleration: Float32Array | null;
  readonly linearVelocity: Float32Array | null;
  readonly orientation: Float32Array | null;
  readonly position: Float32Array | null;
}

interface Geolocation {
  clearWatch(watchId: number): void;
  getCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): void;
  watchPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): number;
}

interface GetSVGDocument {
  getSVGDocument(): Document;
}

interface GlobalEventHandlersEventMap {
  "animationcancel": AnimationEvent;
  "animationend": AnimationEvent;
  "animationiteration": AnimationEvent;
  "animationstart": AnimationEvent;
  "gotpointercapture": PointerEvent;
  "lostpointercapture": PointerEvent;
  "pointercancel": PointerEvent;
  "pointerdown": PointerEvent;
  "pointerenter": PointerEvent;
  "pointerleave": PointerEvent;
  "pointermove": PointerEvent;
  "pointerout": PointerEvent;
  "pointerover": PointerEvent;
  "pointerup": PointerEvent;
  "touchcancel": TouchEvent;
  "touchend": TouchEvent;
  "touchmove": TouchEvent;
  "touchstart": TouchEvent;
  "transitioncancel": TransitionEvent;
  "transitionend": TransitionEvent;
  "transitionrun": TransitionEvent;
  "transitionstart": TransitionEvent;
  "wheel": WheelEvent;
}

interface GlobalEventHandlers {
  onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
  onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
  onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
  onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
  ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
  onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
  onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
  onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
  onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
  onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
  onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
  onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
  onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
  onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
  ontouchcancel: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null;
  ontouchend: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null;
  ontouchmove: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null;
  ontouchstart: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null;
  ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
  ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
  ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
  ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
  onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
  addEventListener<K extends keyof GlobalEventHandlersEventMap>(type: K, listener: (this: GlobalEventHandlers, ev: GlobalEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof GlobalEventHandlersEventMap>(type: K, listener: (this: GlobalEventHandlers, ev: GlobalEventHandlersEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface GlobalFetch {
  fetch(input?: Request | string, init?: RequestInit): Promise<Response>;
}

interface HTMLAllCollection {
  /**
   * Returns the number of elements in the collection.
   */
  readonly length: number;
  /**
   * element = collection(index)
   */
  item(nameOrIndex?: string): HTMLCollection | Element | null;
  /**
   * element = collection(name)
   */
  namedItem(name: string): HTMLCollection | Element | null;
  [index: number]: Element;
}

interface HTMLAnchorElement extends HTMLElement, HTMLHyperlinkElementUtils {
  Methods: string;
  /**
   * Sets or retrieves the character set used to encode the object.
   */
  /** @deprecated */
  charset: string;
  /**
   * Sets or retrieves the coordinates of the object.
   */
  /** @deprecated */
  coords: string;
  download: string;
  /**
   * Sets or retrieves the language code of the object.
   */
  hreflang: string;
  readonly mimeType: string;
  /**
   * Sets or retrieves the shape of the object.
   */
  /** @deprecated */
  name: string;
  readonly nameProp: string;
  readonly protocolLong: string;
  /**
   * Sets or retrieves the relationship between the object and the destination of the link.
   */
  rel: string;
  readonly relList: DOMTokenList;
  /**
   * Sets or retrieves the relationship between the object and the destination of the link.
   */
  /** @deprecated */
  rev: string;
  /**
   * Sets or retrieves the shape of the object.
   */
  /** @deprecated */
  shape: string;
  /**
   * Sets or retrieves the window or frame at which to target content.
   */
  target: string;
  /**
   * Retrieves or sets the text of the object as a string.
   */
  text: string;
  type: string;
  urn: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLAppletElement extends HTMLElement {
  /** @deprecated */
  align: string;
  /**
   * Sets or retrieves a text alternative to the graphic.
   */
  /** @deprecated */
  alt: string;
  /**
   * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.
   */
  /** @deprecated */
  archive: string;
  /** @deprecated */
  code: string;
  /**
   * Sets or retrieves the URL of the component.
   */
  /** @deprecated */
  codeBase: string;
  readonly form: HTMLFormElement | null;
  /**
   * Sets or retrieves the height of the object.
   */
  /** @deprecated */
  height: string;
  /** @deprecated */
  hspace: number;
  /**
   * Sets or retrieves the shape of the object.
   */
  /** @deprecated */
  name: string;
  /** @deprecated */
  object: string;
  /** @deprecated */
  vspace: number;
  /** @deprecated */
  width: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAppletElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAppletElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLAreaElement extends HTMLElement, HTMLHyperlinkElementUtils {
  /**
   * Sets or retrieves a text alternative to the graphic.
   */
  alt: string;
  /**
   * Sets or retrieves the coordinates of the object.
   */
  coords: string;
  download: string;
  /**
   * Sets or gets whether clicks in this region cause action.
   */
  /** @deprecated */
  noHref: boolean;
  rel: string;
  readonly relList: DOMTokenList;
  /**
   * Sets or retrieves the shape of the object.
   */
  shape: string;
  /**
   * Sets or retrieves the window or frame at which to target content.
   */
  target: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLAreasCollection extends HTMLCollectionBase {
}

interface HTMLAudioElement extends HTMLMediaElement {
  addEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLAudioElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLAudioElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLBRElement extends HTMLElement {
  /**
   * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.
   */
  /** @deprecated */
  clear: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLBaseElement extends HTMLElement {
  /**
   * Gets or sets the baseline URL on which relative links are based.
   */
  href: string;
  /**
   * Sets or retrieves the window or frame at which to target content.
   */
  target: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBaseElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBaseElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLBaseFontElement extends HTMLElement, DOML2DeprecatedColorProperty {
  /**
   * Sets or retrieves the current typeface family.
   */
  /** @deprecated */
  face: string;
  /**
   * Sets or retrieves the font size of the object.
   */
  /** @deprecated */
  size: number;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBaseFontElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBaseFontElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLBodyElementEventMap extends HTMLElementEventMap, WindowEventHandlersEventMap {
  "blur": FocusEvent;
  "error": ErrorEvent;
  "focus": FocusEvent;
  "load": Event;
  "orientationchange": Event;
  "resize": UIEvent;
  "scroll": UIEvent;
}

interface HTMLBodyElement extends HTMLElement, WindowEventHandlers {
  /** @deprecated */
  aLink: string;
  /** @deprecated */
  background: string;
  /** @deprecated */
  bgColor: string;
  bgProperties: string;
  /** @deprecated */
  link: string;
  /** @deprecated */
  noWrap: boolean;
  onorientationchange: ((this: HTMLBodyElement, ev: Event) => any) | null;
  onresize: ((this: HTMLBodyElement, ev: UIEvent) => any) | null;
  /** @deprecated */
  text: string;
  /** @deprecated */
  vLink: string;
  addEventListener<K extends keyof HTMLBodyElementEventMap>(type: K, listener: (this: HTMLBodyElement, ev: HTMLBodyElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLBodyElementEventMap>(type: K, listener: (this: HTMLBodyElement, ev: HTMLBodyElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLButtonElement extends HTMLElement {
  /**
   * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.
   */
  autofocus: boolean;
  disabled: boolean;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   */
  readonly form: HTMLFormElement | null;
  /**
   * Overrides the action attribute (where the data on a form is sent) on the parent form element.
   */
  formAction: string;
  /**
   * Used to override the encoding (formEnctype attribute) specified on the form element.
   */
  formEnctype: string;
  /**
   * Overrides the submit method attribute previously specified on a form element.
   */
  formMethod: string;
  /**
   * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
   */
  formNoValidate: boolean;
  /**
   * Overrides the target attribute on a form element.
   */
  formTarget: string;
  readonly labels: NodeListOf<HTMLLabelElement>;
  /**
   * Sets or retrieves the name of the object.
   */
  name: string;
  /**
   * Gets the classification and default behavior of the button.
   */
  type: string;
  /**
   * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
   */
  readonly validationMessage: string;
  /**
   * Returns a  ValidityState object that represents the validity states of an element.
   */
  readonly validity: ValidityState;
  /**
   * Sets or retrieves the default or selected value of the control.
   */
  value: string;
  /**
   * Returns whether an element will successfully validate based on forms validation rules and constraints.
   */
  readonly willValidate: boolean;
  /**
   * Returns whether a form will validate when it is submitted, without having to submit it.
   */
  checkValidity(): boolean;
  reportValidity(): boolean;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   * @param error Sets a custom error message that is displayed when a form is submitted.
   */
  setCustomValidity(error: string): void;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLButtonElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLButtonElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLCanvasElement extends HTMLElement {
  /**
   * Gets or sets the height of a canvas element on a document.
   */
  height: number;
  /**
   * Gets or sets the width of a canvas element on a document.
   */
  width: number;
  /**
   * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.
   * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext("2d"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext("experimental-webgl");
   */
  getContext(contextId: "2d", contextAttributes?: Canvas2DContextAttributes): CanvasRenderingContext2D | null;
  getContext(contextId: "webgl" | "experimental-webgl", contextAttributes?: WebGLContextAttributes): WebGLRenderingContext | null;
  getContext(contextId: string, contextAttributes?: {}): CanvasRenderingContext2D | WebGLRenderingContext | null;
  /**
   * Returns a blob object encoded as a Portable Network Graphics (PNG) format from a canvas image or drawing.
   */
  msToBlob(): Blob;
  toBlob(callback: (result: Blob | null) => void, type?: string, ...arguments: any[]): void;
  /**
   * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.
   * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.
   */
  toDataURL(type?: string, ...args: any[]): string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLCanvasElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLCanvasElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLCollectionBase {
  /**
   * Sets or retrieves the number of objects in a collection.
   */
  readonly length: number;
  /**
   * Retrieves an object from various collections.
   */
  item(index: number): Element;
  [index: number]: Element;
}

interface HTMLCollection extends HTMLCollectionBase {
  /**
   * Retrieves a select object or an object from an options collection.
   */
  namedItem(name: string): Element | null;
}

interface HTMLCollectionOf<T extends Element> extends HTMLCollectionBase {
  item(index: number): T;
  namedItem(name: string): T;
  forEach(callbackfn: (value: T, key: number, parent: HTMLCollectionOf<T>) => void, thisArg?: any): void;
  [index: number]: T;
}

interface HTMLDListElement extends HTMLElement {
  /** @deprecated */
  compact: boolean;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLDataElement extends HTMLElement {
  value: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLDataListElement extends HTMLElement {
  readonly options: HTMLCollectionOf<HTMLOptionElement>;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLDetailsElement extends HTMLElement {
  open: boolean;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDetailsElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDetailsElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLDialogElement extends HTMLElement {
  open: boolean;
  returnValue: string;
  close(returnValue?: string): void;
  show(): void;
  showModal(): void;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDialogElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDialogElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLDirectoryElement extends HTMLElement {
  /** @deprecated */
  compact: boolean;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDirectoryElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDirectoryElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLDivElement extends HTMLElement {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   */
  /** @deprecated */
  align: string;
  /**
   * Sets or retrieves whether the browser automatically performs wordwrap.
   */
  noWrap: boolean;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLDocument extends Document {
  addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: HTMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: HTMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLElementEventMap extends ElementEventMap {
  "abort": UIEvent;
  "activate": Event;
  "beforeactivate": Event;
  "beforecopy": Event;
  "beforecut": Event;
  "beforedeactivate": Event;
  "beforepaste": Event;
  "blur": FocusEvent;
  "canplay": Event;
  "canplaythrough": Event;
  "change": Event;
  "click": MouseEvent;
  "contextmenu": PointerEvent;
  "copy": ClipboardEvent;
  "cuechange": Event;
  "cut": ClipboardEvent;
  "dblclick": MouseEvent;
  "deactivate": Event;
  "drag": DragEvent;
  "dragend": DragEvent;
  "dragenter": DragEvent;
  "dragleave": DragEvent;
  "dragover": DragEvent;
  "dragstart": DragEvent;
  "drop": DragEvent;
  "durationchange": Event;
  "emptied": Event;
  "ended": Event;
  "error": ErrorEvent;
  "focus": FocusEvent;
  "input": Event;
  "invalid": Event;
  "keydown": KeyboardEvent;
  "keypress": KeyboardEvent;
  "keyup": KeyboardEvent;
  "load": Event;
  "loadeddata": Event;
  "loadedmetadata": Event;
  "loadstart": Event;
  "mousedown": MouseEvent;
  "mouseenter": MouseEvent;
  "mouseleave": MouseEvent;
  "mousemove": MouseEvent;
  "mouseout": MouseEvent;
  "mouseover": MouseEvent;
  "mouseup": MouseEvent;
  "mousewheel": WheelEvent;
  "MSContentZoom": Event;
  "MSManipulationStateChanged": Event;
  "paste": ClipboardEvent;
  "pause": Event;
  "play": Event;
  "playing": Event;
  "progress": ProgressEvent;
  "ratechange": Event;
  "reset": Event;
  "scroll": UIEvent;
  "seeked": Event;
  "seeking": Event;
  "select": UIEvent;
  "selectstart": Event;
  "stalled": Event;
  "submit": Event;
  "suspend": Event;
  "timeupdate": Event;
  "volumechange": Event;
  "waiting": Event;
}

interface HTMLElement extends Element, ElementCSSInlineStyle {
  accessKey: string;
  contentEditable: string;
  readonly dataset: DOMStringMap;
  dir: string;
  draggable: boolean;
  hidden: boolean;
  hideFocus: boolean;
  innerText: string;
  readonly isContentEditable: boolean;
  lang: string;
  readonly offsetHeight: number;
  readonly offsetLeft: number;
  readonly offsetParent: Element;
  readonly offsetTop: number;
  readonly offsetWidth: number;
  onabort: ((this: HTMLElement, ev: UIEvent) => any) | null;
  onactivate: ((this: HTMLElement, ev: Event) => any) | null;
  onbeforeactivate: ((this: HTMLElement, ev: Event) => any) | null;
  onbeforecopy: ((this: HTMLElement, ev: Event) => any) | null;
  onbeforecut: ((this: HTMLElement, ev: Event) => any) | null;
  onbeforedeactivate: ((this: HTMLElement, ev: Event) => any) | null;
  onbeforepaste: ((this: HTMLElement, ev: Event) => any) | null;
  onblur: ((this: HTMLElement, ev: FocusEvent) => any) | null;
  oncanplay: ((this: HTMLElement, ev: Event) => any) | null;
  oncanplaythrough: ((this: HTMLElement, ev: Event) => any) | null;
  onchange: ((this: HTMLElement, ev: Event) => any) | null;
  onclick: ((this: HTMLElement, ev: MouseEvent) => any) | null;
  oncontextmenu: ((this: HTMLElement, ev: PointerEvent) => any) | null;
  oncopy: ((this: HTMLElement, ev: ClipboardEvent) => any) | null;
  oncuechange: ((this: HTMLElement, ev: Event) => any) | null;
  oncut: ((this: HTMLElement, ev: ClipboardEvent) => any) | null;
  ondblclick: ((this: HTMLElement, ev: MouseEvent) => any) | null;
  ondeactivate: ((this: HTMLElement, ev: Event) => any) | null;
  ondrag: ((this: HTMLElement, ev: DragEvent) => any) | null;
  ondragend: ((this: HTMLElement, ev: DragEvent) => any) | null;
  ondragenter: ((this: HTMLElement, ev: DragEvent) => any) | null;
  ondragleave: ((this: HTMLElement, ev: DragEvent) => any) | null;
  ondragover: ((this: HTMLElement, ev: DragEvent) => any) | null;
  ondragstart: ((this: HTMLElement, ev: DragEvent) => any) | null;
  ondrop: ((this: HTMLElement, ev: DragEvent) => any) | null;
  ondurationchange: ((this: HTMLElement, ev: Event) => any) | null;
  onemptied: ((this: HTMLElement, ev: Event) => any) | null;
  onended: ((this: HTMLElement, ev: Event) => any) | null;
  onerror: ((this: HTMLElement, ev: ErrorEvent) => any) | null;
  onfocus: ((this: HTMLElement, ev: FocusEvent) => any) | null;
  oninput: ((this: HTMLElement, ev: Event) => any) | null;
  oninvalid: ((this: HTMLElement, ev: Event) => any) | null;
  onkeydown: ((this: HTMLElement, ev: KeyboardEvent) => any) | null;
  onkeypress: ((this: HTMLElement, ev: KeyboardEvent) => any) | null;
  onkeyup: ((this: HTMLElement, ev: KeyboardEvent) => any) | null;
  onload: ((this: HTMLElement, ev: Event) => any) | null;
  onloadeddata: ((this: HTMLElement, ev: Event) => any) | null;
  onloadedmetadata: ((this: HTMLElement, ev: Event) => any) | null;
  onloadstart: ((this: HTMLElement, ev: Event) => any) | null;
  onmousedown: ((this: HTMLElement, ev: MouseEvent) => any) | null;
  onmouseenter: ((this: HTMLElement, ev: MouseEvent) => any) | null;
  onmouseleave: ((this: HTMLElement, ev: MouseEvent) => any) | null;
  onmousemove: ((this: HTMLElement, ev: MouseEvent) => any) | null;
  onmouseout: ((this: HTMLElement, ev: MouseEvent) => any) | null;
  onmouseover: ((this: HTMLElement, ev: MouseEvent) => any) | null;
  onmouseup: ((this: HTMLElement, ev: MouseEvent) => any) | null;
  onmousewheel: ((this: HTMLElement, ev: WheelEvent) => any) | null;
  onmscontentzoom: ((this: HTMLElement, ev: Event) => any) | null;
  onmsmanipulationstatechanged: ((this: HTMLElement, ev: Event) => any) | null;
  onpaste: ((this: HTMLElement, ev: ClipboardEvent) => any) | null;
  onpause: ((this: HTMLElement, ev: Event) => any) | null;
  onplay: ((this: HTMLElement, ev: Event) => any) | null;
  onplaying: ((this: HTMLElement, ev: Event) => any) | null;
  onprogress: ((this: HTMLElement, ev: ProgressEvent) => any) | null;
  onratechange: ((this: HTMLElement, ev: Event) => any) | null;
  onreset: ((this: HTMLElement, ev: Event) => any) | null;
  onscroll: ((this: HTMLElement, ev: UIEvent) => any) | null;
  onseeked: ((this: HTMLElement, ev: Event) => any) | null;
  onseeking: ((this: HTMLElement, ev: Event) => any) | null;
  onselect: ((this: HTMLElement, ev: UIEvent) => any) | null;
  onselectstart: ((this: HTMLElement, ev: Event) => any) | null;
  onstalled: ((this: HTMLElement, ev: Event) => any) | null;
  onsubmit: ((this: HTMLElement, ev: Event) => any) | null;
  onsuspend: ((this: HTMLElement, ev: Event) => any) | null;
  ontimeupdate: ((this: HTMLElement, ev: Event) => any) | null;
  onvolumechange: ((this: HTMLElement, ev: Event) => any) | null;
  onwaiting: ((this: HTMLElement, ev: Event) => any) | null;
  outerText: string;
  spellcheck: boolean;
  tabIndex: number;
  title: string;
  blur(): void;
  click(): void;
  dragDrop(): boolean;
  focus(): void;
  msGetInputContext(): MSInputMethodContext;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLEmbedElement extends HTMLElement, GetSVGDocument {
  /** @deprecated */
  align: string;
  /**
   * Sets or retrieves the height of the object.
   */
  height: string;
  hidden: any;
  /**
   * Gets or sets whether the DLNA PlayTo device is available.
   */
  msPlayToDisabled: boolean;
  /**
   * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.
   */
  msPlayToPreferredSourceUri: string;
  /**
   * Gets or sets the primary DLNA PlayTo device.
   */
  msPlayToPrimary: boolean;
  /**
   * Gets the source associated with the media element for use by the PlayToManager.
   */
  readonly msPlayToSource: any;
  /**
   * Sets or retrieves the name of the object.
   */
  /** @deprecated */
  name: string;
  /**
   * Retrieves the palette used for the embedded document.
   */
  readonly palette: string;
  /**
   * Retrieves the URL of the plug-in used to view an embedded document.
   */
  readonly pluginspage: string;
  readonly readyState: string;
  /**
   * Sets or retrieves a URL to be loaded by the object.
   */
  src: string;
  /**
   * Sets or retrieves the height and width units of the embed object.
   */
  units: string;
  /**
   * Sets or retrieves the width of the object.
   */
  width: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLEmbedElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLEmbedElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLFieldSetElement extends HTMLElement {
  disabled: boolean;
  readonly elements: HTMLCollection;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   */
  readonly form: HTMLFormElement | null;
  name: string;
  readonly type: string;
  /**
   * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
   */
  readonly validationMessage: string;
  /**
   * Returns a  ValidityState object that represents the validity states of an element.
   */
  readonly validity: ValidityState;
  /**
   * Returns whether an element will successfully validate based on forms validation rules and constraints.
   */
  readonly willValidate: boolean;
  /**
   * Returns whether a form will validate when it is submitted, without having to submit it.
   */
  checkValidity(): boolean;
  reportValidity(): boolean;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   * @param error Sets a custom error message that is displayed when a form is submitted.
   */
  setCustomValidity(error: string): void;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFieldSetElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFieldSetElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLFontElement extends HTMLElement {
  /** @deprecated */
  color: string;
  /**
   * Sets or retrieves the current typeface family.
   */
  /** @deprecated */
  face: string;
  /** @deprecated */
  size: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFontElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFontElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLFormControlsCollection extends HTMLCollectionBase {
  /**
   * element = collection[name]
   */
  namedItem(name: string): RadioNodeList | Element | null;
}

interface HTMLFormElement extends HTMLElement {
  /**
   * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.
   */
  acceptCharset: string;
  /**
   * Sets or retrieves the URL to which the form content is sent for processing.
   */
  action: string;
  /**
   * Specifies whether autocomplete is applied to an editable text field.
   */
  autocomplete: string;
  /**
   * Retrieves a collection, in source order, of all controls in a given form.
   */
  readonly elements: HTMLFormControlsCollection;
  /**
   * Sets or retrieves the MIME encoding for the form.
   */
  encoding: string;
  /**
   * Sets or retrieves the encoding type for the form.
   */
  enctype: string;
  /**
   * Sets or retrieves the number of objects in a collection.
   */
  readonly length: number;
  /**
   * Sets or retrieves how to send the form data to the server.
   */
  method: string;
  /**
   * Sets or retrieves the name of the object.
   */
  name: string;
  /**
   * Designates a form that is not validated when submitted.
   */
  noValidate: boolean;
  /**
   * Sets or retrieves the window or frame at which to target content.
   */
  target: string;
  /**
   * Returns whether a form will validate when it is submitted, without having to submit it.
   */
  checkValidity(): boolean;
  /**
   * Retrieves a form object or an object from an elements collection.
   * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is a Number, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.
   * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.
   */
  item(name?: any, index?: any): any;
  /**
   * Retrieves a form object or an object from an elements collection.
   */
  namedItem(name: string): any;
  reportValidity(): boolean;
  /**
   * Fires when the user resets a form.
   */
  reset(): void;
  /**
   * Fires when a FORM is about to be submitted.
   */
  submit(): void;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFormElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFormElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  [name: string]: any;
}

interface HTMLFrameElement extends HTMLElement {
  /**
   * Retrieves the document object of the page or frame.
   */
  /** @deprecated */
  readonly contentDocument: Document | null;
  /**
   * Retrieves the object of the specified.
   */
  /** @deprecated */
  readonly contentWindow: Window | null;
  /**
   * Sets or retrieves whether to display a border for the frame.
   */
  /** @deprecated */
  frameBorder: string;
  /**
   * Sets or retrieves a URI to a long description of the object.
   */
  /** @deprecated */
  longDesc: string;
  /**
   * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.
   */
  /** @deprecated */
  marginHeight: string;
  /**
   * Sets or retrieves the left and right margin widths before displaying the text in a frame.
   */
  /** @deprecated */
  marginWidth: string;
  /**
   * Sets or retrieves the frame name.
   */
  /** @deprecated */
  name: string;
  /**
   * Sets or retrieves whether the user can resize the frame.
   */
  /** @deprecated */
  noResize: boolean;
  /**
   * Sets or retrieves whether the frame can be scrolled.
   */
  /** @deprecated */
  scrolling: string;
  /**
   * Sets or retrieves a URL to be loaded by the object.
   */
  /** @deprecated */
  src: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFrameElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFrameElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLFrameSetElement extends HTMLElement, WindowEventHandlers {
  /**
   * Sets or retrieves the frame widths of the object.
   */
  /** @deprecated */
  cols: string;
  /**
   * Sets or retrieves the frame heights of the object.
   */
  /** @deprecated */
  rows: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFrameSetElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener<K extends keyof WindowEventHandlersEventMap>(type: K, listener: (this: HTMLFrameSetElement, ev: WindowEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFrameSetElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener<K extends keyof WindowEventHandlersEventMap>(type: K, listener: (this: HTMLFrameSetElement, ev: WindowEventHandlersEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLHRElement extends HTMLElement {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   */
  /** @deprecated */
  align: string;
  /** @deprecated */
  color: string;
  /**
   * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.
   */
  /** @deprecated */
  noShade: boolean;
  /** @deprecated */
  size: string;
  /**
   * Sets or retrieves the width of the object.
   */
  /** @deprecated */
  width: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLHeadElement extends HTMLElement {
  /** @deprecated */
  profile: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLHeadingElement extends HTMLElement {
  /**
   * Sets or retrieves a value that indicates the table alignment.
   */
  /** @deprecated */
  align: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadingElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadingElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLHtmlElement extends HTMLElement {
  /**
   * Sets or retrieves the DTD version that governs the current document.
   */
  /** @deprecated */
  version: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHtmlElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHtmlElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLHyperlinkElementUtils {
  hash: string;
  host: string;
  hostname: string;
  href: string;
  origin: string;
  pathname: string;
  port: string;
  protocol: string;
  search: string;
  toString(): string;
}

interface HTMLIFrameElementEventMap extends HTMLElementEventMap {
  "load": Event;
}

interface HTMLIFrameElement extends HTMLElement, GetSVGDocument {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   */
  /** @deprecated */
  align: string;
  allowFullscreen: boolean;
  allowPaymentRequest: boolean;
  /**
   * Retrieves the document object of the page or frame.
   */
  readonly contentDocument: Document | null;
  /**
   * Retrieves the object of the specified.
   */
  readonly contentWindow: Window | null;
  /**
   * Sets or retrieves whether to display a border for the frame.
   */
  /** @deprecated */
  frameBorder: string;
  /**
   * Sets or retrieves the height of the object.
   */
  height: string;
  /**
   * Sets or retrieves a URI to a long description of the object.
   */
  /** @deprecated */
  longDesc: string;
  /**
   * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.
   */
  /** @deprecated */
  marginHeight: string;
  /**
   * Sets or retrieves the left and right margin widths before displaying the text in a frame.
   */
  /** @deprecated */
  marginWidth: string;
  /**
   * Sets or retrieves the frame name.
   */
  name: string;
  readonly sandbox: DOMTokenList;
  /**
   * Sets or retrieves whether the frame can be scrolled.
   */
  /** @deprecated */
  scrolling: string;
  /**
   * Sets or retrieves a URL to be loaded by the object.
   */
  src: string;
  /**
   * Sets or retrives the content of the page that is to contain.
   */
  srcdoc: string;
  /**
   * Sets or retrieves the width of the object.
   */
  width: string;
  addEventListener<K extends keyof HTMLIFrameElementEventMap>(type: K, listener: (this: HTMLIFrameElement, ev: HTMLIFrameElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLIFrameElementEventMap>(type: K, listener: (this: HTMLIFrameElement, ev: HTMLIFrameElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLImageElement extends HTMLElement {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   */
  /** @deprecated */
  align: string;
  /**
   * Sets or retrieves a text alternative to the graphic.
   */
  alt: string;
  /**
   * Specifies the properties of a border drawn around an object.
   */
  /** @deprecated */
  border: string;
  /**
   * Retrieves whether the object is fully loaded.
   */
  readonly complete: boolean;
  crossOrigin: string | null;
  readonly currentSrc: string;
  decoding: "async" | "sync" | "auto";
  /**
   * Sets or retrieves the height of the object.
   */
  height: number;
  /**
   * Sets or retrieves the width of the border to draw around the object.
   */
  /** @deprecated */
  hspace: number;
  /**
   * Sets or retrieves whether the image is a server-side image map.
   */
  isMap: boolean;
  /**
   * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.
   */
  /** @deprecated */
  longDesc: string;
  /** @deprecated */
  lowsrc: string;
  /**
   * Gets or sets whether the DLNA PlayTo device is available.
   */
  msPlayToDisabled: boolean;
  msPlayToPreferredSourceUri: string;
  /**
   * Gets or sets the primary DLNA PlayTo device.
   */
  msPlayToPrimary: boolean;
  /**
   * Gets the source associated with the media element for use by the PlayToManager.
   */
  readonly msPlayToSource: any;
  /**
   * Sets or retrieves the name of the object.
   */
  /** @deprecated */
  name: string;
  /**
   * The original height of the image resource before sizing.
   */
  readonly naturalHeight: number;
  /**
   * The original width of the image resource before sizing.
   */
  readonly naturalWidth: number;
  sizes: string;
  /**
   * The address or URL of the a media resource that is to be considered.
   */
  src: string;
  srcset: string;
  /**
   * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
   */
  useMap: string;
  /**
   * Sets or retrieves the vertical margin for the object.
   */
  /** @deprecated */
  vspace: number;
  /**
   * Sets or retrieves the width of the object.
   */
  width: number;
  readonly x: number;
  readonly y: number;
  msGetAsCastingSource(): any;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLImageElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLImageElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLInputElement extends HTMLElement {
  /**
   * Sets or retrieves a comma-separated list of content types.
   */
  accept: string;
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   */
  /** @deprecated */
  align: string;
  /**
   * Sets or retrieves a text alternative to the graphic.
   */
  alt: string;
  /**
   * Specifies whether autocomplete is applied to an editable text field.
   */
  autocomplete: string;
  /**
   * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.
   */
  autofocus: boolean;
  /**
   * Sets or retrieves the state of the check box or radio button.
   */
  checked: boolean;
  /**
   * Sets or retrieves the state of the check box or radio button.
   */
  defaultChecked: boolean;
  /**
   * Sets or retrieves the initial contents of the object.
   */
  defaultValue: string;
  disabled: boolean;
  /**
   * Returns a FileList object on a file type input object.
   */
  files: FileList | null;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   */
  readonly form: HTMLFormElement | null;
  /**
   * Overrides the action attribute (where the data on a form is sent) on the parent form element.
   */
  formAction: string;
  /**
   * Used to override the encoding (formEnctype attribute) specified on the form element.
   */
  formEnctype: string;
  /**
   * Overrides the submit method attribute previously specified on a form element.
   */
  formMethod: string;
  /**
   * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
   */
  formNoValidate: boolean;
  /**
   * Overrides the target attribute on a form element.
   */
  formTarget: string;
  /**
   * Sets or retrieves the height of the object.
   */
  height: number;
  indeterminate: boolean;
  /**
   * Specifies the ID of a pre-defined datalist of options for an input element.
   */
  readonly list: HTMLElement | null;
  /**
   * Defines the maximum acceptable value for an input element with type="number".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.
   */
  max: string;
  /**
   * Sets or retrieves the maximum number of characters that the user can enter in a text control.
   */
  maxLength: number;
  /**
   * Defines the minimum acceptable value for an input element with type="number". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.
   */
  min: string;
  minLength: number;
  /**
   * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
   */
  multiple: boolean;
  /**
   * Sets or retrieves the name of the object.
   */
  name: string;
  /**
   * Gets or sets a string containing a regular expression that the user's input must match.
   */
  pattern: string;
  /**
   * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
   */
  placeholder: string;
  readOnly: boolean;
  /**
   * When present, marks an element that can't be submitted without a value.
   */
  required: boolean;
  selectionDirection: string | null;
  /**
   * Gets or sets the end position or offset of a text selection.
   */
  selectionEnd: number | null;
  /**
   * Gets or sets the starting position or offset of a text selection.
   */
  selectionStart: number | null;
  size: number;
  /**
   * The address or URL of the a media resource that is to be considered.
   */
  src: string;
  /**
   * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.
   */
  step: string;
  /**
   * Returns the content type of the object.
   */
  type: string;
  /**
   * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
   */
  /** @deprecated */
  useMap: string;
  /**
   * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
   */
  readonly validationMessage: string;
  /**
   * Returns a  ValidityState object that represents the validity states of an element.
   */
  readonly validity: ValidityState;
  /**
   * Returns the value of the data at the cursor's current position.
   */
  value: string;
  valueAsDate: any;
  /**
   * Returns the input field value as a number.
   */
  valueAsNumber: number;
  webkitdirectory: boolean;
  /**
   * Sets or retrieves the width of the object.
   */
  width: number;
  /**
   * Returns whether an element will successfully validate based on forms validation rules and constraints.
   */
  readonly willValidate: boolean;
  /**
   * Returns whether a form will validate when it is submitted, without having to submit it.
   */
  checkValidity(): boolean;
  /**
   * Makes the selection equal to the current object.
   */
  select(): void;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   * @param error Sets a custom error message that is displayed when a form is submitted.
   */
  setCustomValidity(error: string): void;
  /**
   * Sets the start and end positions of a selection in a text field.
   * @param start The offset into the text field for the start of the selection.
   * @param end The offset into the text field for the end of the selection.
   * @param direction The direction in which the selection is performed.
   */
  setSelectionRange(start: number, end: number, direction?: "forward" | "backward" | "none"): void;
  /**
   * Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.
   * @param n Value to decrement the value by.
   */
  stepDown(n?: number): void;
  /**
   * Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.
   * @param n Value to increment the value by.
   */
  stepUp(n?: number): void;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLInputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLInputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLLIElement extends HTMLElement {
  /** @deprecated */
  type: string;
  /**
   * Sets or retrieves the value of a list item.
   */
  value: number;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLIElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLIElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLLabelElement extends HTMLElement {
  readonly control: HTMLInputElement | null;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   */
  readonly form: HTMLFormElement | null;
  /**
   * Sets or retrieves the object to which the given label object is assigned.
   */
  htmlFor: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLabelElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLabelElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLLegendElement extends HTMLElement {
  /** @deprecated */
  align: string;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   */
  readonly form: HTMLFormElement | null;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLegendElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLegendElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLLinkElement extends HTMLElement, LinkStyle {
  /**
   * Sets or retrieves the character set used to encode the object.
   */
  /** @deprecated */
  charset: string;
  crossOrigin: string | null;
  /** @deprecated */
  disabled: boolean;
  /**
   * Sets or retrieves a destination URL or an anchor point.
   */
  href: string;
  /**
   * Sets or retrieves the language code of the object.
   */
  hreflang: string;
  import?: Document;
  integrity: string;
  /**
   * Sets or retrieves the media type.
   */
  media: string;
  /**
   * Sets or retrieves the relationship between the object and the destination of the link.
   */
  rel: string;
  readonly relList: DOMTokenList;
  /**
   * Sets or retrieves the relationship between the object and the destination of the link.
   */
  /** @deprecated */
  rev: string;
  /**
   * Sets or retrieves the window or frame at which to target content.
   */
  /** @deprecated */
  target: string;
  /**
   * Sets or retrieves the MIME type of the object.
   */
  type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLinkElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLinkElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLMainElement extends HTMLElement {
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMainElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMainElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLMapElement extends HTMLElement {
  /**
   * Retrieves a collection of the area objects defined for the given map object.
   */
  readonly areas: HTMLAreasCollection;
  /**
   * Sets or retrieves the name of the object.
   */
  name: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMapElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMapElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLMarqueeElementEventMap extends HTMLElementEventMap {
  "bounce": Event;
  "finish": Event;
  "start": Event;
}

interface HTMLMarqueeElement extends HTMLElement {
  /** @deprecated */
  behavior: string;
  /** @deprecated */
  bgColor: string;
  /** @deprecated */
  direction: string;
  /** @deprecated */
  height: string;
  /** @deprecated */
  hspace: number;
  /** @deprecated */
  loop: number;
  /** @deprecated */
  onbounce: ((this: HTMLMarqueeElement, ev: Event) => any) | null;
  /** @deprecated */
  onfinish: ((this: HTMLMarqueeElement, ev: Event) => any) | null;
  /** @deprecated */
  onstart: ((this: HTMLMarqueeElement, ev: Event) => any) | null;
  /** @deprecated */
  scrollAmount: number;
  /** @deprecated */
  scrollDelay: number;
  /** @deprecated */
  trueSpeed: boolean;
  /** @deprecated */
  vspace: number;
  /** @deprecated */
  width: string;
  /** @deprecated */
  start(): void;
  /** @deprecated */
  stop(): void;
  addEventListener<K extends keyof HTMLMarqueeElementEventMap>(type: K, listener: (this: HTMLMarqueeElement, ev: HTMLMarqueeElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLMarqueeElementEventMap>(type: K, listener: (this: HTMLMarqueeElement, ev: HTMLMarqueeElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLMediaElementEventMap extends HTMLElementEventMap {
  "encrypted": MediaEncryptedEvent;
  "msneedkey": Event;
}

interface HTMLMediaElement extends HTMLElement {
  /**
   * Returns an AudioTrackList object with the audio tracks for a given video element.
   */
  readonly audioTracks: AudioTrackList;
  /**
   * Gets or sets a value that indicates whether to start playing the media automatically.
   */
  autoplay: boolean;
  /**
   * Gets a collection of buffered time ranges.
   */
  readonly buffered: TimeRanges;
  /**
   * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).
   */
  controls: boolean;
  crossOrigin: string | null;
  /**
   * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.
   */
  readonly currentSrc: string;
  /**
   * Gets or sets the current playback position, in seconds.
   */
  currentTime: number;
  defaultMuted: boolean;
  /**
   * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.
   */
  defaultPlaybackRate: number;
  /**
   * Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.
   */
  readonly duration: number;
  /**
   * Gets information about whether the playback has ended or not.
   */
  readonly ended: boolean;
  /**
   * Returns an object representing the current error state of the audio or video element.
   */
  readonly error: MediaError | null;
  /**
   * Gets or sets a flag to specify whether playback should restart after it completes.
   */
  loop: boolean;
  readonly mediaKeys: MediaKeys | null;
  /**
   * Specifies the purpose of the audio or video media, such as background audio or alerts.
   */
  msAudioCategory: string;
  /**
   * Specifies the output device id that the audio will be sent to.
   */
  msAudioDeviceType: string;
  readonly msGraphicsTrustStatus: MSGraphicsTrust;
  /**
   * Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.
   */
  /** @deprecated */
  readonly msKeys: MSMediaKeys;
  /**
   * Gets or sets whether the DLNA PlayTo device is available.
   */
  msPlayToDisabled: boolean;
  /**
   * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.
   */
  msPlayToPreferredSourceUri: string;
  /**
   * Gets or sets the primary DLNA PlayTo device.
   */
  msPlayToPrimary: boolean;
  /**
   * Gets the source associated with the media element for use by the PlayToManager.
   */
  readonly msPlayToSource: any;
  /**
   * Specifies whether or not to enable low-latency playback on the media element.
   */
  msRealTime: boolean;
  /**
   * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.
   */
  muted: boolean;
  /**
   * Gets the current network activity for the element.
   */
  readonly networkState: number;
  onencrypted: ((this: HTMLMediaElement, ev: MediaEncryptedEvent) => any) | null;
  /** @deprecated */
  onmsneedkey: ((this: HTMLMediaElement, ev: Event) => any) | null;
  /**
   * Gets a flag that specifies whether playback is paused.
   */
  readonly paused: boolean;
  /**
   * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.
   */
  playbackRate: number;
  /**
   * Gets TimeRanges for the current media resource that has been played.
   */
  readonly played: TimeRanges;
  /**
   * Gets or sets the current playback position, in seconds.
   */
  preload: string;
  readonly readyState: number;
  /**
   * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.
   */
  readonly seekable: TimeRanges;
  /**
   * Gets a flag that indicates whether the the client is currently moving to a new playback position in the media resource.
   */
  readonly seeking: boolean;
  /**
   * The address or URL of the a media resource that is to be considered.
   */
  src: string;
  srcObject: MediaStream | MediaSource | Blob | null;
  readonly textTracks: TextTrackList;
  readonly videoTracks: VideoTrackList;
  /**
   * Gets or sets the volume level for audio portions of the media element.
   */
  volume: number;
  addTextTrack(kind: TextTrackKind, label?: string, language?: string): TextTrack;
  /**
   * Returns a string that specifies whether the client can play a given media resource type.
   */
  canPlayType(type: string): CanPlayTypeResult;
  /**
   * Resets the audio or video object and loads a new media resource.
   */
  load(): void;
  /**
   * Clears all effects from the media pipeline.
   */
  msClearEffects(): void;
  msGetAsCastingSource(): any;
  /**
   * Inserts the specified audio effect into media pipeline.
   */
  msInsertAudioEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;
  /** @deprecated */
  msSetMediaKeys(mediaKeys: MSMediaKeys): void;
  /**
   * Specifies the media protection manager for a given media pipeline.
   */
  msSetMediaProtectionManager(mediaProtectionManager?: any): void;
  /**
   * Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not.
   */
  pause(): void;
  /**
   * Loads and starts playback of a media resource.
   */
  play(): Promise<void>;
  setMediaKeys(mediaKeys: MediaKeys | null): Promise<void>;
  readonly HAVE_CURRENT_DATA: number;
  readonly HAVE_ENOUGH_DATA: number;
  readonly HAVE_FUTURE_DATA: number;
  readonly HAVE_METADATA: number;
  readonly HAVE_NOTHING: number;
  readonly NETWORK_EMPTY: number;
  readonly NETWORK_IDLE: number;
  readonly NETWORK_LOADING: number;
  readonly NETWORK_NO_SOURCE: number;
  addEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLMediaElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLMediaElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLMenuElement extends HTMLElement {
  /** @deprecated */
  compact: boolean;
  type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMenuElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMenuElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLMetaElement extends HTMLElement {
  /**
   * Sets or retrieves the character set used to encode the object.
   */
  /** @deprecated */
  charset: string;
  /**
   * Gets or sets meta-information to associate with httpEquiv or name.
   */
  content: string;
  /**
   * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.
   */
  httpEquiv: string;
  /**
   * Sets or retrieves the value specified in the content attribute of the meta object.
   */
  name: string;
  /**
   * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.
   */
  /** @deprecated */
  scheme: string;
  /**
   * Sets or retrieves the URL property that will be loaded after the specified time has elapsed.
   */
  /** @deprecated */
  url: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMetaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMetaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLMeterElement extends HTMLElement {
  high: number;
  readonly labels: NodeListOf<HTMLLabelElement>;
  low: number;
  max: number;
  min: number;
  optimum: number;
  value: number;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMeterElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMeterElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLModElement extends HTMLElement {
  /**
   * Sets or retrieves reference information about the object.
   */
  cite: string;
  /**
   * Sets or retrieves the date and time of a modification to the object.
   */
  dateTime: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLModElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLModElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLOListElement extends HTMLElement {
  /** @deprecated */
  compact: boolean;
  /**
   * The starting number.
   */
  start: number;
  type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLObjectElement extends HTMLElement, GetSVGDocument {
  /**
   * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.
   */
  readonly BaseHref: string;
  /** @deprecated */
  align: string;
  /**
   * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.
   */
  /** @deprecated */
  archive: string;
  /** @deprecated */
  border: string;
  /**
   * Sets or retrieves the URL of the file containing the compiled Java class.
   */
  /** @deprecated */
  code: string;
  /**
   * Sets or retrieves the URL of the component.
   */
  /** @deprecated */
  codeBase: string;
  /**
   * Sets or retrieves the Internet media type for the code associated with the object.
   */
  /** @deprecated */
  codeType: string;
  /**
   * Retrieves the document object of the page or frame.
   */
  readonly contentDocument: Document | null;
  /**
   * Sets or retrieves the URL that references the data of the object.
   */
  data: string;
  /** @deprecated */
  declare: boolean;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   */
  readonly form: HTMLFormElement | null;
  /**
   * Sets or retrieves the height of the object.
   */
  height: string;
  /** @deprecated */
  hspace: number;
  /**
   * Gets or sets whether the DLNA PlayTo device is available.
   */
  msPlayToDisabled: boolean;
  /**
   * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.
   */
  msPlayToPreferredSourceUri: string;
  /**
   * Gets or sets the primary DLNA PlayTo device.
   */
  msPlayToPrimary: boolean;
  /**
   * Gets the source associated with the media element for use by the PlayToManager.
   */
  readonly msPlayToSource: any;
  /**
   * Sets or retrieves the name of the object.
   */
  name: string;
  readonly readyState: number;
  /**
   * Sets or retrieves a message to be displayed while an object is loading.
   */
  /** @deprecated */
  standby: string;
  /**
   * Sets or retrieves the MIME type of the object.
   */
  type: string;
  typemustmatch: boolean;
  /**
   * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
   */
  useMap: string;
  /**
   * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
   */
  readonly validationMessage: string;
  /**
   * Returns a  ValidityState object that represents the validity states of an element.
   */
  readonly validity: ValidityState;
  /** @deprecated */
  vspace: number;
  /**
   * Sets or retrieves the width of the object.
   */
  width: string;
  /**
   * Returns whether an element will successfully validate based on forms validation rules and constraints.
   */
  readonly willValidate: boolean;
  /**
   * Returns whether a form will validate when it is submitted, without having to submit it.
   */
  checkValidity(): boolean;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   * @param error Sets a custom error message that is displayed when a form is submitted.
   */
  setCustomValidity(error: string): void;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLObjectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLObjectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLOptGroupElement extends HTMLElement {
  disabled: boolean;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   */
  readonly form: HTMLFormElement | null;
  /**
   * Sets or retrieves a value that you can use to implement your own label functionality for the object.
   */
  label: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptGroupElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptGroupElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLOptionElement extends HTMLElement {
  /**
   * Sets or retrieves the status of an option.
   */
  defaultSelected: boolean;
  disabled: boolean;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   */
  readonly form: HTMLFormElement | null;
  /**
   * Sets or retrieves the ordinal position of an option in a list box.
   */
  readonly index: number;
  /**
   * Sets or retrieves a value that you can use to implement your own label functionality for the object.
   */
  label: string;
  /**
   * Sets or retrieves whether the option in the list box is the default item.
   */
  selected: boolean;
  /**
   * Sets or retrieves the text string specified by the option tag.
   */
  text: string;
  /**
   * Sets or retrieves the value which is returned to the server when the form control is submitted.
   */
  value: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLOptionsCollection extends HTMLCollectionOf<HTMLOptionElement> {
  /**
   * Returns the number of elements in the collection.
   * When set to a smaller number, truncates the number of option elements in the corresponding container.
   * When set to a greater number, adds new blank option elements to that container.
   */
  length: number;
  /**
   * Returns the index of the first selected item, if any, or −1 if there is no selected
   * item.
   * Can be set, to change the selection.
   */
  selectedIndex: number;
  /**
   * Inserts element before the node given by before.
   * The before argument can be a number, in which case element is inserted before the item with that number, or an element from the
   * collection, in which case element is inserted before that element.
   * If before is omitted, null, or a number out of range, then element will be added at the end of the list.
   * This method will throw a "HierarchyRequestError" DOMException if
   * element is an ancestor of the element into which it is to be inserted.
   */
  add(element: HTMLOptionElement | HTMLOptGroupElement, before?: HTMLElement | number): void;
  /**
   * Removes the item with index index from the collection.
   */
  remove(index: number): void;
}

interface HTMLOutputElement extends HTMLElement {
  defaultValue: string;
  readonly form: HTMLFormElement | null;
  readonly htmlFor: DOMTokenList;
  readonly labels: NodeListOf<HTMLLabelElement>;
  name: string;
  readonly type: string;
  readonly validationMessage: string;
  readonly validity: ValidityState;
  value: string;
  readonly willValidate: boolean;
  checkValidity(): boolean;
  reportValidity(): boolean;
  setCustomValidity(error: string): void;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOutputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOutputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLParagraphElement extends HTMLElement {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   */
  /** @deprecated */
  align: string;
  clear: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParagraphElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParagraphElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLParamElement extends HTMLElement {
  /**
   * Sets or retrieves the name of an input parameter for an element.
   */
  name: string;
  /**
   * Sets or retrieves the content type of the resource designated by the value attribute.
   */
  /** @deprecated */
  type: string;
  /**
   * Sets or retrieves the value of an input parameter for an element.
   */
  value: string;
  /**
   * Sets or retrieves the data type of the value attribute.
   */
  /** @deprecated */
  valueType: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParamElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParamElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLPictureElement extends HTMLElement {
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPictureElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPictureElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLPreElement extends HTMLElement {
  /**
   * Sets or gets a value that you can use to implement your own width functionality for the object.
   */
  /** @deprecated */
  width: number;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPreElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPreElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLProgressElement extends HTMLElement {
  readonly labels: NodeListOf<HTMLLabelElement>;
  /**
   * Defines the maximum, or "done" value for a progress element.
   */
  max: number;
  /**
   * Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).
   */
  readonly position: number;
  /**
   * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.
   */
  value: number;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLProgressElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLProgressElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLQuoteElement extends HTMLElement {
  /**
   * Sets or retrieves reference information about the object.
   */
  cite: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLQuoteElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLQuoteElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLScriptElement extends HTMLElement {
  async: boolean;
  /**
   * Sets or retrieves the character set used to encode the object.
   */
  /** @deprecated */
  charset: string;
  crossOrigin: string | null;
  /**
   * Sets or retrieves the status of the script.
   */
  defer: boolean;
  /**
   * Sets or retrieves the event for which the script is written.
   */
  /** @deprecated */
  event: string;
  /**
   * Sets or retrieves the object that is bound to the event script.
   */
  /** @deprecated */
  htmlFor: string;
  integrity: string;
  noModule: boolean;
  /**
   * Retrieves the URL to an external file that contains the source code or data.
   */
  src: string;
  /**
   * Retrieves or sets the text of the object as a string.
   */
  text: string;
  /**
   * Sets or retrieves the MIME type for the associated scripting engine.
   */
  type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLScriptElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLScriptElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLSelectElement extends HTMLElement {
  autocomplete: string;
  /**
   * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.
   */
  autofocus: boolean;
  disabled: boolean;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   */
  readonly form: HTMLFormElement | null;
  readonly labels: NodeListOf<HTMLLabelElement>;
  /**
   * Sets or retrieves the number of objects in a collection.
   */
  length: number;
  /**
   * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
   */
  multiple: boolean;
  /**
   * Sets or retrieves the name of the object.
   */
  name: string;
  readonly options: HTMLOptionsCollection;
  /**
   * When present, marks an element that can't be submitted without a value.
   */
  required: boolean;
  /**
   * Sets or retrieves the index of the selected option in a select object.
   */
  selectedIndex: number;
  readonly selectedOptions: HTMLCollectionOf<HTMLOptionElement>;
  /**
   * Sets or retrieves the number of rows in the list box.
   */
  size: number;
  /**
   * Retrieves the type of select control based on the value of the MULTIPLE attribute.
   */
  readonly type: string;
  /**
   * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
   */
  readonly validationMessage: string;
  /**
   * Returns a  ValidityState object that represents the validity states of an element.
   */
  readonly validity: ValidityState;
  /**
   * Sets or retrieves the value which is returned to the server when the form control is submitted.
   */
  value: string;
  /**
   * Returns whether an element will successfully validate based on forms validation rules and constraints.
   */
  readonly willValidate: boolean;
  /**
   * Adds an element to the areas, controlRange, or options collection.
   * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.
   * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection.
   */
  add(element: HTMLOptionElement | HTMLOptGroupElement, before?: HTMLElement | number): void;
  /**
   * Returns whether a form will validate when it is submitted, without having to submit it.
   */
  checkValidity(): boolean;
  /**
   * Retrieves a select object or an object from an options collection.
   * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.
   * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.
   */
  item(index: number): Element | null;
  /**
   * Retrieves a select object or an object from an options collection.
   * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.
   */
  namedItem(name: string): HTMLOptionElement | null;
  /**
   * Removes an element from the collection.
   * @param index Number that specifies the zero-based index of the element to remove from the collection.
   */
  remove(): void;
  remove(index: number): void;
  reportValidity(): boolean;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   * @param error Sets a custom error message that is displayed when a form is submitted.
   */
  setCustomValidity(error: string): void;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSelectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSelectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  [index: number]: Element;
}

interface HTMLSlotElement extends HTMLElement {
  name: string;
  assignedNodes(options?: AssignedNodesOptions): Node[];
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSlotElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSlotElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLSourceElement extends HTMLElement {
  /**
   * Gets or sets the intended media type of the media source.
   */
  media: string;
  /** @deprecated */
  msKeySystem: string;
  sizes: string;
  /**
   * The address or URL of the a media resource that is to be considered.
   */
  src: string;
  srcset: string;
  /**
   * Gets or sets the MIME type of a media resource.
   */
  type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSourceElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSourceElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLSpanElement extends HTMLElement {
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSpanElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSpanElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLStyleElement extends HTMLElement, LinkStyle {
  /** @deprecated */
  disabled: boolean;
  /**
   * Sets or retrieves the media type.
   */
  media: string;
  /**
   * Retrieves the CSS language in which the style sheet is written.
   */
  /** @deprecated */
  type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLStyleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLStyleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLSummaryElement extends HTMLElement {
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSummaryElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSummaryElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTableCaptionElement extends HTMLElement {
  /**
   * Sets or retrieves the alignment of the caption or legend.
   */
  /** @deprecated */
  align: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCaptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCaptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTableCellElement extends HTMLElement {
  /**
   * Sets or retrieves abbreviated text for the object.
   */
  abbr: string;
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   */
  /** @deprecated */
  align: string;
  /**
   * Sets or retrieves a comma-delimited list of conceptual categories associated with the object.
   */
  /** @deprecated */
  axis: string;
  /** @deprecated */
  bgColor: string;
  /**
   * Retrieves the position of the object in the cells collection of a row.
   */
  readonly cellIndex: number;
  /** @deprecated */
  ch: string;
  /** @deprecated */
  chOff: string;
  /**
   * Sets or retrieves the number columns in the table that the object should span.
   */
  colSpan: number;
  /**
   * Sets or retrieves a list of header cells that provide information for the object.
   */
  headers: string;
  /**
   * Sets or retrieves the height of the object.
   */
  /** @deprecated */
  height: string;
  /**
   * Sets or retrieves whether the browser automatically performs wordwrap.
   */
  /** @deprecated */
  noWrap: boolean;
  /**
   * Sets or retrieves how many rows in a table the cell should span.
   */
  rowSpan: number;
  /**
   * Sets or retrieves the group of cells in a table to which the object's information applies.
   */
  scope: string;
  /** @deprecated */
  vAlign: string;
  /**
   * Sets or retrieves the width of the object.
   */
  /** @deprecated */
  width: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTableColElement extends HTMLElement {
  /**
   * Sets or retrieves the alignment of the object relative to the display or table.
   */
  /** @deprecated */
  align: string;
  /** @deprecated */
  ch: string;
  /** @deprecated */
  chOff: string;
  /**
   * Sets or retrieves the number of columns in the group.
   */
  span: number;
  /** @deprecated */
  vAlign: string;
  /**
   * Sets or retrieves the width of the object.
   */
  /** @deprecated */
  width: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableColElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableColElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTableDataCellElement extends HTMLTableCellElement {
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableDataCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableDataCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTableElement extends HTMLElement {
  /**
   * Sets or retrieves a value that indicates the table alignment.
   */
  /** @deprecated */
  align: string;
  /** @deprecated */
  bgColor: string;
  /**
   * Sets or retrieves the width of the border to draw around the object.
   */
  /** @deprecated */
  border: string;
  /**
   * Retrieves the caption object of a table.
   */
  caption: HTMLTableCaptionElement | null;
  /**
   * Sets or retrieves the amount of space between the border of the cell and the content of the cell.
   */
  /** @deprecated */
  cellPadding: string;
  /**
   * Sets or retrieves the amount of space between cells in a table.
   */
  /** @deprecated */
  cellSpacing: string;
  /**
   * Sets or retrieves the way the border frame around the table is displayed.
   */
  /** @deprecated */
  frame: string;
  /**
   * Sets or retrieves the number of horizontal rows contained in the object.
   */
  readonly rows: HTMLCollectionOf<HTMLTableRowElement>;
  /**
   * Sets or retrieves which dividing lines (inner borders) are displayed.
   */
  /** @deprecated */
  rules: string;
  /**
   * Sets or retrieves a description and/or structure of the object.
   */
  /** @deprecated */
  summary: string;
  /**
   * Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.
   */
  readonly tBodies: HTMLCollectionOf<HTMLTableSectionElement>;
  /**
   * Retrieves the tFoot object of the table.
   */
  tFoot: HTMLTableSectionElement | null;
  /**
   * Retrieves the tHead object of the table.
   */
  tHead: HTMLTableSectionElement | null;
  /**
   * Sets or retrieves the width of the object.
   */
  /** @deprecated */
  width: string;
  /**
   * Creates an empty caption element in the table.
   */
  createCaption(): HTMLTableCaptionElement;
  /**
   * Creates an empty tBody element in the table.
   */
  createTBody(): HTMLTableSectionElement;
  /**
   * Creates an empty tFoot element in the table.
   */
  createTFoot(): HTMLTableSectionElement;
  /**
   * Returns the tHead element object if successful, or null otherwise.
   */
  createTHead(): HTMLTableSectionElement;
  /**
   * Deletes the caption element and its contents from the table.
   */
  deleteCaption(): void;
  /**
   * Removes the specified row (tr) from the element and from the rows collection.
   * @param index Number that specifies the zero-based position in the rows collection of the row to remove.
   */
  deleteRow(index?: number): void;
  /**
   * Deletes the tFoot element and its contents from the table.
   */
  deleteTFoot(): void;
  /**
   * Deletes the tHead element and its contents from the table.
   */
  deleteTHead(): void;
  /**
   * Creates a new row (tr) in the table, and adds the row to the rows collection.
   * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.
   */
  insertRow(index?: number): HTMLTableRowElement;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTableHeaderCellElement extends HTMLTableCellElement {
  scope: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableHeaderCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableHeaderCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTableRowElement extends HTMLElement {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   */
  /** @deprecated */
  align: string;
  /** @deprecated */
  bgColor: string;
  /**
   * Retrieves a collection of all cells in the table row.
   */
  readonly cells: HTMLCollectionOf<HTMLTableDataCellElement | HTMLTableHeaderCellElement>;
  /** @deprecated */
  ch: string;
  /** @deprecated */
  chOff: string;
  /**
   * Retrieves the position of the object in the rows collection for the table.
   */
  readonly rowIndex: number;
  /**
   * Retrieves the position of the object in the collection.
   */
  readonly sectionRowIndex: number;
  /** @deprecated */
  vAlign: string;
  /**
   * Removes the specified cell from the table row, as well as from the cells collection.
   * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.
   */
  deleteCell(index?: number): void;
  /**
   * Creates a new cell in the table row, and adds the cell to the cells collection.
   * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.
   */
  insertCell(index?: number): HTMLTableDataCellElement;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableRowElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableRowElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTableSectionElement extends HTMLElement {
  /**
   * Sets or retrieves a value that indicates the table alignment.
   */
  /** @deprecated */
  align: string;
  /** @deprecated */
  ch: string;
  /** @deprecated */
  chOff: string;
  /**
   * Sets or retrieves the number of horizontal rows contained in the object.
   */
  readonly rows: HTMLCollectionOf<HTMLTableRowElement>;
  /** @deprecated */
  vAlign: string;
  /**
   * Removes the specified row (tr) from the element and from the rows collection.
   * @param index Number that specifies the zero-based position in the rows collection of the row to remove.
   */
  deleteRow(index?: number): void;
  /**
   * Creates a new row (tr) in the table, and adds the row to the rows collection.
   * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.
   */
  insertRow(index?: number): HTMLTableRowElement;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableSectionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableSectionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTemplateElement extends HTMLElement {
  readonly content: DocumentFragment;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTemplateElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTemplateElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTextAreaElement extends HTMLElement {
  autocomplete: string;
  /**
   * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.
   */
  autofocus: boolean;
  /**
   * Sets or retrieves the width of the object.
   */
  cols: number;
  /**
   * Sets or retrieves the initial contents of the object.
   */
  defaultValue: string;
  dirName: string;
  disabled: boolean;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   */
  readonly form: HTMLFormElement | null;
  readonly labels: NodeListOf<HTMLLabelElement>;
  /**
   * Sets or retrieves the maximum number of characters that the user can enter in a text control.
   */
  maxLength: number;
  minLength: number;
  /**
   * Sets or retrieves the name of the object.
   */
  name: string;
  /**
   * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
   */
  placeholder: string;
  /**
   * Sets or retrieves the value indicated whether the content of the object is read-only.
   */
  readOnly: boolean;
  /**
   * When present, marks an element that can't be submitted without a value.
   */
  required: boolean;
  /**
   * Sets or retrieves the number of horizontal rows contained in the object.
   */
  rows: number;
  selectionDirection: string;
  /**
   * Gets or sets the end position or offset of a text selection.
   */
  selectionEnd: number;
  /**
   * Gets or sets the starting position or offset of a text selection.
   */
  selectionStart: number;
  readonly textLength: number;
  /**
   * Retrieves the type of control.
   */
  readonly type: string;
  /**
   * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
   */
  readonly validationMessage: string;
  /**
   * Returns a  ValidityState object that represents the validity states of an element.
   */
  readonly validity: ValidityState;
  /**
   * Retrieves or sets the text in the entry field of the textArea element.
   */
  value: string;
  /**
   * Returns whether an element will successfully validate based on forms validation rules and constraints.
   */
  readonly willValidate: boolean;
  /**
   * Sets or retrieves how to handle wordwrapping in the object.
   */
  wrap: string;
  /**
   * Returns whether a form will validate when it is submitted, without having to submit it.
   */
  checkValidity(): boolean;
  reportValidity(): boolean;
  /**
   * Highlights the input area of a form element.
   */
  select(): void;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   * @param error Sets a custom error message that is displayed when a form is submitted.
   */
  setCustomValidity(error: string): void;
  setRangeText(replacement: string): void;
  setRangeText(replacement: string, start: number, end: number, selectionMode?: SelectionMode): void;
  /**
   * Sets the start and end positions of a selection in a text field.
   * @param start The offset into the text field for the start of the selection.
   * @param end The offset into the text field for the end of the selection.
   * @param direction The direction in which the selection is performed.
   */
  setSelectionRange(start: number, end: number, direction?: "forward" | "backward" | "none"): void;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTextAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTextAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTimeElement extends HTMLElement {
  dateTime: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTimeElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTimeElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTitleElement extends HTMLElement {
  /**
   * Retrieves or sets the text of the object as a string.
   */
  text: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTitleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTitleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLTrackElement extends HTMLElement {
  default: boolean;
  kind: string;
  label: string;
  readonly readyState: number;
  src: string;
  srclang: string;
  readonly track: TextTrack;
  readonly ERROR: number;
  readonly LOADED: number;
  readonly LOADING: number;
  readonly NONE: number;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTrackElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTrackElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLUListElement extends HTMLElement {
  /** @deprecated */
  compact: boolean;
  /** @deprecated */
  type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLUnknownElement extends HTMLElement {
  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUnknownElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUnknownElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HTMLVideoElementEventMap extends HTMLMediaElementEventMap {
  "MSVideoFormatChanged": Event;
  "MSVideoFrameStepCompleted": Event;
  "MSVideoOptimalLayoutChanged": Event;
}

interface HTMLVideoElement extends HTMLMediaElement {
  /**
   * Gets or sets the height of the video element.
   */
  height: number;
  msHorizontalMirror: boolean;
  readonly msIsLayoutOptimalForPlayback: boolean;
  readonly msIsStereo3D: boolean;
  msStereo3DPackingMode: string;
  msStereo3DRenderMode: string;
  msZoom: boolean;
  onMSVideoFormatChanged: ((this: HTMLVideoElement, ev: Event) => any) | null;
  onMSVideoFrameStepCompleted: ((this: HTMLVideoElement, ev: Event) => any) | null;
  onMSVideoOptimalLayoutChanged: ((this: HTMLVideoElement, ev: Event) => any) | null;
  /**
   * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.
   */
  poster: string;
  /**
   * Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.
   */
  readonly videoHeight: number;
  /**
   * Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.
   */
  readonly videoWidth: number;
  readonly webkitDisplayingFullscreen: boolean;
  readonly webkitSupportsFullscreen: boolean;
  /**
   * Gets or sets the width of the video element.
   */
  width: number;
  getVideoPlaybackQuality(): VideoPlaybackQuality;
  msFrameStep(forward: boolean): void;
  msInsertVideoEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;
  msSetVideoRectangle(left: number, top: number, right: number, bottom: number): void;
  webkitEnterFullScreen(): void;
  webkitEnterFullscreen(): void;
  webkitExitFullScreen(): void;
  webkitExitFullscreen(): void;
  addEventListener<K extends keyof HTMLVideoElementEventMap>(type: K, listener: (this: HTMLVideoElement, ev: HTMLVideoElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof HTMLVideoElementEventMap>(type: K, listener: (this: HTMLVideoElement, ev: HTMLVideoElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface HashChangeEvent extends Event {
  readonly newURL: string;
  readonly oldURL: string;
}

interface Headers {
  append(name: string, value: string): void;
  delete(name: string): void;
  get(name: string): string | null;
  has(name: string): boolean;
  set(name: string, value: string): void;
  forEach(callbackfn: (value: string, key: string, parent: Headers) => void, thisArg?: any): void;
}

interface History {
  readonly length: number;
  scrollRestoration: ScrollRestoration;
  readonly state: any;
  back(distance?: any): void;
  forward(distance?: any): void;
  go(delta?: any): void;
  pushState(data: any, title?: string, url?: string | null): void;
  replaceState(data: any, title?: string, url?: string | null): void;
}

interface HkdfCtrParams extends Algorithm {
  context: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;
  hash: string | Algorithm;
  label: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer;
}

interface IDBArrayKey extends Array<IDBValidKey> {
}

interface IDBCursor {
  /**
   * Returns the direction ("next", "nextunique", "prev" or "prevunique")
   * of the cursor.
   */
  readonly direction: IDBCursorDirection;
  /**
   * Returns the key of the cursor.
   * Throws a "InvalidStateError" DOMException if the cursor is advancing or is finished.
   */
  readonly key: IDBValidKey | IDBKeyRange;
  /**
   * Returns the effective key of the cursor.
   * Throws a "InvalidStateError" DOMException if the cursor is advancing or is finished.
   */
  readonly primaryKey: IDBValidKey | IDBKeyRange;
  /**
   * Returns the IDBObjectStore or IDBIndex the cursor was opened from.
   */
  readonly source: IDBObjectStore | IDBIndex;
  /**
   * Advances the cursor through the next count records in
   * range.
   */
  advance(count: number): void;
  /**
   * Advances the cursor to the next record in range matching or
   * after key.
   */
  continue(key?: IDBValidKey | IDBKeyRange): void;
  /**
   * Advances the cursor to the next record in range matching
   * or after key and primaryKey. Throws an "InvalidAccessError" DOMException if the source is not an index.
   */
  continuePrimaryKey(key: IDBValidKey | IDBKeyRange, primaryKey: IDBValidKey | IDBKeyRange): void;
  /**
   * Delete the record pointed at by the cursor with a new value.
   * If successful, request's result will be undefined.
   */
  delete(): IDBRequest;
  /**
   * Updated the record pointed at by the cursor with a new value.
   * Throws a "DataError" DOMException if the effective object store uses in-line keys and the key would have changed.
   * If successful, request's result will be the record's key.
   */
  update(value: any): IDBRequest;
}

interface IDBCursorWithValue extends IDBCursor {
  /**
   * Returns the cursor's current value.
   */
  readonly value: any;
}

interface IDBDatabaseEventMap {
  "abort": Event;
  "close": Event;
  "error": Event;
  "versionchange": IDBVersionChangeEvent;
}

interface IDBDatabase extends EventTarget {
  /**
   * Returns the name of the database.
   */
  readonly name: string;
  /**
   * Returns a list of the names of object stores in the database.
   */
  readonly objectStoreNames: DOMStringList;
  onabort: ((this: IDBDatabase, ev: Event) => any) | null;
  onclose: ((this: IDBDatabase, ev: Event) => any) | null;
  onerror: ((this: IDBDatabase, ev: Event) => any) | null;
  onversionchange: ((this: IDBDatabase, ev: IDBVersionChangeEvent) => any) | null;
  /**
   * Returns the version of the database.
   */
  readonly version: number;
  /**
   * Closes the connection once all running transactions have finished.
   */
  close(): void;
  /**
   * Creates a new object store with the given name and options and returns a new IDBObjectStore.
   * Throws a "InvalidStateError" DOMException if not called within an upgrade transaction.
   */
  createObjectStore(name: string, optionalParameters?: IDBObjectStoreParameters): IDBObjectStore;
  /**
   * Deletes the object store with the given name.
   * Throws a "InvalidStateError" DOMException if not called within an upgrade transaction.
   */
  deleteObjectStore(name: string): void;
  /**
   * Returns a new transaction with the given mode ("readonly" or "readwrite")
   * and scope which can be a single object store name or an array of names.
   */
  transaction(storeNames: string | string[], mode?: IDBTransactionMode): IDBTransaction;
  addEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface IDBEnvironment {
  readonly indexedDB: IDBFactory;
}

interface IDBFactory {
  /**
   * Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if
   * the keys are equal.
   * Throws a "DataError" DOMException if either input is not a valid key.
   */
  cmp(first: any, second: any): number;
  /**
   * Attempts to delete the named database. If the
   * database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request
   * is successful request's result will be null.
   */
  deleteDatabase(name: string): IDBOpenDBRequest;
  /**
   * Attempts to open a connection to the named database with the specified version. If the database already exists
   * with a lower version and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close, then an upgrade
   * will occur. If the database already exists with a higher
   * version the request will fail. If the request is
   * successful request's result will
   * be the connection.
   */
  open(name: string, version?: number): IDBOpenDBRequest;
}

interface IDBIndex {
  readonly keyPath: string | string[];
  readonly multiEntry: boolean;
  /**
   * Updates the name of the store to newName.
   * Throws an "InvalidStateError" DOMException if not called within an upgrade
   * transaction.
   */
  name: string;
  /**
   * Returns the IDBObjectStore the index belongs to.
   */
  readonly objectStore: IDBObjectStore;
  readonly unique: boolean;
  /**
   * Retrieves the number of records matching the given key or key range in query.
   * If successful, request's result will be the
   * count.
   */
  count(key?: IDBValidKey | IDBKeyRange): IDBRequest;
  /**
   * Retrieves the value of the first record matching the
   * given key or key range in query.
   * If successful, request's result will be the value, or undefined if there was no matching record.
   */
  get(key: IDBValidKey | IDBKeyRange): IDBRequest;
  /**
   * Retrieves the values of the records matching the given key or key range in query (up to count if given).
   * If successful, request's result will be an Array of the values.
   */
  getAll(query?: IDBValidKey | IDBKeyRange, count?: number): IDBRequest;
  /**
   * Retrieves the keys of records matching the given key or key range in query (up to count if given).
   * If successful, request's result will be an Array of the keys.
   */
  getAllKeys(query?: IDBValidKey | IDBKeyRange, count?: number): IDBRequest;
  /**
   * Retrieves the key of the first record matching the
   * given key or key range in query.
   * If successful, request's result will be the key, or undefined if there was no matching record.
   */
  getKey(key: IDBValidKey | IDBKeyRange): IDBRequest;
  /**
   * Opens a cursor over the records matching query,
   * ordered by direction. If query is null, all records in index are matched.
   * If successful, request's result will be an IDBCursorWithValue, or null if there were no matching records.
   */
  openCursor(range?: IDBValidKey | IDBKeyRange, direction?: IDBCursorDirection): IDBRequest;
  /**
   * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in index are matched.
   * If successful, request's result will be an IDBCursor, or null if there were no matching records.
   */
  openKeyCursor(range?: IDBValidKey | IDBKeyRange, direction?: IDBCursorDirection): IDBRequest;
}

interface IDBKeyRange {
  /**
   * Returns lower bound, or undefined if none.
   */
  readonly lower: any;
  /**
   * Returns true if the lower open flag is set, and false otherwise.
   */
  readonly lowerOpen: boolean;
  /**
   * Returns upper bound, or undefined if none.
   */
  readonly upper: any;
  /**
   * Returns true if the upper open flag is set, and false otherwise.
   */
  readonly upperOpen: boolean;
  /**
   * Returns true if key is included in the range, and false otherwise.
   */
  includes(key: any): boolean;
}

interface IDBObjectStore {
  /**
   * Returns true if the store has a key generator, and false otherwise.
   */
  readonly autoIncrement: boolean;
  /**
   * Returns a list of the names of indexes in the store.
   */
  readonly indexNames: DOMStringList;
  /**
   * Returns the key path of the store, or null if none.
   */
  readonly keyPath: string | string[];
  /**
   * Updates the name of the store to newName.
   * Throws "InvalidStateError" DOMException if not called within an upgrade
   * transaction.
   */
  name: string;
  /**
   * Returns the associated transaction.
   */
  readonly transaction: IDBTransaction;
  add(value: any, key?: IDBValidKey | IDBKeyRange): IDBRequest;
  /**
   * Deletes all records in store.
   * If successful, request's result will
   * be undefined.
   */
  clear(): IDBRequest;
  /**
   * Retrieves the number of records matching the
   * given key or key range in query.
   * If successful, request's result will be the count.
   */
  count(key?: IDBValidKey | IDBKeyRange): IDBRequest;
  /**
   * Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be
   * satisfied with the data already in store the upgrade
   * transaction will abort with
   * a "ConstraintError" DOMException.
   * Throws an "InvalidStateError" DOMException if not called within an upgrade
   * transaction.
   */
  createIndex(name: string, keyPath: string | string[], options?: IDBIndexParameters): IDBIndex;
  /**
   * Deletes records in store with the given key or in the given key range in query.
   * If successful, request's result will
   * be undefined.
   */
  delete(key: IDBValidKey | IDBKeyRange): IDBRequest;
  /**
   * Deletes the index in store with the given name.
   * Throws an "InvalidStateError" DOMException if not called within an upgrade
   * transaction.
   */
  deleteIndex(name: string): void;
  /**
   * Retrieves the value of the first record matching the
   * given key or key range in query.
   * If successful, request's result will be the value, or undefined if there was no matching record.
   */
  get(query: IDBValidKey | IDBKeyRange): IDBRequest;
  /**
   * Retrieves the values of the records matching the
   * given key or key range in query (up to count if given).
   * If successful, request's result will
   * be an Array of the values.
   */
  getAll(query?: IDBValidKey | IDBKeyRange, count?: number): IDBRequest;
  /**
   * Retrieves the keys of records matching the
   * given key or key range in query (up to count if given).
   * If successful, request's result will
   * be an Array of the keys.
   */
  getAllKeys(query?: IDBValidKey | IDBKeyRange, count?: number): IDBRequest;
  /**
   * Retrieves the key of the first record matching the
   * given key or key range in query.
   * If successful, request's result will be the key, or undefined if there was no matching record.
   */
  getKey(query: IDBValidKey | IDBKeyRange): IDBRequest;
  index(name: string): IDBIndex;
  /**
   * Opens a cursor over the records matching query,
   * ordered by direction. If query is null, all records in store are matched.
   * If successful, request's result will be an IDBCursorWithValue pointing at the first matching record, or null if there were no matching records.
   */
  openCursor(range?: IDBValidKey | IDBKeyRange, direction?: IDBCursorDirection): IDBRequest;
  /**
   * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in store are matched.
   * If successful, request's result will be an IDBCursor pointing at the first matching record, or
   * null if there were no matching records.
   */
  openKeyCursor(query?: IDBValidKey | IDBKeyRange, direction?: IDBCursorDirection): IDBRequest;
  put(value: any, key?: IDBValidKey | IDBKeyRange): IDBRequest;
}

interface IDBOpenDBRequestEventMap extends IDBRequestEventMap {
  "blocked": Event;
  "upgradeneeded": IDBVersionChangeEvent;
}

interface IDBOpenDBRequest extends IDBRequest {
  onblocked: ((this: IDBOpenDBRequest, ev: Event) => any) | null;
  onupgradeneeded: ((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => any) | null;
  addEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface IDBRequestEventMap {
  "error": Event;
  "success": Event;
}

interface IDBRequest extends EventTarget {
  /**
   * When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws
   * a "InvalidStateError" DOMException if the request is still pending.
   */
  readonly error: DOMException | null;
  onerror: ((this: IDBRequest, ev: Event) => any) | null;
  onsuccess: ((this: IDBRequest, ev: Event) => any) | null;
  /**
   * Returns "pending" until a request is complete,
   * then returns "done".
   */
  readonly readyState: IDBRequestReadyState;
  /**
   * When a request is completed, returns the result,
   * or undefined if the request failed. Throws a
   * "InvalidStateError" DOMException if the request is still pending.
   */
  readonly result: any;
  /**
   * Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open
   * request.
   */
  readonly source: IDBObjectStore | IDBIndex | IDBCursor;
  /**
   * Returns the IDBTransaction the request was made within.
   * If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.
   */
  readonly transaction: IDBTransaction | null;
  addEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest, ev: IDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest, ev: IDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface IDBTransactionEventMap {
  "abort": Event;
  "complete": Event;
  "error": Event;
}

interface IDBTransaction extends EventTarget {
  /**
   * Returns the transaction's connection.
   */
  readonly db: IDBDatabase;
  /**
   * If the transaction was aborted, returns the
   * error (a DOMException) providing the reason.
   */
  readonly error: DOMException;
  /**
   * Returns the mode the transaction was created with
   * ("readonly" or "readwrite"), or "versionchange" for
   * an upgrade transaction.
   */
  readonly mode: IDBTransactionMode;
  /**
   * Returns a list of the names of object stores in the
   * transaction's scope. For an upgrade transaction this is all object stores in the database.
   */
  readonly objectStoreNames: DOMStringList;
  onabort: ((this: IDBTransaction, ev: Event) => any) | null;
  oncomplete: ((this: IDBTransaction, ev: Event) => any) | null;
  onerror: ((this: IDBTransaction, ev: Event) => any) | null;
  /**
   * Aborts the transaction. All pending requests will fail with
   * a "AbortError" DOMException and all changes made to the database will be
   * reverted.
   */
  abort(): void;
  /**
   * Returns an IDBObjectStore in the transaction's scope.
   */
  objectStore(name: string): IDBObjectStore;
  addEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface IDBVersionChangeEvent extends Event {
  readonly newVersion: number | null;
  readonly oldVersion: number;
}

interface IIRFilterNode extends AudioNode {
  getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void;
}

interface ImageBitmap {
  readonly height: number;
  readonly width: number;
  close(): void;
}

interface ImageBitmapOptions {
  colorSpaceConversion?: "none" | "default";
  imageOrientation?: "none" | "flipY";
  premultiplyAlpha?: "none" | "premultiply" | "default";
  resizeHeight?: number;
  resizeQuality?: "pixelated" | "low" | "medium" | "high";
  resizeWidth?: number;
}

interface ImageData {
  readonly data: Uint8ClampedArray;
  readonly height: number;
  readonly width: number;
}

interface IntersectionObserver {
  readonly root: Element | null;
  readonly rootMargin: string;
  readonly thresholds: number[];
  disconnect(): void;
  observe(target: Element): void;
  takeRecords(): IntersectionObserverEntry[];
  unobserve(target: Element): void;
}

interface IntersectionObserverEntry {
  readonly boundingClientRect: ClientRect | DOMRect;
  readonly intersectionRatio: number;
  readonly intersectionRect: ClientRect | DOMRect;
  readonly isIntersecting: boolean;
  readonly rootBounds: ClientRect | DOMRect;
  readonly target: Element;
  readonly time: number;
}

interface KeyboardEvent extends UIEvent {
  readonly altKey: boolean;
  /** @deprecated */
  char: string;
  /** @deprecated */
  readonly charCode: number;
  readonly code: string;
  readonly ctrlKey: boolean;
  readonly key: string;
  /** @deprecated */
  readonly keyCode: number;
  readonly location: number;
  readonly metaKey: boolean;
  readonly repeat: boolean;
  readonly shiftKey: boolean;
  /** @deprecated */
  readonly which: number;
  getModifierState(keyArg: string): boolean;
  /** @deprecated */
  initKeyboardEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, keyArg: string, locationArg: number, modifiersListArg: string, repeat: boolean, locale: string): void;
  readonly DOM_KEY_LOCATION_JOYSTICK: number;
  readonly DOM_KEY_LOCATION_LEFT: number;
  readonly DOM_KEY_LOCATION_MOBILE: number;
  readonly DOM_KEY_LOCATION_NUMPAD: number;
  readonly DOM_KEY_LOCATION_RIGHT: number;
  readonly DOM_KEY_LOCATION_STANDARD: number;
}

interface KeyframeEffect extends AnimationEffect {
  composite: CompositeOperation;
  iterationComposite: IterationCompositeOperation;
  target: Element | null;
  getKeyframes(): ComputedKeyframe[];
  setKeyframes(keyframes: Keyframe[] | PropertyIndexedKeyframes | null): void;
}

interface LinkStyle {
  readonly sheet: StyleSheet | null;
}

interface ListeningStateChangedEvent extends Event {
  readonly label: string;
  readonly state: ListeningState;
}

interface Location {
  hash: string;
  host: string;
  hostname: string;
  href: string;
  readonly origin: string;
  pathname: string;
  port: string;
  protocol: string;
  search: string;
  assign(url: string): void;
  reload(forcedReload?: boolean): void;
  replace(url: string): void;
  toString(): string;
}

interface MSAssertion {
  readonly id: string;
  readonly type: MSCredentialType;
}

interface MSBlobBuilder {
  append(data: any, endings?: string): void;
  getBlob(contentType?: string): Blob;
}

interface MSCredentials {
  getAssertion(challenge: string, filter?: MSCredentialFilter, params?: MSSignatureParameters): Promise<MSAssertion>;
  makeCredential(accountInfo: MSAccountInfo, params: MSCredentialParameters[], challenge?: string): Promise<MSAssertion>;
}

interface MSDCCEvent extends Event {
  readonly maxFr: number;
  readonly maxFs: number;
}

interface MSDSHEvent extends Event {
  readonly sources: number[];
  readonly timestamp: number;
}

interface MSFIDOCredentialAssertion extends MSAssertion {
  readonly algorithm: string | Algorithm;
  readonly attestation: any;
  readonly publicKey: string;
  readonly transportHints: MSTransportType[];
}

interface MSFIDOSignature {
  readonly authnrData: string;
  readonly clientData: string;
  readonly signature: string;
}

interface MSFIDOSignatureAssertion extends MSAssertion {
  readonly signature: MSFIDOSignature;
}

interface MSFileSaver {
  msSaveBlob(blob: any, defaultName?: string): boolean;
  msSaveOrOpenBlob(blob: any, defaultName?: string): boolean;
}

interface MSGesture {
  target: Element;
  addPointer(pointerId: number): void;
  stop(): void;
}

interface MSGestureEvent extends UIEvent {
  readonly clientX: number;
  readonly clientY: number;
  readonly expansion: number;
  readonly gestureObject: any;
  readonly hwTimestamp: number;
  readonly offsetX: number;
  readonly offsetY: number;
  readonly rotation: number;
  readonly scale: number;
  readonly screenX: number;
  readonly screenY: number;
  readonly translationX: number;
  readonly translationY: number;
  readonly velocityAngular: number;
  readonly velocityExpansion: number;
  readonly velocityX: number;
  readonly velocityY: number;
  initGestureEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, offsetXArg: number, offsetYArg: number, translationXArg: number, translationYArg: number, scaleArg: number, expansionArg: number, rotationArg: number, velocityXArg: number, velocityYArg: number, velocityExpansionArg: number, velocityAngularArg: number, hwTimestampArg: number): void;
  readonly MSGESTURE_FLAG_BEGIN: number;
  readonly MSGESTURE_FLAG_CANCEL: number;
  readonly MSGESTURE_FLAG_END: number;
  readonly MSGESTURE_FLAG_INERTIA: number;
  readonly MSGESTURE_FLAG_NONE: number;
}

interface MSGraphicsTrust {
  readonly constrictionActive: boolean;
  readonly status: string;
}

interface MSInputMethodContextEventMap {
  "MSCandidateWindowHide": Event;
  "MSCandidateWindowShow": Event;
  "MSCandidateWindowUpdate": Event;
}

interface MSInputMethodContext extends EventTarget {
  readonly compositionEndOffset: number;
  readonly compositionStartOffset: number;
  oncandidatewindowhide: ((this: MSInputMethodContext, ev: Event) => any) | null;
  oncandidatewindowshow: ((this: MSInputMethodContext, ev: Event) => any) | null;
  oncandidatewindowupdate: ((this: MSInputMethodContext, ev: Event) => any) | null;
  readonly target: HTMLElement;
  getCandidateWindowClientRect(): ClientRect;
  getCompositionAlternatives(): string[];
  hasComposition(): boolean;
  isCandidateWindowVisible(): boolean;
  addEventListener<K extends keyof MSInputMethodContextEventMap>(type: K, listener: (this: MSInputMethodContext, ev: MSInputMethodContextEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof MSInputMethodContextEventMap>(type: K, listener: (this: MSInputMethodContext, ev: MSInputMethodContextEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface MSMediaKeyError {
  readonly code: number;
  readonly systemCode: number;
  readonly MS_MEDIA_KEYERR_CLIENT: number;
  readonly MS_MEDIA_KEYERR_DOMAIN: number;
  readonly MS_MEDIA_KEYERR_HARDWARECHANGE: number;
  readonly MS_MEDIA_KEYERR_OUTPUT: number;
  readonly MS_MEDIA_KEYERR_SERVICE: number;
  readonly MS_MEDIA_KEYERR_UNKNOWN: number;
}

interface MSMediaKeyMessageEvent extends Event {
  readonly destinationURL: string | null;
  readonly message: Uint8Array;
}

interface MSMediaKeyNeededEvent extends Event {
  readonly initData: Uint8Array | null;
}

interface MSMediaKeySession extends EventTarget {
  readonly error: MSMediaKeyError | null;
  readonly keySystem: string;
  readonly sessionId: string;
  close(): void;
  update(key: Uint8Array): void;
}

interface MSMediaKeys {
  readonly keySystem: string;
  createSession(type: string, initData: Uint8Array, cdmData?: Uint8Array | null): MSMediaKeySession;
}

interface MSNavigatorDoNotTrack {
  confirmSiteSpecificTrackingException(args: ConfirmSiteSpecificExceptionsInformation): boolean;
  confirmWebWideTrackingException(args: ExceptionInformation): boolean;
  removeSiteSpecificTrackingException(args: ExceptionInformation): void;
  removeWebWideTrackingException(args: ExceptionInformation): void;
  storeSiteSpecificTrackingException(args: StoreSiteSpecificExceptionsInformation): void;
  storeWebWideTrackingException(args: StoreExceptionsInformation): void;
}

interface MSPointerEvent extends MouseEvent {
  readonly currentPoint: any;
  readonly height: number;
  readonly hwTimestamp: number;
  readonly intermediatePoints: any;
  readonly isPrimary: boolean;
  readonly pointerId: number;
  readonly pointerType: any;
  readonly pressure: number;
  readonly rotation: number;
  readonly tiltX: number;
  readonly tiltY: number;
  readonly width: number;
  getCurrentPoint(element: Element): void;
  getIntermediatePoints(element: Element): void;
  initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;
}

interface MSStream {
  readonly type: string;
  msClose(): void;
  msDetachStream(): any;
}

interface MediaDeviceInfo {
  readonly deviceId: string;
  readonly groupId: string;
  readonly kind: MediaDeviceKind;
  readonly label: string;
}

interface MediaDevicesEventMap {
  "devicechange": Event;
}

interface MediaDevices extends EventTarget {
  ondevicechange: ((this: MediaDevices, ev: Event) => any) | null;
  enumerateDevices(): Promise<MediaDeviceInfo[]>;
  getSupportedConstraints(): MediaTrackSupportedConstraints;
  getUserMedia(constraints: MediaStreamConstraints): Promise<MediaStream>;
  addEventListener<K extends keyof MediaDevicesEventMap>(type: K, listener: (this: MediaDevices, ev: MediaDevicesEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof MediaDevicesEventMap>(type: K, listener: (this: MediaDevices, ev: MediaDevicesEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface MediaElementAudioSourceNode extends AudioNode {
  readonly mediaElement: HTMLMediaElement;
}

interface MediaEncryptedEvent extends Event {
  readonly initData: ArrayBuffer | null;
  readonly initDataType: string;
}

interface MediaError {
  readonly code: number;
  readonly message: string;
  readonly msExtendedCode: number;
  readonly MEDIA_ERR_ABORTED: number;
  readonly MEDIA_ERR_DECODE: number;
  readonly MEDIA_ERR_NETWORK: number;
  readonly MEDIA_ERR_SRC_NOT_SUPPORTED: number;
  readonly MS_MEDIA_ERR_ENCRYPTED: number;
}

interface MediaKeyMessageEvent extends Event {
  readonly message: ArrayBuffer;
  readonly messageType: MediaKeyMessageType;
}

interface MediaKeySession extends EventTarget {
  readonly closed: Promise<void>;
  readonly expiration: number;
  readonly keyStatuses: MediaKeyStatusMap;
  readonly sessionId: string;
  close(): Promise<void>;
  generateRequest(initDataType: string, initData: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null): Promise<void>;
  load(sessionId: string): Promise<boolean>;
  remove(): Promise<void>;
  update(response: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null): Promise<void>;
}

interface MediaKeyStatusMap {
  readonly size: number;
  forEach(callback: Function, thisArg?: any): void;
  get(keyId: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null): MediaKeyStatus;
  has(keyId: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null): boolean;
}

interface MediaKeySystemAccess {
  readonly keySystem: string;
  createMediaKeys(): Promise<MediaKeys>;
  getConfiguration(): MediaKeySystemConfiguration;
}

interface MediaKeys {
  createSession(sessionType?: MediaKeySessionType): MediaKeySession;
  setServerCertificate(serverCertificate: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null): Promise<void>;
}

interface MediaList {
  readonly length: number;
  mediaText: string;
  appendMedium(medium: string): void;
  deleteMedium(medium: string): void;
  item(index: number): string | null;
  toString(): number;
  [index: number]: string;
}

interface MediaQueryList {
  readonly matches: boolean;
  readonly media: string;
  addListener(listener: MediaQueryListListener): void;
  removeListener(listener: MediaQueryListListener): void;
}

interface MediaSource extends EventTarget {
  readonly activeSourceBuffers: SourceBufferList;
  duration: number;
  readonly readyState: ReadyState;
  readonly sourceBuffers: SourceBufferList;
  addSourceBuffer(type: string): SourceBuffer;
  endOfStream(error?: EndOfStreamError): void;
  removeSourceBuffer(sourceBuffer: SourceBuffer): void;
}

interface MediaStreamEventMap {
  "active": Event;
  "addtrack": MediaStreamTrackEvent;
  "inactive": Event;
  "removetrack": MediaStreamTrackEvent;
}

interface MediaStream extends EventTarget {
  readonly active: boolean;
  readonly id: string;
  onactive: ((this: MediaStream, ev: Event) => any) | null;
  onaddtrack: ((this: MediaStream, ev: MediaStreamTrackEvent) => any) | null;
  oninactive: ((this: MediaStream, ev: Event) => any) | null;
  onremovetrack: ((this: MediaStream, ev: MediaStreamTrackEvent) => any) | null;
  addTrack(track: MediaStreamTrack): void;
  clone(): MediaStream;
  getAudioTracks(): MediaStreamTrack[];
  getTrackById(trackId: string): MediaStreamTrack | null;
  getTracks(): MediaStreamTrack[];
  getVideoTracks(): MediaStreamTrack[];
  removeTrack(track: MediaStreamTrack): void;
  stop(): void;
  addEventListener<K extends keyof MediaStreamEventMap>(type: K, listener: (this: MediaStream, ev: MediaStreamEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof MediaStreamEventMap>(type: K, listener: (this: MediaStream, ev: MediaStreamEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface MediaStreamAudioDestinationNode extends AudioNode {
  readonly stream: MediaStream;
}

interface MediaStreamAudioSourceNode extends AudioNode {
  readonly mediaStream: MediaStream;
}

interface MediaStreamError {
  readonly constraintName: string | null;
  readonly message: string | null;
  readonly name: string;
}

interface MediaStreamErrorEvent extends Event {
  readonly error: MediaStreamError | null;
}

interface MediaStreamEvent extends Event {
  readonly stream: MediaStream | null;
}

interface MediaStreamTrackEventMap {
  "ended": MediaStreamErrorEvent;
  "isolationchange": Event;
  "mute": Event;
  "overconstrained": MediaStreamErrorEvent;
  "unmute": Event;
}

interface MediaStreamTrack extends EventTarget {
  enabled: boolean;
  readonly id: string;
  readonly isolated: boolean;
  readonly kind: string;
  readonly label: string;
  readonly muted: boolean;
  onended: ((this: MediaStreamTrack, ev: MediaStreamErrorEvent) => any) | null;
  onisolationchange: ((this: MediaStreamTrack, ev: Event) => any) | null;
  onmute: ((this: MediaStreamTrack, ev: Event) => any) | null;
  onoverconstrained: ((this: MediaStreamTrack, ev: MediaStreamErrorEvent) => any) | null;
  onunmute: ((this: MediaStreamTrack, ev: Event) => any) | null;
  readonly readonly: boolean;
  readonly readyState: MediaStreamTrackState;
  readonly remote: boolean;
  applyConstraints(constraints: MediaTrackConstraints): Promise<void>;
  clone(): MediaStreamTrack;
  getCapabilities(): MediaTrackCapabilities;
  getConstraints(): MediaTrackConstraints;
  getSettings(): MediaTrackSettings;
  stop(): void;
  addEventListener<K extends keyof MediaStreamTrackEventMap>(type: K, listener: (this: MediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof MediaStreamTrackEventMap>(type: K, listener: (this: MediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface MediaStreamTrackAudioSourceNode extends AudioNode {
}

interface MediaStreamTrackEvent extends Event {
  readonly track: MediaStreamTrack;
}

interface MessageChannel {
  readonly port1: MessagePort;
  readonly port2: MessagePort;
}

interface MessageEvent extends Event {
  readonly data: any;
  readonly origin: string;
  readonly ports: ReadonlyArray<MessagePort>;
  readonly source: MessageEventSource;
  initMessageEvent(type: string, bubbles: boolean, cancelable: boolean, data: any, origin: string, lastEventId: string, source: Window): void;
}

interface MessagePortEventMap {
  "message": MessageEvent;
  "messageerror": MessageEvent;
}

interface MessagePort extends EventTarget {
  onmessage: ((this: MessagePort, ev: MessageEvent) => any) | null;
  onmessageerror: ((this: MessagePort, ev: MessageEvent) => any) | null;
  /**
   * Disconnects the port, so that it is no longer active.
   */
  close(): void;
  /**
   * Posts a message through the channel. Objects listed in transfer are
   * transferred, not just cloned, meaning that they are no longer usable on the sending side.
   * Throws a "DataCloneError" DOMException if
   * transfer contains duplicate objects or port, or if message
   * could not be cloned.
   */
  postMessage(message: any, transfer?: any[]): void;
  /**
   * Begins dispatching messages received on the port.
   */
  start(): void;
  addEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface MimeType {
  readonly description: string;
  readonly enabledPlugin: Plugin;
  readonly suffixes: string;
  readonly type: string;
}

interface MimeTypeArray {
  readonly length: number;
  item(index: number): Plugin;
  namedItem(type: string): Plugin;
  [index: number]: Plugin;
}

interface MouseEvent extends UIEvent {
  readonly altKey: boolean;
  readonly button: number;
  readonly buttons: number;
  readonly clientX: number;
  readonly clientY: number;
  readonly ctrlKey: boolean;
  /** @deprecated */
  readonly fromElement: Element;
  readonly layerX: number;
  readonly layerY: number;
  readonly metaKey: boolean;
  readonly movementX: number;
  readonly movementY: number;
  readonly offsetX: number;
  readonly offsetY: number;
  readonly pageX: number;
  readonly pageY: number;
  readonly relatedTarget: EventTarget;
  readonly screenX: number;
  readonly screenY: number;
  readonly shiftKey: boolean;
  /** @deprecated */
  readonly toElement: Element;
  /** @deprecated */
  readonly which: number;
  readonly x: number;
  readonly y: number;
  getModifierState(keyArg: string): boolean;
  initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget | null): void;
}

interface MutationEvent extends Event {
  readonly attrChange: number;
  readonly attrName: string;
  readonly newValue: string;
  readonly prevValue: string;
  readonly relatedNode: Node;
  initMutationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, relatedNodeArg: Node, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: number): void;
  readonly ADDITION: number;
  readonly MODIFICATION: number;
  readonly REMOVAL: number;
}

interface MutationObserver {
  disconnect(): void;
  observe(target: Node, options: MutationObserverInit): void;
  takeRecords(): MutationRecord[];
}

declare var MutationObserver: {
  prototype: MutationObserver;
  new(callback: MutationCallback): MutationObserver;
};

interface MutationRecord {
  readonly addedNodes: NodeList;
  readonly attributeName: string | null;
  readonly attributeNamespace: string | null;
  readonly nextSibling: Node | null;
  readonly oldValue: string | null;
  readonly previousSibling: Node | null;
  readonly removedNodes: NodeList;
  readonly target: Node;
  readonly type: MutationRecordType;
}

interface NamedNodeMap {
  readonly length: number;
  getNamedItem(qualifiedName: string): Attr | null;
  getNamedItemNS(namespace: string | null, localName: string): Attr | null;
  item(index: number): Attr | null;
  removeNamedItem(qualifiedName: string): Attr;
  removeNamedItemNS(namespace: string | null, localName: string): Attr;
  setNamedItem(attr: Attr): Attr | null;
  setNamedItemNS(attr: Attr): Attr | null;
  [index: number]: Attr;
}

interface NavigationPreloadManager {
  disable(): Promise<void>;
  enable(): Promise<void>;
  getState(): Promise<NavigationPreloadState>;
  setHeaderValue(value: string): Promise<void>;
}

interface Navigator extends NavigatorID, NavigatorOnLine, NavigatorContentUtils, NavigatorStorageUtils, MSNavigatorDoNotTrack, MSFileSaver, NavigatorBeacon, NavigatorConcurrentHardware, NavigatorUserMedia, NavigatorLanguage, NavigatorStorage {
  readonly activeVRDisplays: ReadonlyArray<VRDisplay>;
  readonly authentication: WebAuthentication;
  readonly cookieEnabled: boolean;
  readonly doNotTrack: string | null;
  gamepadInputEmulation: GamepadInputEmulationType;
  readonly geolocation: Geolocation;
  readonly maxTouchPoints: number;
  readonly mimeTypes: MimeTypeArray;
  readonly msManipulationViewsEnabled: boolean;
  readonly msMaxTouchPoints: number;
  readonly msPointerEnabled: boolean;
  readonly plugins: PluginArray;
  readonly pointerEnabled: boolean;
  readonly serviceWorker: ServiceWorkerContainer;
  readonly webdriver: boolean;
  getGamepads(): (Gamepad | null)[];
  getVRDisplays(): Promise<VRDisplay[]>;
  javaEnabled(): boolean;
  msLaunchUri(uri: string, successCallback?: MSLaunchUriCallback, noHandlerCallback?: MSLaunchUriCallback): void;
  requestMediaKeySystemAccess(keySystem: string, supportedConfigurations: MediaKeySystemConfiguration[]): Promise<MediaKeySystemAccess>;
  vibrate(pattern: number | number[]): boolean;
}

interface NavigatorBeacon {
  sendBeacon(url: string, data?: Blob | Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | FormData | string | null): boolean;
}

interface NavigatorConcurrentHardware {
  readonly hardwareConcurrency: number;
}

interface NavigatorContentUtils {
}

interface NavigatorID {
  readonly appCodeName: string;
  readonly appName: string;
  readonly appVersion: string;
  readonly platform: string;
  readonly product: string;
  readonly productSub: string;
  readonly userAgent: string;
  readonly vendor: string;
  readonly vendorSub: string;
}

interface NavigatorLanguage {
  readonly language: string;
  readonly languages: ReadonlyArray<string>;
}

interface NavigatorOnLine {
  readonly onLine: boolean;
}

interface NavigatorStorage {
  readonly storage: StorageManager;
}

interface NavigatorStorageUtils {
}

interface NavigatorUserMedia {
  readonly mediaDevices: MediaDevices;
  getDisplayMedia(constraints: MediaStreamConstraints): Promise<MediaStream>;
  getUserMedia(constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void;
}

interface Node extends EventTarget {
  readonly baseURI: string | null;
  readonly childNodes: NodeListOf<Node & ChildNode>;
  readonly firstChild: Node | null;
  readonly isConnected: boolean;
  readonly lastChild: Node | null;
  readonly localName: string | null;
  readonly namespaceURI: string | null;
  readonly nextSibling: Node | null;
  readonly nodeName: string;
  readonly nodeType: number;
  nodeValue: string | null;
  readonly ownerDocument: Document;
  readonly parentElement: HTMLElement | null;
  readonly parentNode: Node | null;
  readonly previousSibling: Node | null;
  textContent: string | null;
  appendChild<T extends Node>(newChild: T): T;
  cloneNode(deep?: boolean): Node;
  compareDocumentPosition(other: Node): number;
  contains(child: Node): boolean;
  hasChildNodes(): boolean;
  insertBefore<T extends Node>(newChild: T, refChild: Node | null): T;
  isDefaultNamespace(namespaceURI: string | null): boolean;
  isEqualNode(arg: Node): boolean;
  isSameNode(other: Node): boolean;
  lookupNamespaceURI(prefix: string | null): string | null;
  lookupPrefix(namespaceURI: string | null): string | null;
  normalize(): void;
  removeChild<T extends Node>(oldChild: T): T;
  replaceChild<T extends Node>(newChild: Node, oldChild: T): T;
  readonly ATTRIBUTE_NODE: number;
  readonly CDATA_SECTION_NODE: number;
  readonly COMMENT_NODE: number;
  readonly DOCUMENT_FRAGMENT_NODE: number;
  readonly DOCUMENT_NODE: number;
  readonly DOCUMENT_POSITION_CONTAINED_BY: number;
  readonly DOCUMENT_POSITION_CONTAINS: number;
  readonly DOCUMENT_POSITION_DISCONNECTED: number;
  readonly DOCUMENT_POSITION_FOLLOWING: number;
  readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
  readonly DOCUMENT_POSITION_PRECEDING: number;
  readonly DOCUMENT_TYPE_NODE: number;
  readonly ELEMENT_NODE: number;
  readonly ENTITY_NODE: number;
  readonly ENTITY_REFERENCE_NODE: number;
  readonly NOTATION_NODE: number;
  readonly PROCESSING_INSTRUCTION_NODE: number;
  readonly TEXT_NODE: number;
}

interface NodeFilter {
  acceptNode(node: Node): number;
}

interface NodeIterator {
  /** @deprecated */
  readonly expandEntityReferences: boolean;
  readonly filter: NodeFilter | null;
  readonly root: Node;
  readonly whatToShow: number;
  detach(): void;
  nextNode(): Node | null;
  previousNode(): Node | null;
}

interface NodeList {
  readonly length: number;
  item(index: number): Node;
  /**
   * Performs the specified action for each node in an list.
   * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.
   * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
   */
  forEach(callbackfn: (value: Node, key: number, parent: NodeList) => void, thisArg?: any): void;
  [index: number]: Node;
}

interface NodeListOf<TNode extends Node> extends NodeList {
  length: number;
  item(index: number): TNode;
  /**
   * Performs the specified action for each node in an list.
   * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.
   * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
   */
  forEach(callbackfn: (value: TNode, key: number, parent: NodeListOf<TNode>) => void, thisArg?: any): void;
  [index: number]: TNode;
}

interface NodeSelector {
  querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
  querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
  querySelector<E extends Element = Element>(selectors: string): E | null;
  querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
  querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
  querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
}

interface NotificationEventMap {
  "click": Event;
  "close": Event;
  "error": Event;
  "show": Event;
}

interface Notification extends EventTarget {
  readonly actions: ReadonlyArray<NotificationAction>;
  readonly badge: string;
  readonly body: string;
  readonly data: any;
  readonly dir: NotificationDirection;
  readonly icon: string;
  readonly image: string;
  readonly lang: string;
  onclick: ((this: Notification, ev: Event) => any) | null;
  onclose: ((this: Notification, ev: Event) => any) | null;
  onerror: ((this: Notification, ev: Event) => any) | null;
  onshow: ((this: Notification, ev: Event) => any) | null;
  readonly renotify: boolean;
  readonly requireInteraction: boolean;
  readonly silent: boolean;
  readonly tag: string;
  readonly timestamp: number;
  readonly title: string;
  readonly vibrate: ReadonlyArray<number>;
  close(): void;
  addEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface OES_element_index_uint {
}

interface OES_standard_derivatives {
  readonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;
}

interface OES_texture_float {
}

interface OES_texture_float_linear {
}

interface OES_texture_half_float {
  readonly HALF_FLOAT_OES: number;
}

interface OES_texture_half_float_linear {
}

interface OES_vertex_array_object {
  readonly VERTEX_ARRAY_BINDING_OES: number;
  bindVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES): void;
  createVertexArrayOES(): WebGLVertexArrayObjectOES;
  deleteVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES): void;
  isVertexArrayOES(value: any): value is WebGLVertexArrayObjectOES;
}

interface OfflineAudioCompletionEvent extends Event {
  readonly renderedBuffer: AudioBuffer;
}

interface OfflineAudioContextEventMap extends BaseAudioContextEventMap {
  "complete": OfflineAudioCompletionEvent;
}

interface OfflineAudioContext extends BaseAudioContext {
  readonly length: number;
  oncomplete: ((this: OfflineAudioContext, ev: OfflineAudioCompletionEvent) => any) | null;
  startRendering(): Promise<AudioBuffer>;
  suspend(suspendTime: number): Promise<void>;
  addEventListener<K extends keyof OfflineAudioContextEventMap>(type: K, listener: (this: OfflineAudioContext, ev: OfflineAudioContextEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof OfflineAudioContextEventMap>(type: K, listener: (this: OfflineAudioContext, ev: OfflineAudioContextEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface OscillatorNode extends AudioScheduledSourceNode {
  readonly detune: AudioParam;
  readonly frequency: AudioParam;
  type: OscillatorType;
  setPeriodicWave(periodicWave: PeriodicWave): void;
  addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: OscillatorNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: OscillatorNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface OverflowEvent extends UIEvent {
  readonly horizontalOverflow: boolean;
  readonly orient: number;
  readonly verticalOverflow: boolean;
  readonly BOTH: number;
  readonly HORIZONTAL: number;
  readonly VERTICAL: number;
}

interface PageTransitionEvent extends Event {
  readonly persisted: boolean;
}

interface PannerNode extends AudioNode {
  coneInnerAngle: number;
  coneOuterAngle: number;
  coneOuterGain: number;
  distanceModel: DistanceModelType;
  maxDistance: number;
  readonly orientationX: AudioParam;
  readonly orientationY: AudioParam;
  readonly orientationZ: AudioParam;
  panningModel: PanningModelType;
  readonly positionX: AudioParam;
  readonly positionY: AudioParam;
  readonly positionZ: AudioParam;
  refDistance: number;
  rolloffFactor: number;
  /** @deprecated */
  setOrientation(x: number, y: number, z: number): void;
  /** @deprecated */
  setPosition(x: number, y: number, z: number): void;
}

interface ParentNode {
  readonly childElementCount: number;
  readonly children: HTMLCollection;
  readonly firstElementChild: Element | null;
  readonly lastElementChild: Element | null;
  querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
  querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
  querySelector<E extends Element = Element>(selectors: string): E | null;
  querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
  querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
  querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
}

interface Path2D extends CanvasPathMethods {
}

interface PaymentAddress {
  readonly addressLine: string[];
  readonly city: string;
  readonly country: string;
  readonly dependentLocality: string;
  readonly languageCode: string;
  readonly organization: string;
  readonly phone: string;
  readonly postalCode: string;
  readonly recipient: string;
  readonly region: string;
  readonly sortingCode: string;
  toJSON(): any;
}

interface PaymentRequestEventMap {
  "shippingaddresschange": Event;
  "shippingoptionchange": Event;
}

interface PaymentRequest extends EventTarget {
  readonly id: string;
  onshippingaddresschange: ((this: PaymentRequest, ev: Event) => any) | null;
  onshippingoptionchange: ((this: PaymentRequest, ev: Event) => any) | null;
  readonly shippingAddress: PaymentAddress | null;
  readonly shippingOption: string | null;
  readonly shippingType: PaymentShippingType | null;
  abort(): Promise<void>;
  canMakePayment(): Promise<boolean>;
  show(): Promise<PaymentResponse>;
  addEventListener<K extends keyof PaymentRequestEventMap>(type: K, listener: (this: PaymentRequest, ev: PaymentRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof PaymentRequestEventMap>(type: K, listener: (this: PaymentRequest, ev: PaymentRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface PaymentRequestUpdateEvent extends Event {
  updateWith(detailsPromise: Promise<PaymentDetailsUpdate>): void;
}

interface PaymentResponse {
  readonly details: any;
  readonly methodName: string;
  readonly payerEmail: string | null;
  readonly payerName: string | null;
  readonly payerPhone: string | null;
  readonly requestId: string;
  readonly shippingAddress: PaymentAddress | null;
  readonly shippingOption: string | null;
  complete(result?: PaymentComplete): Promise<void>;
  toJSON(): any;
}

interface PerfWidgetExternal {
  readonly activeNetworkRequestCount: number;
  readonly averageFrameTime: number;
  readonly averagePaintTime: number;
  readonly extraInformationEnabled: boolean;
  readonly independentRenderingEnabled: boolean;
  readonly irDisablingContentString: string;
  readonly irStatusAvailable: boolean;
  readonly maxCpuSpeed: number;
  readonly paintRequestsPerSecond: number;
  readonly performanceCounter: number;
  readonly performanceCounterFrequency: number;
  addEventListener(eventType: string, callback: Function): void;
  getMemoryUsage(): number;
  getProcessCpuUsage(): number;
  getRecentCpuUsage(last: number | null): any;
  getRecentFrames(last: number | null): any;
  getRecentMemoryUsage(last: number | null): any;
  getRecentPaintRequests(last: number | null): any;
  removeEventListener(eventType: string, callback: Function): void;
  repositionWindow(x: number, y: number): void;
  resizeWindow(width: number, height: number): void;
}

interface PerformanceEventMap {
  "resourcetimingbufferfull": Event;
}

interface Performance extends EventTarget {
  /** @deprecated */
  readonly navigation: PerformanceNavigation;
  onresourcetimingbufferfull: ((this: Performance, ev: Event) => any) | null;
  readonly timeOrigin: number;
  /** @deprecated */
  readonly timing: PerformanceTiming;
  clearMarks(markName?: string): void;
  clearMeasures(measureName?: string): void;
  clearResourceTimings(): void;
  getEntries(): PerformanceEntryList;
  getEntriesByName(name: string, type?: string): PerformanceEntryList;
  getEntriesByType(type: string): PerformanceEntryList;
  mark(markName: string): void;
  measure(measureName: string, startMark?: string, endMark?: string): void;
  now(): number;
  setResourceTimingBufferSize(maxSize: number): void;
  toJSON(): any;
  addEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface PerformanceEntry {
  readonly duration: number;
  readonly entryType: string;
  readonly name: string;
  readonly startTime: number;
  toJSON(): any;
}

interface PerformanceMark extends PerformanceEntry {
}

interface PerformanceMeasure extends PerformanceEntry {
}

interface PerformanceNavigation {
  readonly redirectCount: number;
  readonly type: number;
  toJSON(): any;
  readonly TYPE_BACK_FORWARD: number;
  readonly TYPE_NAVIGATE: number;
  readonly TYPE_RELOAD: number;
  readonly TYPE_RESERVED: number;
}

interface PerformanceNavigationTiming extends PerformanceResourceTiming {
  readonly domComplete: number;
  readonly domContentLoadedEventEnd: number;
  readonly domContentLoadedEventStart: number;
  readonly domInteractive: number;
  readonly loadEventEnd: number;
  readonly loadEventStart: number;
  readonly redirectCount: number;
  readonly type: NavigationType;
  readonly unloadEventEnd: number;
  readonly unloadEventStart: number;
  toJSON(): any;
}

interface PerformanceObserver {
  disconnect(): void;
  observe(options: PerformanceObserverInit): void;
  takeRecords(): PerformanceEntryList;
}

interface PerformanceObserverEntryList {
  getEntries(): PerformanceEntryList;
  getEntriesByName(name: string, type?: string): PerformanceEntryList;
  getEntriesByType(type: string): PerformanceEntryList;
}

interface PerformanceResourceTiming extends PerformanceEntry {
  readonly connectEnd: number;
  readonly connectStart: number;
  readonly decodedBodySize: number;
  readonly domainLookupEnd: number;
  readonly domainLookupStart: number;
  readonly encodedBodySize: number;
  readonly fetchStart: number;
  readonly initiatorType: string;
  readonly nextHopProtocol: string;
  readonly redirectEnd: number;
  readonly redirectStart: number;
  readonly requestStart: number;
  readonly responseEnd: number;
  readonly responseStart: number;
  readonly secureConnectionStart: number;
  readonly transferSize: number;
  readonly workerStart: number;
  toJSON(): any;
}

interface PerformanceTiming {
  readonly connectEnd: number;
  readonly connectStart: number;
  readonly domComplete: number;
  readonly domContentLoadedEventEnd: number;
  readonly domContentLoadedEventStart: number;
  readonly domInteractive: number;
  readonly domLoading: number;
  readonly domainLookupEnd: number;
  readonly domainLookupStart: number;
  readonly fetchStart: number;
  readonly loadEventEnd: number;
  readonly loadEventStart: number;
  readonly navigationStart: number;
  readonly redirectEnd: number;
  readonly redirectStart: number;
  readonly requestStart: number;
  readonly responseEnd: number;
  readonly responseStart: number;
  readonly secureConnectionStart: number;
  readonly unloadEventEnd: number;
  readonly unloadEventStart: number;
  toJSON(): any;
}

interface PeriodicWave {
}

interface PermissionRequest extends DeferredPermissionRequest {
  readonly state: MSWebViewPermissionState;
  defer(): void;
}

interface PermissionRequestedEvent extends Event {
  readonly permissionRequest: PermissionRequest;
}

interface Plugin {
  readonly description: string;
  readonly filename: string;
  readonly length: number;
  readonly name: string;
  readonly version: string;
  item(index: number): MimeType;
  namedItem(type: string): MimeType;
  [index: number]: MimeType;
}

interface PluginArray {
  readonly length: number;
  item(index: number): Plugin;
  namedItem(name: string): Plugin;
  refresh(reload?: boolean): void;
  [index: number]: Plugin;
}

interface PointerEvent extends MouseEvent {
  readonly height: number;
  readonly isPrimary: boolean;
  readonly pointerId: number;
  readonly pointerType: string;
  readonly pressure: number;
  readonly tangentialPressure: number;
  readonly tiltX: number;
  readonly tiltY: number;
  readonly twist: number;
  readonly width: number;
}

interface PopStateEvent extends Event {
  readonly state: any;
}

interface Position {
  readonly coords: Coordinates;
  readonly timestamp: number;
}

interface PositionError {
  readonly code: number;
  readonly message: string;
  readonly PERMISSION_DENIED: number;
  readonly POSITION_UNAVAILABLE: number;
  readonly TIMEOUT: number;
}

interface ProcessingInstruction extends CharacterData {
  readonly target: string;
}

interface ProgressEvent extends Event {
  readonly lengthComputable: boolean;
  readonly loaded: number;
  readonly total: number;
}

interface PromiseRejectionEvent extends Event {
  readonly promise: PromiseLike<any>;
  readonly reason: any;
}

interface PushManager {
  getSubscription(): Promise<PushSubscription | null>;
  permissionState(options?: PushSubscriptionOptionsInit): Promise<PushPermissionState>;
  subscribe(options?: PushSubscriptionOptionsInit): Promise<PushSubscription>;
}

interface PushSubscription {
  readonly endpoint: string;
  readonly expirationTime: number | null;
  readonly options: PushSubscriptionOptions;
  getKey(name: PushEncryptionKeyName): ArrayBuffer | null;
  toJSON(): PushSubscriptionJSON;
  unsubscribe(): Promise<boolean>;
}

interface PushSubscriptionOptions {
  readonly applicationServerKey: ArrayBuffer | null;
  readonly userVisibleOnly: boolean;
}

interface RTCCertificate {
  readonly expires: number;
  getFingerprints(): RTCDtlsFingerprint[];
}

interface RTCDTMFSenderEventMap {
  "tonechange": RTCDTMFToneChangeEvent;
}

interface RTCDTMFSender extends EventTarget {
  readonly canInsertDTMF: boolean;
  ontonechange: ((this: RTCDTMFSender, ev: RTCDTMFToneChangeEvent) => any) | null;
  readonly toneBuffer: string;
  insertDTMF(tones: string, duration?: number, interToneGap?: number): void;
  addEventListener<K extends keyof RTCDTMFSenderEventMap>(type: K, listener: (this: RTCDTMFSender, ev: RTCDTMFSenderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof RTCDTMFSenderEventMap>(type: K, listener: (this: RTCDTMFSender, ev: RTCDTMFSenderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface RTCDTMFToneChangeEvent extends Event {
  readonly tone: string;
}

interface RTCDataChannelEventMap {
  "bufferedamountlow": Event;
  "close": Event;
  "error": RTCErrorEvent;
  "message": MessageEvent;
  "open": Event;
}

interface RTCDataChannel extends EventTarget {
  binaryType: string;
  readonly bufferedAmount: number;
  bufferedAmountLowThreshold: number;
  readonly id: number | null;
  readonly label: string;
  readonly maxPacketLifeTime: number | null;
  readonly maxRetransmits: number | null;
  readonly negotiated: boolean;
  onbufferedamountlow: ((this: RTCDataChannel, ev: Event) => any) | null;
  onclose: ((this: RTCDataChannel, ev: Event) => any) | null;
  onerror: ((this: RTCDataChannel, ev: RTCErrorEvent) => any) | null;
  onmessage: ((this: RTCDataChannel, ev: MessageEvent) => any) | null;
  onopen: ((this: RTCDataChannel, ev: Event) => any) | null;
  readonly ordered: boolean;
  readonly priority: RTCPriorityType;
  readonly protocol: string;
  readonly readyState: RTCDataChannelState;
  close(): void;
  send(data: string): void;
  send(data: Blob): void;
  send(data: ArrayBuffer): void;
  send(data: ArrayBufferView): void;
  addEventListener<K extends keyof RTCDataChannelEventMap>(type: K, listener: (this: RTCDataChannel, ev: RTCDataChannelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof RTCDataChannelEventMap>(type: K, listener: (this: RTCDataChannel, ev: RTCDataChannelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface RTCDataChannelEvent extends Event {
  readonly channel: RTCDataChannel;
}

interface RTCDtlsTransportEventMap {
  "error": RTCErrorEvent;
  "statechange": Event;
}

interface RTCDtlsTransport extends EventTarget {
  onerror: ((this: RTCDtlsTransport, ev: RTCErrorEvent) => any) | null;
  onstatechange: ((this: RTCDtlsTransport, ev: Event) => any) | null;
  readonly state: RTCDtlsTransportState;
  readonly transport: RTCIceTransport;
  getRemoteCertificates(): ArrayBuffer[];
  addEventListener<K extends keyof RTCDtlsTransportEventMap>(type: K, listener: (this: RTCDtlsTransport, ev: RTCDtlsTransportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof RTCDtlsTransportEventMap>(type: K, listener: (this: RTCDtlsTransport, ev: RTCDtlsTransportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface RTCDtlsTransportStateChangedEvent extends Event {
  readonly state: RTCDtlsTransportState;
}

interface RTCDtmfSenderEventMap {
  "tonechange": RTCDTMFToneChangeEvent;
}

interface RTCDtmfSender extends EventTarget {
  readonly canInsertDTMF: boolean;
  readonly duration: number;
  readonly interToneGap: number;
  ontonechange: ((this: RTCDtmfSender, ev: RTCDTMFToneChangeEvent) => any) | null;
  readonly sender: RTCRtpSender;
  readonly toneBuffer: string;
  insertDTMF(tones: string, duration?: number, interToneGap?: number): void;
  addEventListener<K extends keyof RTCDtmfSenderEventMap>(type: K, listener: (this: RTCDtmfSender, ev: RTCDtmfSenderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof RTCDtmfSenderEventMap>(type: K, listener: (this: RTCDtmfSender, ev: RTCDtmfSenderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface RTCError extends Error {
  errorDetail: string;
  httpRequestStatusCode: number;
  message: string;
  name: string;
  receivedAlert: number | null;
  sctpCauseCode: number;
  sdpLineNumber: number;
  sentAlert: number | null;
}

interface RTCErrorEvent extends Event {
  readonly error: RTCError | null;
}

interface RTCIceCandidate {
  readonly candidate: string;
  readonly component: RTCIceComponent | null;
  readonly foundation: string | null;
  readonly ip: string | null;
  readonly port: number | null;
  readonly priority: number | null;
  readonly protocol: RTCIceProtocol | null;
  readonly relatedAddress: string | null;
  readonly relatedPort: number | null;
  readonly sdpMLineIndex: number | null;
  readonly sdpMid: string | null;
  readonly tcpType: RTCIceTcpCandidateType | null;
  readonly type: RTCIceCandidateType | null;
  readonly usernameFragment: string | null;
  toJSON(): RTCIceCandidateInit;
}

interface RTCIceCandidatePairChangedEvent extends Event {
  readonly pair: RTCIceCandidatePair;
}

interface RTCIceGathererEventMap {
  "error": Event;
  "localcandidate": RTCIceGathererEvent;
}

interface RTCIceGatherer extends RTCStatsProvider {
  readonly component: RTCIceComponent;
  onerror: ((this: RTCIceGatherer, ev: Event) => any) | null;
  onlocalcandidate: ((this: RTCIceGatherer, ev: RTCIceGathererEvent) => any) | null;
  createAssociatedGatherer(): RTCIceGatherer;
  getLocalCandidates(): RTCIceCandidateDictionary[];
  getLocalParameters(): RTCIceParameters;
  addEventListener<K extends keyof RTCIceGathererEventMap>(type: K, listener: (this: RTCIceGatherer, ev: RTCIceGathererEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof RTCIceGathererEventMap>(type: K, listener: (this: RTCIceGatherer, ev: RTCIceGathererEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface RTCIceGathererEvent extends Event {
  readonly candidate: RTCIceCandidateDictionary | RTCIceCandidateComplete;
}

interface RTCIceTransportEventMap {
  "gatheringstatechange": Event;
  "selectedcandidatepairchange": Event;
  "statechange": Event;
}

interface RTCIceTransport extends EventTarget {
  readonly component: RTCIceComponent;
  readonly gatheringState: RTCIceGathererState;
  ongatheringstatechange: ((this: RTCIceTransport, ev: Event) => any) | null;
  onselectedcandidatepairchange: ((this: RTCIceTransport, ev: Event) => any) | null;
  onstatechange: ((this: RTCIceTransport, ev: Event) => any) | null;
  readonly role: RTCIceRole;
  readonly state: RTCIceTransportState;
  getLocalCandidates(): RTCIceCandidate[];
  getLocalParameters(): RTCIceParameters | null;
  getRemoteCandidates(): RTCIceCandidate[];
  getRemoteParameters(): RTCIceParameters | null;
  getSelectedCandidatePair(): RTCIceCandidatePair | null;
  addEventListener<K extends keyof RTCIceTransportEventMap>(type: K, listener: (this: RTCIceTransport, ev: RTCIceTransportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof RTCIceTransportEventMap>(type: K, listener: (this: RTCIceTransport, ev: RTCIceTransportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface RTCIceTransportStateChangedEvent extends Event {
  readonly state: RTCIceTransportState;
}

interface RTCIdentityAssertion {
  idp: string;
  name: string;
}

interface RTCPeerConnectionEventMap {
  "connectionstatechange": Event;
  "datachannel": RTCDataChannelEvent;
  "icecandidate": RTCPeerConnectionIceEvent;
  "icecandidateerror": RTCPeerConnectionIceErrorEvent;
  "iceconnectionstatechange": Event;
  "icegatheringstatechange": Event;
  "negotiationneeded": Event;
  "signalingstatechange": Event;
  "statsended": RTCStatsEvent;
  "track": RTCTrackEvent;
}

interface RTCPeerConnection extends EventTarget {
  readonly canTrickleIceCandidates: boolean | null;
  readonly connectionState: RTCPeerConnectionState;
  readonly currentLocalDescription: RTCSessionDescription | null;
  readonly currentRemoteDescription: RTCSessionDescription | null;
  readonly iceConnectionState: RTCIceConnectionState;
  readonly iceGatheringState: RTCIceGatheringState;
  readonly idpErrorInfo: string | null;
  readonly idpLoginUrl: string | null;
  readonly localDescription: RTCSessionDescription | null;
  onconnectionstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;
  ondatachannel: ((this: RTCPeerConnection, ev: RTCDataChannelEvent) => any) | null;
  onicecandidate: ((this: RTCPeerConnection, ev: RTCPeerConnectionIceEvent) => any) | null;
  onicecandidateerror: ((this: RTCPeerConnection, ev: RTCPeerConnectionIceErrorEvent) => any) | null;
  oniceconnectionstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;
  onicegatheringstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;
  onnegotiationneeded: ((this: RTCPeerConnection, ev: Event) => any) | null;
  onsignalingstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;
  onstatsended: ((this: RTCPeerConnection, ev: RTCStatsEvent) => any) | null;
  ontrack: ((this: RTCPeerConnection, ev: RTCTrackEvent) => any) | null;
  readonly peerIdentity: Promise<RTCIdentityAssertion>;
  readonly pendingLocalDescription: RTCSessionDescription | null;
  readonly pendingRemoteDescription: RTCSessionDescription | null;
  readonly remoteDescription: RTCSessionDescription | null;
  readonly sctp: RTCSctpTransport | null;
  readonly signalingState: RTCSignalingState;
  addIceCandidate(candidate: RTCIceCandidateInit | RTCIceCandidate): Promise<void>;
  addTrack(track: MediaStreamTrack, ...streams: MediaStream[]): RTCRtpSender;
  addTransceiver(trackOrKind: MediaStreamTrack | string, init?: RTCRtpTransceiverInit): RTCRtpTransceiver;
  close(): void;
  createAnswer(options?: RTCOfferOptions): Promise<RTCSessionDescriptionInit>;
  createDataChannel(label: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel;
  createOffer(options?: RTCOfferOptions): Promise<RTCSessionDescriptionInit>;
  getConfiguration(): RTCConfiguration;
  getIdentityAssertion(): Promise<string>;
  getReceivers(): RTCRtpReceiver[];
  getSenders(): RTCRtpSender[];
  getStats(selector?: MediaStreamTrack | null): Promise<RTCStatsReport>;
  getTransceivers(): RTCRtpTransceiver[];
  removeTrack(sender: RTCRtpSender): void;
  setConfiguration(configuration: RTCConfiguration): void;
  setIdentityProvider(provider: string, options?: RTCIdentityProviderOptions): void;
  setLocalDescription(description: RTCSessionDescriptionInit): Promise<void>;
  setRemoteDescription(description: RTCSessionDescriptionInit): Promise<void>;
  addEventListener<K extends keyof RTCPeerConnectionEventMap>(type: K, listener: (this: RTCPeerConnection, ev: RTCPeerConnectionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof RTCPeerConnectionEventMap>(type: K, listener: (this: RTCPeerConnection, ev: RTCPeerConnectionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface RTCPeerConnectionIceErrorEvent extends Event {
  readonly errorCode: number;
  readonly errorText: string;
  readonly hostCandidate: string;
  readonly url: string;
}

interface RTCPeerConnectionIceEvent extends Event {
  readonly candidate: RTCIceCandidate | null;
  readonly url: string | null;
}

interface RTCRtpReceiver {
  readonly rtcpTransport: RTCDtlsTransport | null;
  readonly track: MediaStreamTrack;
  readonly transport: RTCDtlsTransport | null;
  getContributingSources(): RTCRtpContributingSource[];
  getParameters(): RTCRtpReceiveParameters;
  getStats(): Promise<RTCStatsReport>;
  getSynchronizationSources(): RTCRtpSynchronizationSource[];
}

interface RTCRtpSender {
  readonly dtmf: RTCDTMFSender | null;
  readonly rtcpTransport: RTCDtlsTransport | null;
  readonly track: MediaStreamTrack | null;
  readonly transport: RTCDtlsTransport | null;
  getParameters(): RTCRtpSendParameters;
  getStats(): Promise<RTCStatsReport>;
  replaceTrack(withTrack: MediaStreamTrack | null): Promise<void>;
  setParameters(parameters: RTCRtpSendParameters): Promise<void>;
  setStreams(...streams: MediaStream[]): void;
}

interface RTCRtpTransceiver {
  readonly currentDirection: RTCRtpTransceiverDirection | null;
  direction: RTCRtpTransceiverDirection;
  readonly mid: string | null;
  readonly receiver: RTCRtpReceiver;
  readonly sender: RTCRtpSender;
  readonly stopped: boolean;
  setCodecPreferences(codecs: RTCRtpCodecCapability[]): void;
  stop(): void;
}

interface RTCSctpTransportEventMap {
  "statechange": Event;
}

interface RTCSctpTransport {
  readonly maxChannels: number | null;
  readonly maxMessageSize: number;
  onstatechange: ((this: RTCSctpTransport, ev: Event) => any) | null;
  readonly state: RTCSctpTransportState;
  readonly transport: RTCDtlsTransport;
  addEventListener<K extends keyof RTCSctpTransportEventMap>(type: K, listener: (this: RTCSctpTransport, ev: RTCSctpTransportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof RTCSctpTransportEventMap>(type: K, listener: (this: RTCSctpTransport, ev: RTCSctpTransportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface RTCSessionDescription {
  readonly sdp: string;
  readonly type: RTCSdpType;
  toJSON(): any;
}

interface RTCSrtpSdesTransportEventMap {
  "error": Event;
}

interface RTCSrtpSdesTransport extends EventTarget {
  onerror: ((this: RTCSrtpSdesTransport, ev: Event) => any) | null;
  readonly transport: RTCIceTransport;
  addEventListener<K extends keyof RTCSrtpSdesTransportEventMap>(type: K, listener: (this: RTCSrtpSdesTransport, ev: RTCSrtpSdesTransportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof RTCSrtpSdesTransportEventMap>(type: K, listener: (this: RTCSrtpSdesTransport, ev: RTCSrtpSdesTransportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface RTCSsrcConflictEvent extends Event {
  readonly ssrc: number;
}

interface RTCStatsEvent extends Event {
  readonly report: RTCStatsReport;
}

interface RTCStatsProvider extends EventTarget {
  getStats(): Promise<RTCStatsReport>;
  msGetStats(): Promise<RTCStatsReport>;
}

interface RTCStatsReport {
  forEach(callbackfn: (value: any, key: string, parent: RTCStatsReport) => void, thisArg?: any): void;
}

interface RTCTrackEvent extends Event {
  readonly receiver: RTCRtpReceiver;
  readonly streams: ReadonlyArray<MediaStream>;
  readonly track: MediaStreamTrack;
  readonly transceiver: RTCRtpTransceiver;
}

interface RadioNodeList extends NodeList {
  value: string;
}

interface RandomSource {
  getRandomValues<T extends Int8Array | Uint8ClampedArray | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array>(array: T): T;
}

interface Range {
  readonly collapsed: boolean;
  readonly commonAncestorContainer: Node;
  readonly endContainer: Node;
  readonly endOffset: number;
  readonly startContainer: Node;
  readonly startOffset: number;
  cloneContents(): DocumentFragment;
  cloneRange(): Range;
  collapse(toStart?: boolean): void;
  compareBoundaryPoints(how: number, sourceRange: Range): number;
  createContextualFragment(fragment: string): DocumentFragment;
  deleteContents(): void;
  detach(): void;
  expand(Unit: ExpandGranularity): boolean;
  extractContents(): DocumentFragment;
  getBoundingClientRect(): ClientRect | DOMRect;
  getClientRects(): ClientRectList | DOMRectList;
  insertNode(node: Node): void;
  isPointInRange(node: Node, offset: number): boolean;
  selectNode(node: Node): void;
  selectNodeContents(node: Node): void;
  setEnd(node: Node, offset: number): void;
  setEndAfter(node: Node): void;
  setEndBefore(node: Node): void;
  setStart(node: Node, offset: number): void;
  setStartAfter(node: Node): void;
  setStartBefore(node: Node): void;
  surroundContents(newParent: Node): void;
  toString(): string;
  readonly END_TO_END: number;
  readonly END_TO_START: number;
  readonly START_TO_END: number;
  readonly START_TO_START: number;
}

interface ReadableStream {
  readonly locked: boolean;
  cancel(): Promise<void>;
  getReader(): ReadableStreamReader;
}

interface ReadableStreamReader {
  cancel(): Promise<void>;
  read(): Promise<any>;
  releaseLock(): void;
}

interface Request extends Body {
  /**
   * Returns the cache mode associated with request, which is a string indicating
   * how the the request will interact with the browser's cache when fetching.
   */
  readonly cache: RequestCache;
  /**
   * Returns the credentials mode associated with request, which is a string
   * indicating whether credentials will be sent with the request always, never, or only when sent to a
   * same-origin URL.
   */
  readonly credentials: RequestCredentials;
  /**
   * Returns the kind of resource requested by request, e.g., "document" or
   * "script".
   */
  readonly destination: RequestDestination;
  /**
   * Returns a Headers object consisting of the headers associated with request.
   * Note that headers added in the network layer by the user agent will not be accounted for in this
   * object, e.g., the "Host" header.
   */
  readonly headers: Headers;
  /**
   * Returns request's subresource integrity metadata, which is a cryptographic hash of
   * the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]
   */
  readonly integrity: string;
  /**
   * Returns a boolean indicating whether or not request is for a history
   * navigation (a.k.a. back-foward navigation).
   */
  readonly isHistoryNavigation: boolean;
  /**
   * Returns a boolean indicating whether or not request is for a reload navigation.
   */
  readonly isReloadNavigation: boolean;
  /**
   * Returns a boolean indicating whether or not request can outlive the global in which
   * it was created.
   */
  readonly keepalive: boolean;
  /**
   * Returns request's HTTP method, which is "GET" by default.
   */
  readonly method: string;
  /**
   * Returns the mode associated with request, which is a string indicating
   * whether the request will use CORS, or will be restricted to same-origin URLs.
   */
  readonly mode: RequestMode;
  /**
   * Returns the redirect mode associated with request, which is a string
   * indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.
   */
  readonly redirect: RequestRedirect;
  /**
   * Returns the referrer of request. Its value can be a same-origin URL if
   * explicitly set in init, the empty string to indicate no referrer, and
   * "about:client" when defaulting to the global's default. This is used during
   * fetching to determine the value of the `Referer` header of the request being made.
   */
  readonly referrer: string;
  /**
   * Returns the referrer policy associated with request. This is used during
   * fetching to compute the value of the request's referrer.
   */
  readonly referrerPolicy: ReferrerPolicy;
  /**
   * Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort
   * event handler.
   */
  readonly signal: AbortSignal;
  /**
   * Returns the URL of request as a string.
   */
  readonly url: string;
  clone(): Request;
}

interface Response extends Body {
  readonly headers: Headers;
  readonly ok: boolean;
  readonly redirected: boolean;
  readonly status: number;
  readonly statusText: string;
  readonly trailer: Promise<Headers>;
  readonly type: ResponseType;
  readonly url: string;
  clone(): Response;
}

interface SVGAElement extends SVGGraphicsElement, SVGURIReference {
  readonly target: SVGAnimatedString;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGAngle {
  readonly unitType: number;
  value: number;
  valueAsString: string;
  valueInSpecifiedUnits: number;
  convertToSpecifiedUnits(unitType: number): void;
  newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;
  readonly SVG_ANGLETYPE_DEG: number;
  readonly SVG_ANGLETYPE_GRAD: number;
  readonly SVG_ANGLETYPE_RAD: number;
  readonly SVG_ANGLETYPE_UNKNOWN: number;
  readonly SVG_ANGLETYPE_UNSPECIFIED: number;
}

interface SVGAnimatedAngle {
  readonly animVal: SVGAngle;
  readonly baseVal: SVGAngle;
}

interface SVGAnimatedBoolean {
  readonly animVal: boolean;
  baseVal: boolean;
}

interface SVGAnimatedEnumeration {
  readonly animVal: number;
  baseVal: number;
}

interface SVGAnimatedInteger {
  readonly animVal: number;
  baseVal: number;
}

interface SVGAnimatedLength {
  readonly animVal: SVGLength;
  readonly baseVal: SVGLength;
}

interface SVGAnimatedLengthList {
  readonly animVal: SVGLengthList;
  readonly baseVal: SVGLengthList;
}

interface SVGAnimatedNumber {
  readonly animVal: number;
  baseVal: number;
}

interface SVGAnimatedNumberList {
  readonly animVal: SVGNumberList;
  readonly baseVal: SVGNumberList;
}

interface SVGAnimatedPoints {
  readonly animatedPoints: SVGPointList;
  readonly points: SVGPointList;
}

interface SVGAnimatedPreserveAspectRatio {
  readonly animVal: SVGPreserveAspectRatio;
  readonly baseVal: SVGPreserveAspectRatio;
}

interface SVGAnimatedRect {
  readonly animVal: SVGRect;
  readonly baseVal: SVGRect;
}

interface SVGAnimatedString {
  readonly animVal: string;
  baseVal: string;
}

interface SVGAnimatedTransformList {
  readonly animVal: SVGTransformList;
  readonly baseVal: SVGTransformList;
}

interface SVGCircleElement extends SVGGraphicsElement {
  readonly cx: SVGAnimatedLength;
  readonly cy: SVGAnimatedLength;
  readonly r: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGCircleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGCircleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGClipPathElement extends SVGGraphicsElement, SVGUnitTypes {
  readonly clipPathUnits: SVGAnimatedEnumeration;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGClipPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGClipPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGComponentTransferFunctionElement extends SVGElement {
  readonly amplitude: SVGAnimatedNumber;
  readonly exponent: SVGAnimatedNumber;
  readonly intercept: SVGAnimatedNumber;
  readonly offset: SVGAnimatedNumber;
  readonly slope: SVGAnimatedNumber;
  readonly tableValues: SVGAnimatedNumberList;
  readonly type: SVGAnimatedEnumeration;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGComponentTransferFunctionElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGComponentTransferFunctionElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGDefsElement extends SVGGraphicsElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDefsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDefsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGDescElement extends SVGElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDescElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDescElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGElementEventMap extends ElementEventMap {
  "click": MouseEvent;
  "dblclick": MouseEvent;
  "focusin": FocusEvent;
  "focusout": FocusEvent;
  "load": Event;
  "mousedown": MouseEvent;
  "mousemove": MouseEvent;
  "mouseout": MouseEvent;
  "mouseover": MouseEvent;
  "mouseup": MouseEvent;
}

interface SVGElement extends Element, ElementCSSInlineStyle {
  readonly className: any;
  onclick: ((this: SVGElement, ev: MouseEvent) => any) | null;
  ondblclick: ((this: SVGElement, ev: MouseEvent) => any) | null;
  onfocusin: ((this: SVGElement, ev: FocusEvent) => any) | null;
  onfocusout: ((this: SVGElement, ev: FocusEvent) => any) | null;
  onload: ((this: SVGElement, ev: Event) => any) | null;
  onmousedown: ((this: SVGElement, ev: MouseEvent) => any) | null;
  onmousemove: ((this: SVGElement, ev: MouseEvent) => any) | null;
  onmouseout: ((this: SVGElement, ev: MouseEvent) => any) | null;
  onmouseover: ((this: SVGElement, ev: MouseEvent) => any) | null;
  onmouseup: ((this: SVGElement, ev: MouseEvent) => any) | null;
  readonly ownerSVGElement: SVGSVGElement | null;
  readonly viewportElement: SVGElement | null;
  /** @deprecated */
  xmlbase: string;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGElementInstance extends EventTarget {
  readonly childNodes: SVGElementInstanceList;
  readonly correspondingElement: SVGElement;
  readonly correspondingUseElement: SVGUseElement;
  readonly firstChild: SVGElementInstance;
  readonly lastChild: SVGElementInstance;
  readonly nextSibling: SVGElementInstance;
  readonly parentNode: SVGElementInstance;
  readonly previousSibling: SVGElementInstance;
}

interface SVGElementInstanceList {
  /** @deprecated */
  readonly length: number;
  /** @deprecated */
  item(index: number): SVGElementInstance;
}

interface SVGEllipseElement extends SVGGraphicsElement {
  readonly cx: SVGAnimatedLength;
  readonly cy: SVGAnimatedLength;
  readonly rx: SVGAnimatedLength;
  readonly ry: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGEllipseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGEllipseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEBlendElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly in2: SVGAnimatedString;
  readonly mode: SVGAnimatedEnumeration;
  readonly SVG_FEBLEND_MODE_COLOR: number;
  readonly SVG_FEBLEND_MODE_COLOR_BURN: number;
  readonly SVG_FEBLEND_MODE_COLOR_DODGE: number;
  readonly SVG_FEBLEND_MODE_DARKEN: number;
  readonly SVG_FEBLEND_MODE_DIFFERENCE: number;
  readonly SVG_FEBLEND_MODE_EXCLUSION: number;
  readonly SVG_FEBLEND_MODE_HARD_LIGHT: number;
  readonly SVG_FEBLEND_MODE_HUE: number;
  readonly SVG_FEBLEND_MODE_LIGHTEN: number;
  readonly SVG_FEBLEND_MODE_LUMINOSITY: number;
  readonly SVG_FEBLEND_MODE_MULTIPLY: number;
  readonly SVG_FEBLEND_MODE_NORMAL: number;
  readonly SVG_FEBLEND_MODE_OVERLAY: number;
  readonly SVG_FEBLEND_MODE_SATURATION: number;
  readonly SVG_FEBLEND_MODE_SCREEN: number;
  readonly SVG_FEBLEND_MODE_SOFT_LIGHT: number;
  readonly SVG_FEBLEND_MODE_UNKNOWN: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEBlendElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEBlendElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEColorMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly type: SVGAnimatedEnumeration;
  readonly values: SVGAnimatedNumberList;
  readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;
  readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;
  readonly SVG_FECOLORMATRIX_TYPE_MATRIX: number;
  readonly SVG_FECOLORMATRIX_TYPE_SATURATE: number;
  readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEColorMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEColorMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEComponentTransferElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEComponentTransferElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEComponentTransferElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFECompositeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly in2: SVGAnimatedString;
  readonly k1: SVGAnimatedNumber;
  readonly k2: SVGAnimatedNumber;
  readonly k3: SVGAnimatedNumber;
  readonly k4: SVGAnimatedNumber;
  readonly operator: SVGAnimatedEnumeration;
  readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;
  readonly SVG_FECOMPOSITE_OPERATOR_ATOP: number;
  readonly SVG_FECOMPOSITE_OPERATOR_IN: number;
  readonly SVG_FECOMPOSITE_OPERATOR_OUT: number;
  readonly SVG_FECOMPOSITE_OPERATOR_OVER: number;
  readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;
  readonly SVG_FECOMPOSITE_OPERATOR_XOR: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFECompositeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFECompositeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEConvolveMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly bias: SVGAnimatedNumber;
  readonly divisor: SVGAnimatedNumber;
  readonly edgeMode: SVGAnimatedEnumeration;
  readonly in1: SVGAnimatedString;
  readonly kernelMatrix: SVGAnimatedNumberList;
  readonly kernelUnitLengthX: SVGAnimatedNumber;
  readonly kernelUnitLengthY: SVGAnimatedNumber;
  readonly orderX: SVGAnimatedInteger;
  readonly orderY: SVGAnimatedInteger;
  readonly preserveAlpha: SVGAnimatedBoolean;
  readonly targetX: SVGAnimatedInteger;
  readonly targetY: SVGAnimatedInteger;
  readonly SVG_EDGEMODE_DUPLICATE: number;
  readonly SVG_EDGEMODE_NONE: number;
  readonly SVG_EDGEMODE_UNKNOWN: number;
  readonly SVG_EDGEMODE_WRAP: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEConvolveMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEConvolveMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEDiffuseLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly diffuseConstant: SVGAnimatedNumber;
  readonly in1: SVGAnimatedString;
  readonly kernelUnitLengthX: SVGAnimatedNumber;
  readonly kernelUnitLengthY: SVGAnimatedNumber;
  readonly surfaceScale: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDiffuseLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDiffuseLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEDisplacementMapElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly in2: SVGAnimatedString;
  readonly scale: SVGAnimatedNumber;
  readonly xChannelSelector: SVGAnimatedEnumeration;
  readonly yChannelSelector: SVGAnimatedEnumeration;
  readonly SVG_CHANNEL_A: number;
  readonly SVG_CHANNEL_B: number;
  readonly SVG_CHANNEL_G: number;
  readonly SVG_CHANNEL_R: number;
  readonly SVG_CHANNEL_UNKNOWN: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDisplacementMapElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDisplacementMapElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEDistantLightElement extends SVGElement {
  readonly azimuth: SVGAnimatedNumber;
  readonly elevation: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDistantLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDistantLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEFloodElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFloodElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFloodElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEFuncAElement extends SVGComponentTransferFunctionElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEFuncBElement extends SVGComponentTransferFunctionElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncBElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncBElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEFuncGElement extends SVGComponentTransferFunctionElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEFuncRElement extends SVGComponentTransferFunctionElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncRElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncRElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEGaussianBlurElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly stdDeviationX: SVGAnimatedNumber;
  readonly stdDeviationY: SVGAnimatedNumber;
  setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEGaussianBlurElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEGaussianBlurElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEImageElement extends SVGElement, SVGFilterPrimitiveStandardAttributes, SVGURIReference {
  readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEMergeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEMergeNodeElement extends SVGElement {
  readonly in1: SVGAnimatedString;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeNodeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeNodeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly operator: SVGAnimatedEnumeration;
  readonly radiusX: SVGAnimatedNumber;
  readonly radiusY: SVGAnimatedNumber;
  readonly SVG_MORPHOLOGY_OPERATOR_DILATE: number;
  readonly SVG_MORPHOLOGY_OPERATOR_ERODE: number;
  readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMorphologyElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMorphologyElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEOffsetElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly dx: SVGAnimatedNumber;
  readonly dy: SVGAnimatedNumber;
  readonly in1: SVGAnimatedString;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEOffsetElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEOffsetElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFEPointLightElement extends SVGElement {
  readonly x: SVGAnimatedNumber;
  readonly y: SVGAnimatedNumber;
  readonly z: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEPointLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEPointLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFESpecularLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly kernelUnitLengthX: SVGAnimatedNumber;
  readonly kernelUnitLengthY: SVGAnimatedNumber;
  readonly specularConstant: SVGAnimatedNumber;
  readonly specularExponent: SVGAnimatedNumber;
  readonly surfaceScale: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpecularLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpecularLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFESpotLightElement extends SVGElement {
  readonly limitingConeAngle: SVGAnimatedNumber;
  readonly pointsAtX: SVGAnimatedNumber;
  readonly pointsAtY: SVGAnimatedNumber;
  readonly pointsAtZ: SVGAnimatedNumber;
  readonly specularExponent: SVGAnimatedNumber;
  readonly x: SVGAnimatedNumber;
  readonly y: SVGAnimatedNumber;
  readonly z: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpotLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpotLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFETileElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETileElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETileElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFETurbulenceElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  readonly baseFrequencyX: SVGAnimatedNumber;
  readonly baseFrequencyY: SVGAnimatedNumber;
  readonly numOctaves: SVGAnimatedInteger;
  readonly seed: SVGAnimatedNumber;
  readonly stitchTiles: SVGAnimatedEnumeration;
  readonly type: SVGAnimatedEnumeration;
  readonly SVG_STITCHTYPE_NOSTITCH: number;
  readonly SVG_STITCHTYPE_STITCH: number;
  readonly SVG_STITCHTYPE_UNKNOWN: number;
  readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: number;
  readonly SVG_TURBULENCE_TYPE_TURBULENCE: number;
  readonly SVG_TURBULENCE_TYPE_UNKNOWN: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETurbulenceElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETurbulenceElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFilterElement extends SVGElement, SVGUnitTypes, SVGURIReference {
  /** @deprecated */
  readonly filterResX: SVGAnimatedInteger;
  /** @deprecated */
  readonly filterResY: SVGAnimatedInteger;
  readonly filterUnits: SVGAnimatedEnumeration;
  readonly height: SVGAnimatedLength;
  readonly primitiveUnits: SVGAnimatedEnumeration;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  /** @deprecated */
  setFilterRes(filterResX: number, filterResY: number): void;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFilterElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFilterElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGFilterPrimitiveStandardAttributes {
  readonly height: SVGAnimatedLength;
  readonly result: SVGAnimatedString;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
}

interface SVGFitToViewBox {
  readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
  readonly viewBox: SVGAnimatedRect;
}

interface SVGForeignObjectElement extends SVGGraphicsElement {
  readonly height: SVGAnimatedLength;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGForeignObjectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGForeignObjectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGGElement extends SVGGraphicsElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGGradientElement extends SVGElement, SVGUnitTypes, SVGURIReference {
  readonly gradientTransform: SVGAnimatedTransformList;
  readonly gradientUnits: SVGAnimatedEnumeration;
  readonly spreadMethod: SVGAnimatedEnumeration;
  readonly SVG_SPREADMETHOD_PAD: number;
  readonly SVG_SPREADMETHOD_REFLECT: number;
  readonly SVG_SPREADMETHOD_REPEAT: number;
  readonly SVG_SPREADMETHOD_UNKNOWN: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGGraphicsElement extends SVGElement, SVGTests {
  /** @deprecated */
  readonly farthestViewportElement: SVGElement | null;
  /** @deprecated */
  readonly nearestViewportElement: SVGElement | null;
  readonly transform: SVGAnimatedTransformList;
  getBBox(): SVGRect;
  getCTM(): SVGMatrix | null;
  getScreenCTM(): SVGMatrix | null;
  /** @deprecated */
  getTransformToElement(element: SVGElement): SVGMatrix;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGraphicsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGraphicsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGImageElement extends SVGGraphicsElement, SVGURIReference {
  readonly height: SVGAnimatedLength;
  readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGLength {
  readonly unitType: number;
  value: number;
  valueAsString: string;
  valueInSpecifiedUnits: number;
  convertToSpecifiedUnits(unitType: number): void;
  newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;
  readonly SVG_LENGTHTYPE_CM: number;
  readonly SVG_LENGTHTYPE_EMS: number;
  readonly SVG_LENGTHTYPE_EXS: number;
  readonly SVG_LENGTHTYPE_IN: number;
  readonly SVG_LENGTHTYPE_MM: number;
  readonly SVG_LENGTHTYPE_NUMBER: number;
  readonly SVG_LENGTHTYPE_PC: number;
  readonly SVG_LENGTHTYPE_PERCENTAGE: number;
  readonly SVG_LENGTHTYPE_PT: number;
  readonly SVG_LENGTHTYPE_PX: number;
  readonly SVG_LENGTHTYPE_UNKNOWN: number;
}

interface SVGLengthList {
  readonly numberOfItems: number;
  appendItem(newItem: SVGLength): SVGLength;
  clear(): void;
  getItem(index: number): SVGLength;
  initialize(newItem: SVGLength): SVGLength;
  insertItemBefore(newItem: SVGLength, index: number): SVGLength;
  removeItem(index: number): SVGLength;
  replaceItem(newItem: SVGLength, index: number): SVGLength;
}

interface SVGLineElement extends SVGGraphicsElement {
  readonly x1: SVGAnimatedLength;
  readonly x2: SVGAnimatedLength;
  readonly y1: SVGAnimatedLength;
  readonly y2: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGLinearGradientElement extends SVGGradientElement {
  readonly x1: SVGAnimatedLength;
  readonly x2: SVGAnimatedLength;
  readonly y1: SVGAnimatedLength;
  readonly y2: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLinearGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLinearGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGMarkerElement extends SVGElement, SVGFitToViewBox {
  readonly markerHeight: SVGAnimatedLength;
  readonly markerUnits: SVGAnimatedEnumeration;
  readonly markerWidth: SVGAnimatedLength;
  readonly orientAngle: SVGAnimatedAngle;
  readonly orientType: SVGAnimatedEnumeration;
  readonly refX: SVGAnimatedLength;
  readonly refY: SVGAnimatedLength;
  setOrientToAngle(angle: SVGAngle): void;
  setOrientToAuto(): void;
  readonly SVG_MARKERUNITS_STROKEWIDTH: number;
  readonly SVG_MARKERUNITS_UNKNOWN: number;
  readonly SVG_MARKERUNITS_USERSPACEONUSE: number;
  readonly SVG_MARKER_ORIENT_ANGLE: number;
  readonly SVG_MARKER_ORIENT_AUTO: number;
  readonly SVG_MARKER_ORIENT_UNKNOWN: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMarkerElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMarkerElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGMaskElement extends SVGElement, SVGTests, SVGUnitTypes {
  readonly height: SVGAnimatedLength;
  readonly maskContentUnits: SVGAnimatedEnumeration;
  readonly maskUnits: SVGAnimatedEnumeration;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMaskElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMaskElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGMetadataElement extends SVGElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMetadataElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMetadataElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGNumber {
  value: number;
}

interface SVGNumberList {
  readonly numberOfItems: number;
  appendItem(newItem: SVGNumber): SVGNumber;
  clear(): void;
  getItem(index: number): SVGNumber;
  initialize(newItem: SVGNumber): SVGNumber;
  insertItemBefore(newItem: SVGNumber, index: number): SVGNumber;
  removeItem(index: number): SVGNumber;
  replaceItem(newItem: SVGNumber, index: number): SVGNumber;
}

interface SVGPathElement extends SVGGraphicsElement {
  /** @deprecated */
  readonly pathSegList: SVGPathSegList;
  /** @deprecated */
  createSVGPathSegArcAbs(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcAbs;
  /** @deprecated */
  createSVGPathSegArcRel(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcRel;
  /** @deprecated */
  createSVGPathSegClosePath(): SVGPathSegClosePath;
  /** @deprecated */
  createSVGPathSegCurvetoCubicAbs(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicAbs;
  /** @deprecated */
  createSVGPathSegCurvetoCubicRel(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicRel;
  /** @deprecated */
  createSVGPathSegCurvetoCubicSmoothAbs(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothAbs;
  /** @deprecated */
  createSVGPathSegCurvetoCubicSmoothRel(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothRel;
  /** @deprecated */
  createSVGPathSegCurvetoQuadraticAbs(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticAbs;
  /** @deprecated */
  createSVGPathSegCurvetoQuadraticRel(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticRel;
  /** @deprecated */
  createSVGPathSegCurvetoQuadraticSmoothAbs(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothAbs;
  /** @deprecated */
  createSVGPathSegCurvetoQuadraticSmoothRel(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothRel;
  /** @deprecated */
  createSVGPathSegLinetoAbs(x: number, y: number): SVGPathSegLinetoAbs;
  /** @deprecated */
  createSVGPathSegLinetoHorizontalAbs(x: number): SVGPathSegLinetoHorizontalAbs;
  /** @deprecated */
  createSVGPathSegLinetoHorizontalRel(x: number): SVGPathSegLinetoHorizontalRel;
  /** @deprecated */
  createSVGPathSegLinetoRel(x: number, y: number): SVGPathSegLinetoRel;
  /** @deprecated */
  createSVGPathSegLinetoVerticalAbs(y: number): SVGPathSegLinetoVerticalAbs;
  /** @deprecated */
  createSVGPathSegLinetoVerticalRel(y: number): SVGPathSegLinetoVerticalRel;
  /** @deprecated */
  createSVGPathSegMovetoAbs(x: number, y: number): SVGPathSegMovetoAbs;
  /** @deprecated */
  createSVGPathSegMovetoRel(x: number, y: number): SVGPathSegMovetoRel;
  /** @deprecated */
  getPathSegAtLength(distance: number): number;
  getPointAtLength(distance: number): SVGPoint;
  getTotalLength(): number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGPathSeg {
  readonly pathSegType: number;
  readonly pathSegTypeAsLetter: string;
  readonly PATHSEG_ARC_ABS: number;
  readonly PATHSEG_ARC_REL: number;
  readonly PATHSEG_CLOSEPATH: number;
  readonly PATHSEG_CURVETO_CUBIC_ABS: number;
  readonly PATHSEG_CURVETO_CUBIC_REL: number;
  readonly PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;
  readonly PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;
  readonly PATHSEG_CURVETO_QUADRATIC_ABS: number;
  readonly PATHSEG_CURVETO_QUADRATIC_REL: number;
  readonly PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;
  readonly PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;
  readonly PATHSEG_LINETO_ABS: number;
  readonly PATHSEG_LINETO_HORIZONTAL_ABS: number;
  readonly PATHSEG_LINETO_HORIZONTAL_REL: number;
  readonly PATHSEG_LINETO_REL: number;
  readonly PATHSEG_LINETO_VERTICAL_ABS: number;
  readonly PATHSEG_LINETO_VERTICAL_REL: number;
  readonly PATHSEG_MOVETO_ABS: number;
  readonly PATHSEG_MOVETO_REL: number;
  readonly PATHSEG_UNKNOWN: number;
}

interface SVGPathSegArcAbs extends SVGPathSeg {
  angle: number;
  largeArcFlag: boolean;
  r1: number;
  r2: number;
  sweepFlag: boolean;
  x: number;
  y: number;
}

interface SVGPathSegArcRel extends SVGPathSeg {
  angle: number;
  largeArcFlag: boolean;
  r1: number;
  r2: number;
  sweepFlag: boolean;
  x: number;
  y: number;
}

interface SVGPathSegClosePath extends SVGPathSeg {
}

interface SVGPathSegCurvetoCubicAbs extends SVGPathSeg {
  x: number;
  x1: number;
  x2: number;
  y: number;
  y1: number;
  y2: number;
}

interface SVGPathSegCurvetoCubicRel extends SVGPathSeg {
  x: number;
  x1: number;
  x2: number;
  y: number;
  y1: number;
  y2: number;
}

interface SVGPathSegCurvetoCubicSmoothAbs extends SVGPathSeg {
  x: number;
  x2: number;
  y: number;
  y2: number;
}

interface SVGPathSegCurvetoCubicSmoothRel extends SVGPathSeg {
  x: number;
  x2: number;
  y: number;
  y2: number;
}

interface SVGPathSegCurvetoQuadraticAbs extends SVGPathSeg {
  x: number;
  x1: number;
  y: number;
  y1: number;
}

interface SVGPathSegCurvetoQuadraticRel extends SVGPathSeg {
  x: number;
  x1: number;
  y: number;
  y1: number;
}

interface SVGPathSegCurvetoQuadraticSmoothAbs extends SVGPathSeg {
  x: number;
  y: number;
}

interface SVGPathSegCurvetoQuadraticSmoothRel extends SVGPathSeg {
  x: number;
  y: number;
}

interface SVGPathSegLinetoAbs extends SVGPathSeg {
  x: number;
  y: number;
}

interface SVGPathSegLinetoHorizontalAbs extends SVGPathSeg {
  x: number;
}

interface SVGPathSegLinetoHorizontalRel extends SVGPathSeg {
  x: number;
}

interface SVGPathSegLinetoRel extends SVGPathSeg {
  x: number;
  y: number;
}

interface SVGPathSegLinetoVerticalAbs extends SVGPathSeg {
  y: number;
}

interface SVGPathSegLinetoVerticalRel extends SVGPathSeg {
  y: number;
}

interface SVGPathSegList {
  readonly numberOfItems: number;
  appendItem(newItem: SVGPathSeg): SVGPathSeg;
  clear(): void;
  getItem(index: number): SVGPathSeg;
  initialize(newItem: SVGPathSeg): SVGPathSeg;
  insertItemBefore(newItem: SVGPathSeg, index: number): SVGPathSeg;
  removeItem(index: number): SVGPathSeg;
  replaceItem(newItem: SVGPathSeg, index: number): SVGPathSeg;
}

interface SVGPathSegMovetoAbs extends SVGPathSeg {
  x: number;
  y: number;
}

interface SVGPathSegMovetoRel extends SVGPathSeg {
  x: number;
  y: number;
}

interface SVGPatternElement extends SVGElement, SVGTests, SVGUnitTypes, SVGFitToViewBox, SVGURIReference {
  readonly height: SVGAnimatedLength;
  readonly patternContentUnits: SVGAnimatedEnumeration;
  readonly patternTransform: SVGAnimatedTransformList;
  readonly patternUnits: SVGAnimatedEnumeration;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPatternElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPatternElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGPointList {
  readonly numberOfItems: number;
  appendItem(newItem: SVGPoint): SVGPoint;
  clear(): void;
  getItem(index: number): SVGPoint;
  initialize(newItem: SVGPoint): SVGPoint;
  insertItemBefore(newItem: SVGPoint, index: number): SVGPoint;
  removeItem(index: number): SVGPoint;
  replaceItem(newItem: SVGPoint, index: number): SVGPoint;
}

interface SVGPolygonElement extends SVGGraphicsElement, SVGAnimatedPoints {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolygonElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolygonElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGPolylineElement extends SVGGraphicsElement, SVGAnimatedPoints {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolylineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolylineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGPreserveAspectRatio {
  align: number;
  meetOrSlice: number;
  readonly SVG_MEETORSLICE_MEET: number;
  readonly SVG_MEETORSLICE_SLICE: number;
  readonly SVG_MEETORSLICE_UNKNOWN: number;
  readonly SVG_PRESERVEASPECTRATIO_NONE: number;
  readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: number;
  readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;
  readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: number;
  readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;
  readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;
  readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: number;
  readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;
  readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: number;
  readonly SVG_PRESERVEASPECTRATIO_XMINYMID: number;
  readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: number;
}

interface SVGRadialGradientElement extends SVGGradientElement {
  readonly cx: SVGAnimatedLength;
  readonly cy: SVGAnimatedLength;
  readonly fx: SVGAnimatedLength;
  readonly fy: SVGAnimatedLength;
  readonly r: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRadialGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRadialGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGRectElement extends SVGGraphicsElement {
  readonly height: SVGAnimatedLength;
  readonly rx: SVGAnimatedLength;
  readonly ry: SVGAnimatedLength;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGSVGElementEventMap extends SVGElementEventMap {
  "SVGAbort": Event;
  "SVGError": Event;
  "resize": UIEvent;
  "scroll": UIEvent;
  "SVGUnload": Event;
  "SVGZoom": SVGZoomEvent;
}

interface SVGSVGElement extends SVGGraphicsElement, DocumentEvent, SVGFitToViewBox, SVGZoomAndPan {
  /** @deprecated */
  contentScriptType: string;
  /** @deprecated */
  contentStyleType: string;
  currentScale: number;
  readonly currentTranslate: SVGPoint;
  readonly height: SVGAnimatedLength;
  onabort: ((this: SVGSVGElement, ev: Event) => any) | null;
  onerror: ((this: SVGSVGElement, ev: Event) => any) | null;
  onresize: ((this: SVGSVGElement, ev: UIEvent) => any) | null;
  onscroll: ((this: SVGSVGElement, ev: UIEvent) => any) | null;
  onunload: ((this: SVGSVGElement, ev: Event) => any) | null;
  onzoom: ((this: SVGSVGElement, ev: SVGZoomEvent) => any) | null;
  /** @deprecated */
  readonly pixelUnitToMillimeterX: number;
  /** @deprecated */
  readonly pixelUnitToMillimeterY: number;
  /** @deprecated */
  readonly screenPixelToMillimeterX: number;
  /** @deprecated */
  readonly screenPixelToMillimeterY: number;
  /** @deprecated */
  readonly viewport: SVGRect;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  checkEnclosure(element: SVGElement, rect: SVGRect): boolean;
  checkIntersection(element: SVGElement, rect: SVGRect): boolean;
  createSVGAngle(): SVGAngle;
  createSVGLength(): SVGLength;
  createSVGMatrix(): SVGMatrix;
  createSVGNumber(): SVGNumber;
  createSVGPoint(): SVGPoint;
  createSVGRect(): SVGRect;
  createSVGTransform(): SVGTransform;
  createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;
  deselectAll(): void;
  /** @deprecated */
  forceRedraw(): void;
  getComputedStyle(elt: Element, pseudoElt?: string | null): CSSStyleDeclaration;
  /** @deprecated */
  getCurrentTime(): number;
  getElementById(elementId: string): Element;
  getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>;
  getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>;
  /** @deprecated */
  pauseAnimations(): void;
  /** @deprecated */
  setCurrentTime(seconds: number): void;
  /** @deprecated */
  suspendRedraw(maxWaitMilliseconds: number): number;
  /** @deprecated */
  unpauseAnimations(): void;
  /** @deprecated */
  unsuspendRedraw(suspendHandleID: number): void;
  /** @deprecated */
  unsuspendRedrawAll(): void;
  addEventListener<K extends keyof SVGSVGElementEventMap>(type: K, listener: (this: SVGSVGElement, ev: SVGSVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGSVGElementEventMap>(type: K, listener: (this: SVGSVGElement, ev: SVGSVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGScriptElement extends SVGElement, SVGURIReference {
  type: string;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGScriptElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGScriptElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGStopElement extends SVGElement {
  readonly offset: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStopElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStopElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGStringList {
  readonly numberOfItems: number;
  appendItem(newItem: string): string;
  clear(): void;
  getItem(index: number): string;
  initialize(newItem: string): string;
  insertItemBefore(newItem: string, index: number): string;
  removeItem(index: number): string;
  replaceItem(newItem: string, index: number): string;
}

interface SVGStyleElement extends SVGElement {
  disabled: boolean;
  media: string;
  title: string;
  type: string;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStyleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStyleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGSwitchElement extends SVGGraphicsElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSwitchElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSwitchElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGSymbolElement extends SVGElement, SVGFitToViewBox {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSymbolElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSymbolElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGTSpanElement extends SVGTextPositioningElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTSpanElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTSpanElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGTests {
  readonly requiredExtensions: SVGStringList;
  /** @deprecated */
  readonly requiredFeatures: SVGStringList;
  readonly systemLanguage: SVGStringList;
  /** @deprecated */
  hasExtension(extension: string): boolean;
}

interface SVGTextContentElement extends SVGGraphicsElement {
  readonly lengthAdjust: SVGAnimatedEnumeration;
  readonly textLength: SVGAnimatedLength;
  getCharNumAtPosition(point: SVGPoint): number;
  getComputedTextLength(): number;
  getEndPositionOfChar(charnum: number): SVGPoint;
  getExtentOfChar(charnum: number): SVGRect;
  getNumberOfChars(): number;
  getRotationOfChar(charnum: number): number;
  getStartPositionOfChar(charnum: number): SVGPoint;
  getSubStringLength(charnum: number, nchars: number): number;
  selectSubString(charnum: number, nchars: number): void;
  readonly LENGTHADJUST_SPACING: number;
  readonly LENGTHADJUST_SPACINGANDGLYPHS: number;
  readonly LENGTHADJUST_UNKNOWN: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextContentElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextContentElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGTextElement extends SVGTextPositioningElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGTextPathElement extends SVGTextContentElement, SVGURIReference {
  readonly method: SVGAnimatedEnumeration;
  readonly spacing: SVGAnimatedEnumeration;
  readonly startOffset: SVGAnimatedLength;
  readonly TEXTPATH_METHODTYPE_ALIGN: number;
  readonly TEXTPATH_METHODTYPE_STRETCH: number;
  readonly TEXTPATH_METHODTYPE_UNKNOWN: number;
  readonly TEXTPATH_SPACINGTYPE_AUTO: number;
  readonly TEXTPATH_SPACINGTYPE_EXACT: number;
  readonly TEXTPATH_SPACINGTYPE_UNKNOWN: number;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGTextPositioningElement extends SVGTextContentElement {
  readonly dx: SVGAnimatedLengthList;
  readonly dy: SVGAnimatedLengthList;
  readonly rotate: SVGAnimatedNumberList;
  readonly x: SVGAnimatedLengthList;
  readonly y: SVGAnimatedLengthList;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPositioningElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPositioningElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGTitleElement extends SVGElement {
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTitleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTitleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGTransform {
  readonly angle: number;
  readonly matrix: SVGMatrix;
  readonly type: number;
  setMatrix(matrix: SVGMatrix): void;
  setRotate(angle: number, cx: number, cy: number): void;
  setScale(sx: number, sy: number): void;
  setSkewX(angle: number): void;
  setSkewY(angle: number): void;
  setTranslate(tx: number, ty: number): void;
  readonly SVG_TRANSFORM_MATRIX: number;
  readonly SVG_TRANSFORM_ROTATE: number;
  readonly SVG_TRANSFORM_SCALE: number;
  readonly SVG_TRANSFORM_SKEWX: number;
  readonly SVG_TRANSFORM_SKEWY: number;
  readonly SVG_TRANSFORM_TRANSLATE: number;
  readonly SVG_TRANSFORM_UNKNOWN: number;
}

interface SVGTransformList {
  readonly numberOfItems: number;
  appendItem(newItem: SVGTransform): SVGTransform;
  clear(): void;
  consolidate(): SVGTransform;
  createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;
  getItem(index: number): SVGTransform;
  initialize(newItem: SVGTransform): SVGTransform;
  insertItemBefore(newItem: SVGTransform, index: number): SVGTransform;
  removeItem(index: number): SVGTransform;
  replaceItem(newItem: SVGTransform, index: number): SVGTransform;
}

interface SVGURIReference {
  readonly href: SVGAnimatedString;
}

interface SVGUnitTypes {
  readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number;
  readonly SVG_UNIT_TYPE_UNKNOWN: number;
  readonly SVG_UNIT_TYPE_USERSPACEONUSE: number;
}

interface SVGUseElement extends SVGGraphicsElement, SVGURIReference {
  readonly animatedInstanceRoot: SVGElementInstance | null;
  readonly height: SVGAnimatedLength;
  readonly instanceRoot: SVGElementInstance | null;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGUseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGUseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGViewElement extends SVGElement, SVGFitToViewBox, SVGZoomAndPan {
  /** @deprecated */
  readonly viewTarget: SVGStringList;
  addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGViewElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGViewElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SVGZoomAndPan {
  readonly zoomAndPan: number;
}

interface SVGZoomEvent extends UIEvent {
  readonly newScale: number;
  readonly newTranslate: SVGPoint;
  readonly previousScale: number;
  readonly previousTranslate: SVGPoint;
  readonly zoomRectScreen: SVGRect;
}

interface ScopedCredential {
  readonly id: ArrayBuffer;
  readonly type: ScopedCredentialType;
}

interface ScopedCredentialInfo {
  readonly credential: ScopedCredential;
  readonly publicKey: CryptoKey;
}

interface ScreenEventMap {
  "MSOrientationChange": Event;
}

interface Screen extends EventTarget {
  readonly availHeight: number;
  readonly availWidth: number;
  /** @deprecated */
  bufferDepth: number;
  readonly colorDepth: number;
  readonly deviceXDPI: number;
  readonly deviceYDPI: number;
  readonly fontSmoothingEnabled: boolean;
  readonly height: number;
  readonly logicalXDPI: number;
  readonly logicalYDPI: number;
  readonly msOrientation: string;
  onmsorientationchange: ((this: Screen, ev: Event) => any) | null;
  readonly pixelDepth: number;
  readonly systemXDPI: number;
  readonly systemYDPI: number;
  readonly width: number;
  lockOrientation(orientations: OrientationLockType | OrientationLockType[]): boolean;
  msLockOrientation(orientations: string | string[]): boolean;
  msUnlockOrientation(): void;
  unlockOrientation(): void;
  addEventListener<K extends keyof ScreenEventMap>(type: K, listener: (this: Screen, ev: ScreenEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof ScreenEventMap>(type: K, listener: (this: Screen, ev: ScreenEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface ScriptProcessorNodeEventMap {
  "audioprocess": AudioProcessingEvent;
}

interface ScriptProcessorNode extends AudioNode {
  /** @deprecated */
  readonly bufferSize: number;
  /** @deprecated */
  onaudioprocess: ((this: ScriptProcessorNode, ev: AudioProcessingEvent) => any) | null;
  addEventListener<K extends keyof ScriptProcessorNodeEventMap>(type: K, listener: (this: ScriptProcessorNode, ev: ScriptProcessorNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof ScriptProcessorNodeEventMap>(type: K, listener: (this: ScriptProcessorNode, ev: ScriptProcessorNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SecurityPolicyViolationEvent extends Event {
  readonly blockedURI: string;
  readonly columnNumber: number;
  readonly documentURI: string;
  readonly effectiveDirective: string;
  readonly lineNumber: number;
  readonly originalPolicy: string;
  readonly referrer: string;
  readonly sourceFile: string;
  readonly statusCode: number;
  readonly violatedDirective: string;
}

interface Selection {
  readonly anchorNode: Node;
  readonly anchorOffset: number;
  readonly baseNode: Node;
  readonly baseOffset: number;
  readonly extentNode: Node;
  readonly extentOffset: number;
  readonly focusNode: Node;
  readonly focusOffset: number;
  readonly isCollapsed: boolean;
  readonly rangeCount: number;
  readonly type: string;
  addRange(range: Range): void;
  collapse(parentNode: Node, offset: number): void;
  collapseToEnd(): void;
  collapseToStart(): void;
  containsNode(node: Node, partlyContained: boolean): boolean;
  deleteFromDocument(): void;
  empty(): void;
  extend(newNode: Node, offset: number): void;
  getRangeAt(index: number): Range;
  removeAllRanges(): void;
  removeRange(range: Range): void;
  selectAllChildren(parentNode: Node): void;
  setBaseAndExtent(baseNode: Node, baseOffset: number, extentNode: Node, extentOffset: number): void;
  setPosition(parentNode: Node, offset: number): void;
  toString(): string;
}

interface ServiceUIFrameContext {
  getCachedFrameMessage(key: string): string;
  postFrameMessage(key: string, data: string): void;
}

interface ServiceWorkerEventMap extends AbstractWorkerEventMap {
  "statechange": Event;
}

interface ServiceWorker extends EventTarget, AbstractWorker {
  onstatechange: ((this: ServiceWorker, ev: Event) => any) | null;
  readonly scriptURL: string;
  readonly state: ServiceWorkerState;
  postMessage(message: any, transfer?: any[]): void;
  addEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface ServiceWorkerContainerEventMap {
  "controllerchange": Event;
  "message": MessageEvent;
  "messageerror": MessageEvent;
}

interface ServiceWorkerContainer extends EventTarget {
  readonly controller: ServiceWorker | null;
  oncontrollerchange: ((this: ServiceWorkerContainer, ev: Event) => any) | null;
  onmessage: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;
  onmessageerror: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;
  readonly ready: Promise<ServiceWorkerRegistration>;
  getRegistration(clientURL?: string): Promise<ServiceWorkerRegistration | undefined>;
  getRegistrations(): Promise<ReadonlyArray<ServiceWorkerRegistration>>;
  register(scriptURL: string, options?: RegistrationOptions): Promise<ServiceWorkerRegistration>;
  startMessages(): void;
  addEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface ServiceWorkerMessageEvent extends Event {
  readonly data: any;
  readonly lastEventId: string;
  readonly origin: string;
  readonly ports: ReadonlyArray<MessagePort> | null;
  readonly source: ServiceWorker | MessagePort | null;
}

interface ServiceWorkerRegistrationEventMap {
  "updatefound": Event;
}

interface ServiceWorkerRegistration extends EventTarget {
  readonly active: ServiceWorker | null;
  readonly installing: ServiceWorker | null;
  readonly navigationPreload: NavigationPreloadManager;
  onupdatefound: ((this: ServiceWorkerRegistration, ev: Event) => any) | null;
  readonly pushManager: PushManager;
  readonly scope: string;
  readonly sync: SyncManager;
  readonly updateViaCache: ServiceWorkerUpdateViaCache;
  readonly waiting: ServiceWorker | null;
  getNotifications(filter?: GetNotificationOptions): Promise<Notification[]>;
  showNotification(title: string, options?: NotificationOptions): Promise<void>;
  unregister(): Promise<boolean>;
  update(): Promise<void>;
  addEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface ShadowRoot extends DocumentOrShadowRoot, DocumentFragment {
  readonly host: Element;
  innerHTML: string;
}

interface ShadowRootInit {
  delegatesFocus?: boolean;
  mode: "open" | "closed";
}

interface SourceBuffer extends EventTarget {
  appendWindowEnd: number;
  appendWindowStart: number;
  readonly audioTracks: AudioTrackList;
  readonly buffered: TimeRanges;
  mode: AppendMode;
  readonly textTracks: TextTrackList;
  timestampOffset: number;
  readonly updating: boolean;
  readonly videoTracks: VideoTrackList;
  abort(): void;
  appendBuffer(data: ArrayBuffer | Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | null): void;
  appendStream(stream: MSStream, maxSize?: number): void;
  remove(start: number, end: number): void;
}

interface SourceBufferList extends EventTarget {
  readonly length: number;
  item(index: number): SourceBuffer;
  [index: number]: SourceBuffer;
}

interface SpeechSynthesisEventMap {
  "voiceschanged": Event;
}

interface SpeechSynthesis extends EventTarget {
  onvoiceschanged: ((this: SpeechSynthesis, ev: Event) => any) | null;
  readonly paused: boolean;
  readonly pending: boolean;
  readonly speaking: boolean;
  cancel(): void;
  getVoices(): SpeechSynthesisVoice[];
  pause(): void;
  resume(): void;
  speak(utterance: SpeechSynthesisUtterance): void;
  addEventListener<K extends keyof SpeechSynthesisEventMap>(type: K, listener: (this: SpeechSynthesis, ev: SpeechSynthesisEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SpeechSynthesisEventMap>(type: K, listener: (this: SpeechSynthesis, ev: SpeechSynthesisEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SpeechSynthesisEvent extends Event {
  readonly charIndex: number;
  readonly charLength: number;
  readonly elapsedTime: number;
  readonly name: string;
  readonly utterance: SpeechSynthesisUtterance;
}

interface SpeechSynthesisUtteranceEventMap {
  "boundary": Event;
  "end": Event;
  "error": Event;
  "mark": Event;
  "pause": Event;
  "resume": Event;
  "start": Event;
}

interface SpeechSynthesisUtterance extends EventTarget {
  lang: string;
  onboundary: ((this: SpeechSynthesisUtterance, ev: Event) => any) | null;
  onend: ((this: SpeechSynthesisUtterance, ev: Event) => any) | null;
  onerror: ((this: SpeechSynthesisUtterance, ev: Event) => any) | null;
  onmark: ((this: SpeechSynthesisUtterance, ev: Event) => any) | null;
  onpause: ((this: SpeechSynthesisUtterance, ev: Event) => any) | null;
  onresume: ((this: SpeechSynthesisUtterance, ev: Event) => any) | null;
  onstart: ((this: SpeechSynthesisUtterance, ev: Event) => any) | null;
  pitch: number;
  rate: number;
  text: string;
  voice: SpeechSynthesisVoice;
  volume: number;
  addEventListener<K extends keyof SpeechSynthesisUtteranceEventMap>(type: K, listener: (this: SpeechSynthesisUtterance, ev: SpeechSynthesisUtteranceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof SpeechSynthesisUtteranceEventMap>(type: K, listener: (this: SpeechSynthesisUtterance, ev: SpeechSynthesisUtteranceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface SpeechSynthesisVoice {
  readonly default: boolean;
  readonly lang: string;
  readonly localService: boolean;
  readonly name: string;
  readonly voiceURI: string;
}

interface StereoPannerNode extends AudioNode {
  readonly pan: AudioParam;
}

interface Storage {
  /**
   * Returns the number of key/value pairs currently present in the list associated with the
   * object.
   */
  readonly length: number;
  /**
   * Empties the list associated with the object of all key/value pairs, if there are any.
   */
  clear(): void;
  /**
   * value = storage[key]
   */
  getItem(key: string): string | null;
  /**
   * Returns the name of the nth key in the list, or null if n is greater
   * than or equal to the number of key/value pairs in the object.
   */
  key(index: number): string | null;
  /**
   * delete storage[key]
   */
  removeItem(key: string): void;
  /**
   * storage[key] = value
   */
  setItem(key: string, value: string): void;
}

declare var Storage: {
  prototype: Storage;
  new(): Storage;
};

interface StorageEvent extends Event {
  /**
   * Returns the key of the storage item being changed.
   */
  readonly key: string | null;
  /**
   * Returns the new value of the key of the storage item whose value is being changed.
   */
  readonly newValue: string | null;
  /**
   * Returns the old value of the key of the storage item whose value is being changed.
   */
  readonly oldValue: string | null;
  /**
   * Returns the Storage object that was affected.
   */
  readonly storageArea: Storage | null;
  /**
   * Returns the URL of the document whose storage item changed.
   */
  readonly url: string;
}

interface StorageManager {
  estimate(): Promise<StorageEstimate>;
  persist(): Promise<boolean>;
  persisted(): Promise<boolean>;
}

interface StyleMedia {
  readonly type: string;
  matchMedium(mediaquery: string): boolean;
}

interface StyleSheet {
  disabled: boolean;
  readonly href: string | null;
  readonly media: MediaList;
  readonly ownerNode: Node;
  readonly parentStyleSheet: StyleSheet | null;
  readonly title: string | null;
  readonly type: string;
}

interface StyleSheetList {
  readonly length: number;
  item(index: number): StyleSheet | null;
  [index: number]: StyleSheet;
}

interface SubtleCrypto {
  decrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;
  deriveBits(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, length: number): PromiseLike<ArrayBuffer>;
  deriveKey(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: string | AesDerivedKeyParams | HmacImportParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;
  digest(algorithm: string | Algorithm, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;
  encrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;
  exportKey(format: "jwk", key: CryptoKey): PromiseLike<JsonWebKey>;
  exportKey(format: "raw" | "pkcs8" | "spki", key: CryptoKey): PromiseLike<ArrayBuffer>;
  exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer>;
  generateKey(algorithm: string, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair | CryptoKey>;
  generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams | DhKeyGenParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair>;
  generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;
  importKey(format: "jwk", keyData: JsonWebKey, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;
  importKey(format: "raw" | "pkcs8" | "spki", keyData: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;
  importKey(format: string, keyData: JsonWebKey | Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;
  sign(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>;
  unwrapKey(format: string, wrappedKey: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, unwrappingKey: CryptoKey, unwrapAlgorithm: string | Algorithm, unwrappedKeyAlgorithm: string | Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;
  verify(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, signature: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<boolean>;
  wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: string | Algorithm): PromiseLike<ArrayBuffer>;
}

interface SyncManager {
  getTags(): Promise<string[]>;
  register(tag: string): Promise<void>;
}

interface Text extends CharacterData {
  readonly assignedSlot: HTMLSlotElement | null;
  readonly wholeText: string;
  splitText(offset: number): Text;
}

interface TextDecoder {
  /**
   * Returns encoding's name, lowercased.
   */
  readonly encoding: string;
  /**
   * Returns true if error mode is "fatal", and false
   * otherwise.
   */
  readonly fatal: boolean;
  /**
   * Returns true if ignore BOM flag is set, and false otherwise.
   */
  readonly ignoreBOM: boolean;
  /**
   * Returns the result of running encoding's decoder. The
   * method can be invoked zero or more times with options's stream set to
   * true, and then once without options's stream (or set to false), to process
   * a fragmented stream. If the invocation without options's stream (or set to
   * false) has no input, it's clearest to omit both arguments.
   * var string = "", decoder = new TextDecoder(encoding), buffer;
   * while(buffer = next_chunk()) {
   * string += decoder.decode(buffer, {stream:true});
   * }
   * string += decoder.decode(); // end-of-stream
   * If the error mode is "fatal" and encoding's decoder returns error, throws a TypeError.
   */
  decode(input?: BufferSource, options?: TextDecodeOptions): string;
}

interface TextEncoder {
  /**
   * Returns "utf-8".
   */
  readonly encoding: string;
  /**
   * Returns the result of running UTF-8's encoder.
   */
  encode(input?: string): Uint8Array;
}

interface TextEvent extends UIEvent {
  readonly data: string;
  initTextEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, inputMethod: number, locale: string): void;
  readonly DOM_INPUT_METHOD_DROP: number;
  readonly DOM_INPUT_METHOD_HANDWRITING: number;
  readonly DOM_INPUT_METHOD_IME: number;
  readonly DOM_INPUT_METHOD_KEYBOARD: number;
  readonly DOM_INPUT_METHOD_MULTIMODAL: number;
  readonly DOM_INPUT_METHOD_OPTION: number;
  readonly DOM_INPUT_METHOD_PASTE: number;
  readonly DOM_INPUT_METHOD_SCRIPT: number;
  readonly DOM_INPUT_METHOD_UNKNOWN: number;
  readonly DOM_INPUT_METHOD_VOICE: number;
}

interface TextMetrics {
  readonly width: number;
}

interface TextTrackEventMap {
  "cuechange": Event;
  "error": Event;
  "load": Event;
}

interface TextTrack extends EventTarget {
  readonly activeCues: TextTrackCueList;
  readonly cues: TextTrackCueList;
  readonly inBandMetadataTrackDispatchType: string;
  readonly kind: string;
  readonly label: string;
  readonly language: string;
  mode: TextTrackMode | number;
  oncuechange: ((this: TextTrack, ev: Event) => any) | null;
  onerror: ((this: TextTrack, ev: Event) => any) | null;
  onload: ((this: TextTrack, ev: Event) => any) | null;
  readonly readyState: number;
  addCue(cue: TextTrackCue): void;
  removeCue(cue: TextTrackCue): void;
  readonly DISABLED: number;
  readonly ERROR: number;
  readonly HIDDEN: number;
  readonly LOADED: number;
  readonly LOADING: number;
  readonly NONE: number;
  readonly SHOWING: number;
  addEventListener<K extends keyof TextTrackEventMap>(type: K, listener: (this: TextTrack, ev: TextTrackEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof TextTrackEventMap>(type: K, listener: (this: TextTrack, ev: TextTrackEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface TextTrackCueEventMap {
  "enter": Event;
  "exit": Event;
}

interface TextTrackCue extends EventTarget {
  endTime: number;
  id: string;
  onenter: ((this: TextTrackCue, ev: Event) => any) | null;
  onexit: ((this: TextTrackCue, ev: Event) => any) | null;
  pauseOnExit: boolean;
  startTime: number;
  text: string;
  readonly track: TextTrack;
  getCueAsHTML(): DocumentFragment;
  addEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: TextTrackCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: TextTrackCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface TextTrackCueList {
  readonly length: number;
  getCueById(id: string): TextTrackCue;
  item(index: number): TextTrackCue;
  [index: number]: TextTrackCue;
}

interface TextTrackListEventMap {
  "addtrack": TrackEvent;
}

interface TextTrackList extends EventTarget {
  readonly length: number;
  onaddtrack: ((this: TextTrackList, ev: TrackEvent) => any) | null;
  item(index: number): TextTrack;
  addEventListener<K extends keyof TextTrackListEventMap>(type: K, listener: (this: TextTrackList, ev: TextTrackListEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof TextTrackListEventMap>(type: K, listener: (this: TextTrackList, ev: TextTrackListEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  [index: number]: TextTrack;
}

interface TimeRanges {
  readonly length: number;
  end(index: number): number;
  start(index: number): number;
}

interface Touch {
  readonly altitudeAngle: number;
  readonly azimuthAngle: number;
  readonly clientX: number;
  readonly clientY: number;
  readonly force: number;
  readonly identifier: number;
  readonly pageX: number;
  readonly pageY: number;
  readonly radiusX: number;
  readonly radiusY: number;
  readonly rotationAngle: number;
  readonly screenX: number;
  readonly screenY: number;
  readonly target: EventTarget;
  readonly touchType: TouchType;
}

interface TouchEvent extends UIEvent {
  readonly altKey: boolean;
  readonly changedTouches: TouchList;
  readonly ctrlKey: boolean;
  readonly metaKey: boolean;
  readonly shiftKey: boolean;
  readonly targetTouches: TouchList;
  readonly touches: TouchList;
}

interface TouchList {
  readonly length: number;
  item(index: number): Touch | null;
  [index: number]: Touch;
}

interface TrackEvent extends Event {
  readonly track: VideoTrack | AudioTrack | TextTrack | null;
}

interface TransitionEvent extends Event {
  readonly elapsedTime: number;
  readonly propertyName: string;
  readonly pseudoElement: string;
}

interface TreeWalker {
  currentNode: Node;
  /** @deprecated */
  readonly expandEntityReferences: boolean;
  readonly filter: NodeFilter | null;
  readonly root: Node;
  readonly whatToShow: number;
  firstChild(): Node | null;
  lastChild(): Node | null;
  nextNode(): Node | null;
  nextSibling(): Node | null;
  parentNode(): Node | null;
  previousNode(): Node | null;
  previousSibling(): Node | null;
}

interface UIEvent extends Event {
  readonly detail: number;
  readonly view: Window;
  initUIEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number): void;
}

interface URL {
  hash: string;
  host: string;
  hostname: string;
  href: string;
  readonly origin: string;
  password: string;
  pathname: string;
  port: string;
  protocol: string;
  search: string;
  readonly searchParams: URLSearchParams;
  username: string;
  toJSON(): string;
}

type webkitURL = URL;

interface URLSearchParams {
  /**
   * Appends a specified key/value pair as a new search parameter.
   */
  append(name: string, value: string): void;
  /**
   * Deletes the given search parameter, and its associated value, from the list of all search parameters.
   */
  delete(name: string): void;
  /**
   * Returns the first value associated to the given search parameter.
   */
  get(name: string): string | null;
  /**
   * Returns all the values association with a given search parameter.
   */
  getAll(name: string): string[];
  /**
   * Returns a Boolean indicating if such a search parameter exists.
   */
  has(name: string): boolean;
  /**
   * Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.
   */
  set(name: string, value: string): void;
  sort(): void;
  forEach(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any): void;
}

interface VRDisplay extends EventTarget {
  readonly capabilities: VRDisplayCapabilities;
  depthFar: number;
  depthNear: number;
  readonly displayId: number;
  readonly displayName: string;
  readonly isConnected: boolean;
  readonly isPresenting: boolean;
  readonly stageParameters: VRStageParameters | null;
  cancelAnimationFrame(handle: number): void;
  exitPresent(): Promise<void>;
  getEyeParameters(whichEye: string): VREyeParameters;
  getFrameData(frameData: VRFrameData): boolean;
  getLayers(): VRLayer[];
  /** @deprecated */
  getPose(): VRPose;
  requestAnimationFrame(callback: FrameRequestCallback): number;
  requestPresent(layers: VRLayer[]): Promise<void>;
  resetPose(): void;
  submitFrame(pose?: VRPose): void;
}

interface VRDisplayCapabilities {
  readonly canPresent: boolean;
  readonly hasExternalDisplay: boolean;
  readonly hasOrientation: boolean;
  readonly hasPosition: boolean;
  readonly maxLayers: number;
}

interface VRDisplayEvent extends Event {
  readonly display: VRDisplay;
  readonly reason: VRDisplayEventReason | null;
}

interface VREyeParameters {
  /** @deprecated */
  readonly fieldOfView: VRFieldOfView;
  readonly offset: Float32Array;
  readonly renderHeight: number;
  readonly renderWidth: number;
}

interface VRFieldOfView {
  readonly downDegrees: number;
  readonly leftDegrees: number;
  readonly rightDegrees: number;
  readonly upDegrees: number;
}

interface VRFrameData {
  readonly leftProjectionMatrix: Float32Array;
  readonly leftViewMatrix: Float32Array;
  readonly pose: VRPose;
  readonly rightProjectionMatrix: Float32Array;
  readonly rightViewMatrix: Float32Array;
  readonly timestamp: number;
}

interface VRPose {
  readonly angularAcceleration: Float32Array | null;
  readonly angularVelocity: Float32Array | null;
  readonly linearAcceleration: Float32Array | null;
  readonly linearVelocity: Float32Array | null;
  readonly orientation: Float32Array | null;
  readonly position: Float32Array | null;
  readonly timestamp: number;
}

interface ValidityState {
  readonly badInput: boolean;
  readonly customError: boolean;
  readonly patternMismatch: boolean;
  readonly rangeOverflow: boolean;
  readonly rangeUnderflow: boolean;
  readonly stepMismatch: boolean;
  readonly tooLong: boolean;
  readonly tooShort: boolean;
  readonly typeMismatch: boolean;
  readonly valid: boolean;
  readonly valueMissing: boolean;
}

interface VideoPlaybackQuality {
  readonly corruptedVideoFrames: number;
  readonly creationTime: number;
  readonly droppedVideoFrames: number;
  readonly totalFrameDelay: number;
  readonly totalVideoFrames: number;
}

interface VideoTrack {
  readonly id: string;
  kind: string;
  readonly label: string;
  language: string;
  selected: boolean;
  readonly sourceBuffer: SourceBuffer;
}

interface VideoTrackListEventMap {
  "addtrack": TrackEvent;
  "change": Event;
  "removetrack": TrackEvent;
}

interface VideoTrackList extends EventTarget {
  readonly length: number;
  onaddtrack: ((this: VideoTrackList, ev: TrackEvent) => any) | null;
  onchange: ((this: VideoTrackList, ev: Event) => any) | null;
  onremovetrack: ((this: VideoTrackList, ev: TrackEvent) => any) | null;
  readonly selectedIndex: number;
  getTrackById(id: string): VideoTrack | null;
  item(index: number): VideoTrack;
  addEventListener<K extends keyof VideoTrackListEventMap>(type: K, listener: (this: VideoTrackList, ev: VideoTrackListEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof VideoTrackListEventMap>(type: K, listener: (this: VideoTrackList, ev: VideoTrackListEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  [index: number]: VideoTrack;
}

interface WEBGL_color_buffer_float {
  readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: number;
  readonly RGB32F_EXT: number;
  readonly RGBA32F_EXT: number;
  readonly UNSIGNED_NORMALIZED_EXT: number;
}

interface WEBGL_compressed_texture_astc {
  readonly COMPRESSED_RGBA_ASTC_10x10_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_10x5_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_10x6_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_10x8_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_12x10_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_12x12_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_4x4_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_5x4_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_5x5_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_6x5_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_6x6_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_8x5_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_8x6_KHR: number;
  readonly COMPRESSED_RGBA_ASTC_8x8_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: number;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: number;
  getSupportedProfiles(): string[];
}

interface WEBGL_compressed_texture_s3tc {
  readonly COMPRESSED_RGBA_S3TC_DXT1_EXT: number;
  readonly COMPRESSED_RGBA_S3TC_DXT3_EXT: number;
  readonly COMPRESSED_RGBA_S3TC_DXT5_EXT: number;
  readonly COMPRESSED_RGB_S3TC_DXT1_EXT: number;
}

interface WEBGL_compressed_texture_s3tc_srgb {
  readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: number;
  readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: number;
  readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: number;
  readonly COMPRESSED_SRGB_S3TC_DXT1_EXT: number;
}

interface WEBGL_debug_renderer_info {
  readonly UNMASKED_RENDERER_WEBGL: number;
  readonly UNMASKED_VENDOR_WEBGL: number;
}

interface WEBGL_debug_shaders {
  getTranslatedShaderSource(shader: WebGLShader): string;
}

interface WEBGL_depth_texture {
  readonly UNSIGNED_INT_24_8_WEBGL: number;
}

interface WEBGL_draw_buffers {
  readonly COLOR_ATTACHMENT0_WEBGL: number;
  readonly COLOR_ATTACHMENT10_WEBGL: number;
  readonly COLOR_ATTACHMENT11_WEBGL: number;
  readonly COLOR_ATTACHMENT12_WEBGL: number;
  readonly COLOR_ATTACHMENT13_WEBGL: number;
  readonly COLOR_ATTACHMENT14_WEBGL: number;
  readonly COLOR_ATTACHMENT15_WEBGL: number;
  readonly COLOR_ATTACHMENT1_WEBGL: number;
  readonly COLOR_ATTACHMENT2_WEBGL: number;
  readonly COLOR_ATTACHMENT3_WEBGL: number;
  readonly COLOR_ATTACHMENT4_WEBGL: number;
  readonly COLOR_ATTACHMENT5_WEBGL: number;
  readonly COLOR_ATTACHMENT6_WEBGL: number;
  readonly COLOR_ATTACHMENT7_WEBGL: number;
  readonly COLOR_ATTACHMENT8_WEBGL: number;
  readonly COLOR_ATTACHMENT9_WEBGL: number;
  readonly DRAW_BUFFER0_WEBGL: number;
  readonly DRAW_BUFFER10_WEBGL: number;
  readonly DRAW_BUFFER11_WEBGL: number;
  readonly DRAW_BUFFER12_WEBGL: number;
  readonly DRAW_BUFFER13_WEBGL: number;
  readonly DRAW_BUFFER14_WEBGL: number;
  readonly DRAW_BUFFER15_WEBGL: number;
  readonly DRAW_BUFFER1_WEBGL: number;
  readonly DRAW_BUFFER2_WEBGL: number;
  readonly DRAW_BUFFER3_WEBGL: number;
  readonly DRAW_BUFFER4_WEBGL: number;
  readonly DRAW_BUFFER5_WEBGL: number;
  readonly DRAW_BUFFER6_WEBGL: number;
  readonly DRAW_BUFFER7_WEBGL: number;
  readonly DRAW_BUFFER8_WEBGL: number;
  readonly DRAW_BUFFER9_WEBGL: number;
  readonly MAX_COLOR_ATTACHMENTS_WEBGL: number;
  readonly MAX_DRAW_BUFFERS_WEBGL: number;
  drawBuffersWEBGL(buffers: number[]): void;
}

interface WEBGL_lose_context {
  loseContext(): void;
  restoreContext(): void;
}

interface WaveShaperNode extends AudioNode {
  curve: Float32Array | null;
  oversample: OverSampleType;
}

interface WebAuthentication {
  getAssertion(assertionChallenge: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null, options?: AssertionOptions): Promise<WebAuthnAssertion>;
  makeCredential(accountInformation: Account, cryptoParameters: ScopedCredentialParameters[], attestationChallenge: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null, options?: ScopedCredentialOptions): Promise<ScopedCredentialInfo>;
}

interface WebAuthnAssertion {
  readonly authenticatorData: ArrayBuffer;
  readonly clientData: ArrayBuffer;
  readonly credential: ScopedCredential;
  readonly signature: ArrayBuffer;
}

interface WebGLActiveInfo {
  readonly name: string;
  readonly size: number;
  readonly type: number;
}

interface WebGLBuffer extends WebGLObject {
}

interface WebGLContextEvent extends Event {
  readonly statusMessage: string;
}

interface WebGLFramebuffer extends WebGLObject {
}

interface WebGLObject {
}

interface WebGLProgram extends WebGLObject {
}

interface WebGLRenderbuffer extends WebGLObject {
}

interface WebGLRenderingContext {
  readonly canvas: HTMLCanvasElement;
  readonly drawingBufferHeight: number;
  readonly drawingBufferWidth: number;
  activeTexture(texture: number): void;
  attachShader(program: WebGLProgram | null, shader: WebGLShader | null): void;
  bindAttribLocation(program: WebGLProgram | null, index: number, name: string): void;
  bindBuffer(target: number, buffer: WebGLBuffer | null): void;
  bindFramebuffer(target: number, framebuffer: WebGLFramebuffer | null): void;
  bindRenderbuffer(target: number, renderbuffer: WebGLRenderbuffer | null): void;
  bindTexture(target: number, texture: WebGLTexture | null): void;
  blendColor(red: number, green: number, blue: number, alpha: number): void;
  blendEquation(mode: number): void;
  blendEquationSeparate(modeRGB: number, modeAlpha: number): void;
  blendFunc(sfactor: number, dfactor: number): void;
  blendFuncSeparate(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void;
  bufferData(target: number, size: number | Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null, usage: number): void;
  bufferSubData(target: number, offset: number, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null): void;
  checkFramebufferStatus(target: number): number;
  clear(mask: number): void;
  clearColor(red: number, green: number, blue: number, alpha: number): void;
  clearDepth(depth: number): void;
  clearStencil(s: number): void;
  colorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): void;
  compileShader(shader: WebGLShader | null): void;
  compressedTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | null): void;
  compressedTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | null): void;
  copyTexImage2D(target: number, level: number, internalformat: number, x: number, y: number, width: number, height: number, border: number): void;
  copyTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void;
  createBuffer(): WebGLBuffer | null;
  createFramebuffer(): WebGLFramebuffer | null;
  createProgram(): WebGLProgram | null;
  createRenderbuffer(): WebGLRenderbuffer | null;
  createShader(type: number): WebGLShader | null;
  createTexture(): WebGLTexture | null;
  cullFace(mode: number): void;
  deleteBuffer(buffer: WebGLBuffer | null): void;
  deleteFramebuffer(framebuffer: WebGLFramebuffer | null): void;
  deleteProgram(program: WebGLProgram | null): void;
  deleteRenderbuffer(renderbuffer: WebGLRenderbuffer | null): void;
  deleteShader(shader: WebGLShader | null): void;
  deleteTexture(texture: WebGLTexture | null): void;
  depthFunc(func: number): void;
  depthMask(flag: boolean): void;
  depthRange(zNear: number, zFar: number): void;
  detachShader(program: WebGLProgram | null, shader: WebGLShader | null): void;
  disable(cap: number): void;
  disableVertexAttribArray(index: number): void;
  drawArrays(mode: number, first: number, count: number): void;
  drawElements(mode: number, count: number, type: number, offset: number): void;
  enable(cap: number): void;
  enableVertexAttribArray(index: number): void;
  finish(): void;
  flush(): void;
  framebufferRenderbuffer(target: number, attachment: number, renderbuffertarget: number, renderbuffer: WebGLRenderbuffer | null): void;
  framebufferTexture2D(target: number, attachment: number, textarget: number, texture: WebGLTexture | null, level: number): void;
  frontFace(mode: number): void;
  generateMipmap(target: number): void;
  getActiveAttrib(program: WebGLProgram | null, index: number): WebGLActiveInfo | null;
  getActiveUniform(program: WebGLProgram | null, index: number): WebGLActiveInfo | null;
  getAttachedShaders(program: WebGLProgram | null): WebGLShader[] | null;
  getAttribLocation(program: WebGLProgram | null, name: string): number;
  getBufferParameter(target: number, pname: number): any;
  getContextAttributes(): WebGLContextAttributes;
  getError(): number;
  getExtension(extensionName: "EXT_blend_minmax"): EXT_blend_minmax | null;
  getExtension(extensionName: "EXT_texture_filter_anisotropic"): EXT_texture_filter_anisotropic | null;
  getExtension(extensionName: "EXT_frag_depth"): EXT_frag_depth | null;
  getExtension(extensionName: "EXT_shader_texture_lod"): EXT_shader_texture_lod | null;
  getExtension(extensionName: "EXT_sRGB"): EXT_sRGB | null;
  getExtension(extensionName: "OES_vertex_array_object"): OES_vertex_array_object | null;
  getExtension(extensionName: "WEBGL_color_buffer_float"): WEBGL_color_buffer_float | null;
  getExtension(extensionName: "WEBGL_compressed_texture_astc"): WEBGL_compressed_texture_astc | null;
  getExtension(extensionName: "WEBGL_compressed_texture_s3tc_srgb"): WEBGL_compressed_texture_s3tc_srgb | null;
  getExtension(extensionName: "WEBGL_debug_shaders"): WEBGL_debug_shaders | null;
  getExtension(extensionName: "WEBGL_draw_buffers"): WEBGL_draw_buffers | null;
  getExtension(extensionName: "WEBGL_lose_context"): WEBGL_lose_context | null;
  getExtension(extensionName: "WEBGL_depth_texture"): WEBGL_depth_texture | null;
  getExtension(extensionName: "WEBGL_debug_renderer_info"): WEBGL_debug_renderer_info | null;
  getExtension(extensionName: "WEBGL_compressed_texture_s3tc"): WEBGL_compressed_texture_s3tc | null;
  getExtension(extensionName: "OES_texture_half_float_linear"): OES_texture_half_float_linear | null;
  getExtension(extensionName: "OES_texture_half_float"): OES_texture_half_float | null;
  getExtension(extensionName: "OES_texture_float_linear"): OES_texture_float_linear | null;
  getExtension(extensionName: "OES_texture_float"): OES_texture_float | null;
  getExtension(extensionName: "OES_standard_derivatives"): OES_standard_derivatives | null;
  getExtension(extensionName: "OES_element_index_uint"): OES_element_index_uint | null;
  getExtension(extensionName: "ANGLE_instanced_arrays"): ANGLE_instanced_arrays | null;
  getExtension(extensionName: string): any;
  getFramebufferAttachmentParameter(target: number, attachment: number, pname: number): any;
  getParameter(pname: number): any;
  getProgramInfoLog(program: WebGLProgram | null): string | null;
  getProgramParameter(program: WebGLProgram | null, pname: number): any;
  getRenderbufferParameter(target: number, pname: number): any;
  getShaderInfoLog(shader: WebGLShader | null): string | null;
  getShaderParameter(shader: WebGLShader | null, pname: number): any;
  getShaderPrecisionFormat(shadertype: number, precisiontype: number): WebGLShaderPrecisionFormat | null;
  getShaderSource(shader: WebGLShader | null): string | null;
  getSupportedExtensions(): string[] | null;
  getTexParameter(target: number, pname: number): any;
  getUniform(program: WebGLProgram | null, location: WebGLUniformLocation | null): any;
  getUniformLocation(program: WebGLProgram | null, name: string): WebGLUniformLocation | null;
  getVertexAttrib(index: number, pname: number): any;
  getVertexAttribOffset(index: number, pname: number): number;
  hint(target: number, mode: number): void;
  isBuffer(buffer: WebGLBuffer | null): boolean;
  isContextLost(): boolean;
  isEnabled(cap: number): boolean;
  isFramebuffer(framebuffer: WebGLFramebuffer | null): boolean;
  isProgram(program: WebGLProgram | null): boolean;
  isRenderbuffer(renderbuffer: WebGLRenderbuffer | null): boolean;
  isShader(shader: WebGLShader | null): boolean;
  isTexture(texture: WebGLTexture | null): boolean;
  lineWidth(width: number): void;
  linkProgram(program: WebGLProgram | null): void;
  pixelStorei(pname: number, param: number | boolean): void;
  polygonOffset(factor: number, units: number): void;
  readPixels(x: number, y: number, width: number, height: number, format: number, type: number, pixels: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | null): void;
  renderbufferStorage(target: number, internalformat: number, width: number, height: number): void;
  sampleCoverage(value: number, invert: boolean): void;
  scissor(x: number, y: number, width: number, height: number): void;
  shaderSource(shader: WebGLShader | null, source: string): void;
  stencilFunc(func: number, ref: number, mask: number): void;
  stencilFuncSeparate(face: number, func: number, ref: number, mask: number): void;
  stencilMask(mask: number): void;
  stencilMaskSeparate(face: number, mask: number): void;
  stencilOp(fail: number, zfail: number, zpass: number): void;
  stencilOpSeparate(face: number, fail: number, zfail: number, zpass: number): void;
  texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView | null): void;
  texImage2D(target: number, level: number, internalformat: number, format: number, type: number, pixels: ImageBitmap | ImageData | HTMLVideoElement | HTMLImageElement | HTMLCanvasElement): void;
  texParameterf(target: number, pname: number, param: number): void;
  texParameteri(target: number, pname: number, param: number): void;
  texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView | null): void;
  texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, pixels: ImageBitmap | ImageData | HTMLVideoElement | HTMLImageElement | HTMLCanvasElement): void;
  uniform1f(location: WebGLUniformLocation | null, x: number): void;
  uniform1fv(location: WebGLUniformLocation | null, v: Float32Array | ArrayLike<number>): void;
  uniform1i(location: WebGLUniformLocation | null, x: number): void;
  uniform1iv(location: WebGLUniformLocation | null, v: Int32Array | ArrayLike<number>): void;
  uniform2f(location: WebGLUniformLocation | null, x: number, y: number): void;
  uniform2fv(location: WebGLUniformLocation | null, v: Float32Array | ArrayLike<number>): void;
  uniform2i(location: WebGLUniformLocation | null, x: number, y: number): void;
  uniform2iv(location: WebGLUniformLocation | null, v: Int32Array | ArrayLike<number>): void;
  uniform3f(location: WebGLUniformLocation | null, x: number, y: number, z: number): void;
  uniform3fv(location: WebGLUniformLocation | null, v: Float32Array | ArrayLike<number>): void;
  uniform3i(location: WebGLUniformLocation | null, x: number, y: number, z: number): void;
  uniform3iv(location: WebGLUniformLocation | null, v: Int32Array | ArrayLike<number>): void;
  uniform4f(location: WebGLUniformLocation | null, x: number, y: number, z: number, w: number): void;
  uniform4fv(location: WebGLUniformLocation | null, v: Float32Array | ArrayLike<number>): void;
  uniform4i(location: WebGLUniformLocation | null, x: number, y: number, z: number, w: number): void;
  uniform4iv(location: WebGLUniformLocation | null, v: Int32Array | ArrayLike<number>): void;
  uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: boolean, value: Float32Array | ArrayLike<number>): void;
  uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: boolean, value: Float32Array | ArrayLike<number>): void;
  uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: boolean, value: Float32Array | ArrayLike<number>): void;
  useProgram(program: WebGLProgram | null): void;
  validateProgram(program: WebGLProgram | null): void;
  vertexAttrib1f(indx: number, x: number): void;
  vertexAttrib1fv(indx: number, values: Float32Array | number[]): void;
  vertexAttrib2f(indx: number, x: number, y: number): void;
  vertexAttrib2fv(indx: number, values: Float32Array | number[]): void;
  vertexAttrib3f(indx: number, x: number, y: number, z: number): void;
  vertexAttrib3fv(indx: number, values: Float32Array | number[]): void;
  vertexAttrib4f(indx: number, x: number, y: number, z: number, w: number): void;
  vertexAttrib4fv(indx: number, values: Float32Array | number[]): void;
  vertexAttribPointer(indx: number, size: number, type: number, normalized: boolean, stride: number, offset: number): void;
  viewport(x: number, y: number, width: number, height: number): void;
  readonly ACTIVE_ATTRIBUTES: number;
  readonly ACTIVE_TEXTURE: number;
  readonly ACTIVE_UNIFORMS: number;
  readonly ALIASED_LINE_WIDTH_RANGE: number;
  readonly ALIASED_POINT_SIZE_RANGE: number;
  readonly ALPHA: number;
  readonly ALPHA_BITS: number;
  readonly ALWAYS: number;
  readonly ARRAY_BUFFER: number;
  readonly ARRAY_BUFFER_BINDING: number;
  readonly ATTACHED_SHADERS: number;
  readonly BACK: number;
  readonly BLEND: number;
  readonly BLEND_COLOR: number;
  readonly BLEND_DST_ALPHA: number;
  readonly BLEND_DST_RGB: number;
  readonly BLEND_EQUATION: number;
  readonly BLEND_EQUATION_ALPHA: number;
  readonly BLEND_EQUATION_RGB: number;
  readonly BLEND_SRC_ALPHA: number;
  readonly BLEND_SRC_RGB: number;
  readonly BLUE_BITS: number;
  readonly BOOL: number;
  readonly BOOL_VEC2: number;
  readonly BOOL_VEC3: number;
  readonly BOOL_VEC4: number;
  readonly BROWSER_DEFAULT_WEBGL: number;
  readonly BUFFER_SIZE: number;
  readonly BUFFER_USAGE: number;
  readonly BYTE: number;
  readonly CCW: number;
  readonly CLAMP_TO_EDGE: number;
  readonly COLOR_ATTACHMENT0: number;
  readonly COLOR_BUFFER_BIT: number;
  readonly COLOR_CLEAR_VALUE: number;
  readonly COLOR_WRITEMASK: number;
  readonly COMPILE_STATUS: number;
  readonly COMPRESSED_TEXTURE_FORMATS: number;
  readonly CONSTANT_ALPHA: number;
  readonly CONSTANT_COLOR: number;
  readonly CONTEXT_LOST_WEBGL: number;
  readonly CULL_FACE: number;
  readonly CULL_FACE_MODE: number;
  readonly CURRENT_PROGRAM: number;
  readonly CURRENT_VERTEX_ATTRIB: number;
  readonly CW: number;
  readonly DECR: number;
  readonly DECR_WRAP: number;
  readonly DELETE_STATUS: number;
  readonly DEPTH_ATTACHMENT: number;
  readonly DEPTH_BITS: number;
  readonly DEPTH_BUFFER_BIT: number;
  readonly DEPTH_CLEAR_VALUE: number;
  readonly DEPTH_COMPONENT: number;
  readonly DEPTH_COMPONENT16: number;
  readonly DEPTH_FUNC: number;
  readonly DEPTH_RANGE: number;
  readonly DEPTH_STENCIL: number;
  readonly DEPTH_STENCIL_ATTACHMENT: number;
  readonly DEPTH_TEST: number;
  readonly DEPTH_WRITEMASK: number;
  readonly DITHER: number;
  readonly DONT_CARE: number;
  readonly DST_ALPHA: number;
  readonly DST_COLOR: number;
  readonly DYNAMIC_DRAW: number;
  readonly ELEMENT_ARRAY_BUFFER: number;
  readonly ELEMENT_ARRAY_BUFFER_BINDING: number;
  readonly EQUAL: number;
  readonly FASTEST: number;
  readonly FLOAT: number;
  readonly FLOAT_MAT2: number;
  readonly FLOAT_MAT3: number;
  readonly FLOAT_MAT4: number;
  readonly FLOAT_VEC2: number;
  readonly FLOAT_VEC3: number;
  readonly FLOAT_VEC4: number;
  readonly FRAGMENT_SHADER: number;
  readonly FRAMEBUFFER: number;
  readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;
  readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;
  readonly FRAMEBUFFER_BINDING: number;
  readonly FRAMEBUFFER_COMPLETE: number;
  readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;
  readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;
  readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;
  readonly FRAMEBUFFER_UNSUPPORTED: number;
  readonly FRONT: number;
  readonly FRONT_AND_BACK: number;
  readonly FRONT_FACE: number;
  readonly FUNC_ADD: number;
  readonly FUNC_REVERSE_SUBTRACT: number;
  readonly FUNC_SUBTRACT: number;
  readonly GENERATE_MIPMAP_HINT: number;
  readonly GEQUAL: number;
  readonly GREATER: number;
  readonly GREEN_BITS: number;
  readonly HIGH_FLOAT: number;
  readonly HIGH_INT: number;
  readonly IMPLEMENTATION_COLOR_READ_FORMAT: number;
  readonly IMPLEMENTATION_COLOR_READ_TYPE: number;
  readonly INCR: number;
  readonly INCR_WRAP: number;
  readonly INT: number;
  readonly INT_VEC2: number;
  readonly INT_VEC3: number;
  readonly INT_VEC4: number;
  readonly INVALID_ENUM: number;
  readonly INVALID_FRAMEBUFFER_OPERATION: number;
  readonly INVALID_OPERATION: number;
  readonly INVALID_VALUE: number;
  readonly INVERT: number;
  readonly KEEP: number;
  readonly LEQUAL: number;
  readonly LESS: number;
  readonly LINEAR: number;
  readonly LINEAR_MIPMAP_LINEAR: number;
  readonly LINEAR_MIPMAP_NEAREST: number;
  readonly LINES: number;
  readonly LINE_LOOP: number;
  readonly LINE_STRIP: number;
  readonly LINE_WIDTH: number;
  readonly LINK_STATUS: number;
  readonly LOW_FLOAT: number;
  readonly LOW_INT: number;
  readonly LUMINANCE: number;
  readonly LUMINANCE_ALPHA: number;
  readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;
  readonly MAX_CUBE_MAP_TEXTURE_SIZE: number;
  readonly MAX_FRAGMENT_UNIFORM_VECTORS: number;
  readonly MAX_RENDERBUFFER_SIZE: number;
  readonly MAX_TEXTURE_IMAGE_UNITS: number;
  readonly MAX_TEXTURE_SIZE: number;
  readonly MAX_VARYING_VECTORS: number;
  readonly MAX_VERTEX_ATTRIBS: number;
  readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;
  readonly MAX_VERTEX_UNIFORM_VECTORS: number;
  readonly MAX_VIEWPORT_DIMS: number;
  readonly MEDIUM_FLOAT: number;
  readonly MEDIUM_INT: number;
  readonly MIRRORED_REPEAT: number;
  readonly NEAREST: number;
  readonly NEAREST_MIPMAP_LINEAR: number;
  readonly NEAREST_MIPMAP_NEAREST: number;
  readonly NEVER: number;
  readonly NICEST: number;
  readonly NONE: number;
  readonly NOTEQUAL: number;
  readonly NO_ERROR: number;
  readonly ONE: number;
  readonly ONE_MINUS_CONSTANT_ALPHA: number;
  readonly ONE_MINUS_CONSTANT_COLOR: number;
  readonly ONE_MINUS_DST_ALPHA: number;
  readonly ONE_MINUS_DST_COLOR: number;
  readonly ONE_MINUS_SRC_ALPHA: number;
  readonly ONE_MINUS_SRC_COLOR: number;
  readonly OUT_OF_MEMORY: number;
  readonly PACK_ALIGNMENT: number;
  readonly POINTS: number;
  readonly POLYGON_OFFSET_FACTOR: number;
  readonly POLYGON_OFFSET_FILL: number;
  readonly POLYGON_OFFSET_UNITS: number;
  readonly RED_BITS: number;
  readonly RENDERBUFFER: number;
  readonly RENDERBUFFER_ALPHA_SIZE: number;
  readonly RENDERBUFFER_BINDING: number;
  readonly RENDERBUFFER_BLUE_SIZE: number;
  readonly RENDERBUFFER_DEPTH_SIZE: number;
  readonly RENDERBUFFER_GREEN_SIZE: number;
  readonly RENDERBUFFER_HEIGHT: number;
  readonly RENDERBUFFER_INTERNAL_FORMAT: number;
  readonly RENDERBUFFER_RED_SIZE: number;
  readonly RENDERBUFFER_STENCIL_SIZE: number;
  readonly RENDERBUFFER_WIDTH: number;
  readonly RENDERER: number;
  readonly REPEAT: number;
  readonly REPLACE: number;
  readonly RGB: number;
  readonly RGB565: number;
  readonly RGB5_A1: number;
  readonly RGBA: number;
  readonly RGBA4: number;
  readonly SAMPLER_2D: number;
  readonly SAMPLER_CUBE: number;
  readonly SAMPLES: number;
  readonly SAMPLE_ALPHA_TO_COVERAGE: number;
  readonly SAMPLE_BUFFERS: number;
  readonly SAMPLE_COVERAGE: number;
  readonly SAMPLE_COVERAGE_INVERT: number;
  readonly SAMPLE_COVERAGE_VALUE: number;
  readonly SCISSOR_BOX: number;
  readonly SCISSOR_TEST: number;
  readonly SHADER_TYPE: number;
  readonly SHADING_LANGUAGE_VERSION: number;
  readonly SHORT: number;
  readonly SRC_ALPHA: number;
  readonly SRC_ALPHA_SATURATE: number;
  readonly SRC_COLOR: number;
  readonly STATIC_DRAW: number;
  readonly STENCIL_ATTACHMENT: number;
  readonly STENCIL_BACK_FAIL: number;
  readonly STENCIL_BACK_FUNC: number;
  readonly STENCIL_BACK_PASS_DEPTH_FAIL: number;
  readonly STENCIL_BACK_PASS_DEPTH_PASS: number;
  readonly STENCIL_BACK_REF: number;
  readonly STENCIL_BACK_VALUE_MASK: number;
  readonly STENCIL_BACK_WRITEMASK: number;
  readonly STENCIL_BITS: number;
  readonly STENCIL_BUFFER_BIT: number;
  readonly STENCIL_CLEAR_VALUE: number;
  readonly STENCIL_FAIL: number;
  readonly STENCIL_FUNC: number;
  readonly STENCIL_INDEX: number;
  readonly STENCIL_INDEX8: number;
  readonly STENCIL_PASS_DEPTH_FAIL: number;
  readonly STENCIL_PASS_DEPTH_PASS: number;
  readonly STENCIL_REF: number;
  readonly STENCIL_TEST: number;
  readonly STENCIL_VALUE_MASK: number;
  readonly STENCIL_WRITEMASK: number;
  readonly STREAM_DRAW: number;
  readonly SUBPIXEL_BITS: number;
  readonly TEXTURE: number;
  readonly TEXTURE0: number;
  readonly TEXTURE1: number;
  readonly TEXTURE10: number;
  readonly TEXTURE11: number;
  readonly TEXTURE12: number;
  readonly TEXTURE13: number;
  readonly TEXTURE14: number;
  readonly TEXTURE15: number;
  readonly TEXTURE16: number;
  readonly TEXTURE17: number;
  readonly TEXTURE18: number;
  readonly TEXTURE19: number;
  readonly TEXTURE2: number;
  readonly TEXTURE20: number;
  readonly TEXTURE21: number;
  readonly TEXTURE22: number;
  readonly TEXTURE23: number;
  readonly TEXTURE24: number;
  readonly TEXTURE25: number;
  readonly TEXTURE26: number;
  readonly TEXTURE27: number;
  readonly TEXTURE28: number;
  readonly TEXTURE29: number;
  readonly TEXTURE3: number;
  readonly TEXTURE30: number;
  readonly TEXTURE31: number;
  readonly TEXTURE4: number;
  readonly TEXTURE5: number;
  readonly TEXTURE6: number;
  readonly TEXTURE7: number;
  readonly TEXTURE8: number;
  readonly TEXTURE9: number;
  readonly TEXTURE_2D: number;
  readonly TEXTURE_BINDING_2D: number;
  readonly TEXTURE_BINDING_CUBE_MAP: number;
  readonly TEXTURE_CUBE_MAP: number;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_X: number;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: number;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: number;
  readonly TEXTURE_CUBE_MAP_POSITIVE_X: number;
  readonly TEXTURE_CUBE_MAP_POSITIVE_Y: number;
  readonly TEXTURE_CUBE_MAP_POSITIVE_Z: number;
  readonly TEXTURE_MAG_FILTER: number;
  readonly TEXTURE_MIN_FILTER: number;
  readonly TEXTURE_WRAP_S: number;
  readonly TEXTURE_WRAP_T: number;
  readonly TRIANGLES: number;
  readonly TRIANGLE_FAN: number;
  readonly TRIANGLE_STRIP: number;
  readonly UNPACK_ALIGNMENT: number;
  readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: number;
  readonly UNPACK_FLIP_Y_WEBGL: number;
  readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: number;
  readonly UNSIGNED_BYTE: number;
  readonly UNSIGNED_INT: number;
  readonly UNSIGNED_SHORT: number;
  readonly UNSIGNED_SHORT_4_4_4_4: number;
  readonly UNSIGNED_SHORT_5_5_5_1: number;
  readonly UNSIGNED_SHORT_5_6_5: number;
  readonly VALIDATE_STATUS: number;
  readonly VENDOR: number;
  readonly VERSION: number;
  readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;
  readonly VERTEX_ATTRIB_ARRAY_ENABLED: number;
  readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: number;
  readonly VERTEX_ATTRIB_ARRAY_POINTER: number;
  readonly VERTEX_ATTRIB_ARRAY_SIZE: number;
  readonly VERTEX_ATTRIB_ARRAY_STRIDE: number;
  readonly VERTEX_ATTRIB_ARRAY_TYPE: number;
  readonly VERTEX_SHADER: number;
  readonly VIEWPORT: number;
  readonly ZERO: number;
}

interface WebGLShader extends WebGLObject {
}

interface WebGLShaderPrecisionFormat {
  readonly precision: number;
  readonly rangeMax: number;
  readonly rangeMin: number;
}

interface WebGLTexture extends WebGLObject {
}

interface WebGLUniformLocation {
}

interface WebGLVertexArrayObjectOES {
}

interface WebKitPoint {
  x: number;
  y: number;
}

interface WebSocketEventMap {
  "close": CloseEvent;
  "error": Event;
  "message": MessageEvent;
  "open": Event;
}

interface WebSocket extends EventTarget {
  binaryType: BinaryType;
  readonly bufferedAmount: number;
  readonly extensions: string;
  onclose: ((this: WebSocket, ev: CloseEvent) => any) | null;
  onerror: ((this: WebSocket, ev: Event) => any) | null;
  onmessage: ((this: WebSocket, ev: MessageEvent) => any) | null;
  onopen: ((this: WebSocket, ev: Event) => any) | null;
  readonly protocol: string;
  readonly readyState: number;
  readonly url: string;
  close(code?: number, reason?: string): void;
  send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;
  readonly CLOSED: number;
  readonly CLOSING: number;
  readonly CONNECTING: number;
  readonly OPEN: number;
  addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface WheelEvent extends MouseEvent {
  readonly deltaMode: number;
  readonly deltaX: number;
  readonly deltaY: number;
  readonly deltaZ: number;
  readonly wheelDelta: number;
  readonly wheelDeltaX: number;
  readonly wheelDeltaY: number;
  getCurrentPoint(element: Element): void;
  initWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, deltaXArg: number, deltaYArg: number, deltaZArg: number, deltaMode: number): void;
  readonly DOM_DELTA_LINE: number;
  readonly DOM_DELTA_PAGE: number;
  readonly DOM_DELTA_PIXEL: number;
}

interface WindowEventMap extends GlobalEventHandlersEventMap {
  "abort": UIEvent;
  "afterprint": Event;
  "beforeprint": Event;
  "beforeunload": BeforeUnloadEvent;
  "blur": FocusEvent;
  "canplay": Event;
  "canplaythrough": Event;
  "change": Event;
  "click": MouseEvent;
  "compassneedscalibration": Event;
  "contextmenu": PointerEvent;
  "dblclick": MouseEvent;
  "devicelight": DeviceLightEvent;
  "devicemotion": DeviceMotionEvent;
  "deviceorientation": DeviceOrientationEvent;
  "drag": DragEvent;
  "dragend": DragEvent;
  "dragenter": DragEvent;
  "dragleave": DragEvent;
  "dragover": DragEvent;
  "dragstart": DragEvent;
  "drop": DragEvent;
  "durationchange": Event;
  "emptied": Event;
  "ended": Event;
  "error": ErrorEvent;
  "focus": FocusEvent;
  "hashchange": HashChangeEvent;
  "input": Event;
  "invalid": Event;
  "keydown": KeyboardEvent;
  "keypress": KeyboardEvent;
  "keyup": KeyboardEvent;
  "load": Event;
  "loadeddata": Event;
  "loadedmetadata": Event;
  "loadstart": Event;
  "message": MessageEvent;
  "mousedown": MouseEvent;
  "mouseenter": MouseEvent;
  "mouseleave": MouseEvent;
  "mousemove": MouseEvent;
  "mouseout": MouseEvent;
  "mouseover": MouseEvent;
  "mouseup": MouseEvent;
  "mousewheel": WheelEvent;
  "MSGestureChange": Event;
  "MSGestureDoubleTap": Event;
  "MSGestureEnd": Event;
  "MSGestureHold": Event;
  "MSGestureStart": Event;
  "MSGestureTap": Event;
  "MSInertiaStart": Event;
  "MSPointerCancel": Event;
  "MSPointerDown": Event;
  "MSPointerEnter": Event;
  "MSPointerLeave": Event;
  "MSPointerMove": Event;
  "MSPointerOut": Event;
  "MSPointerOver": Event;
  "MSPointerUp": Event;
  "offline": Event;
  "online": Event;
  "orientationchange": Event;
  "pagehide": PageTransitionEvent;
  "pageshow": PageTransitionEvent;
  "pause": Event;
  "play": Event;
  "playing": Event;
  "popstate": PopStateEvent;
  "progress": ProgressEvent;
  "ratechange": Event;
  "readystatechange": ProgressEvent;
  "reset": Event;
  "resize": UIEvent;
  "scroll": UIEvent;
  "seeked": Event;
  "seeking": Event;
  "select": UIEvent;
  "stalled": Event;
  "storage": StorageEvent;
  "submit": Event;
  "suspend": Event;
  "timeupdate": Event;
  "unload": Event;
  "volumechange": Event;
  "vrdisplayactivate": Event;
  "vrdisplayblur": Event;
  "vrdisplayconnect": Event;
  "vrdisplaydeactivate": Event;
  "vrdisplaydisconnect": Event;
  "vrdisplayfocus": Event;
  "vrdisplaypointerrestricted": Event;
  "vrdisplaypointerunrestricted": Event;
  "vrdisplaypresentchange": Event;
  "waiting": Event;
}

interface Window extends EventTarget, WindowTimers, WindowSessionStorage, WindowLocalStorage, WindowConsole, GlobalEventHandlers, IDBEnvironment, WindowBase64, GlobalFetch, WikiaGlobals {
  Blob: typeof Blob;
  URL: typeof URL;
  URLSearchParams: typeof URLSearchParams;
  readonly applicationCache: ApplicationCache;
  readonly caches: CacheStorage;
  readonly clientInformation: Navigator;
  readonly closed: boolean;
  readonly crypto: Crypto;
  customElements: CustomElementRegistry;
  defaultStatus: string;
  readonly devicePixelRatio: number;
  readonly doNotTrack: string;
  readonly document: Document;
  event: Event | undefined;
  /** @deprecated */
  readonly external: External;
  readonly frameElement: Element;
  readonly frames: Window;
  readonly history: History;
  readonly innerHeight: number;
  readonly innerWidth: number;
  readonly isSecureContext: boolean;
  readonly length: number;
  location: Location;
  readonly locationbar: BarProp;
  readonly menubar: BarProp;
  readonly msContentScript: ExtensionScriptApis;
  readonly msCredentials: MSCredentials;
  name: string;
  readonly navigator: Navigator;
  offscreenBuffering: string | boolean;
  onabort: ((this: Window, ev: UIEvent) => any) | null;
  onafterprint: ((this: Window, ev: Event) => any) | null;
  onbeforeprint: ((this: Window, ev: Event) => any) | null;
  onbeforeunload: ((this: Window, ev: BeforeUnloadEvent) => any) | null;
  onblur: ((this: Window, ev: FocusEvent) => any) | null;
  oncanplay: ((this: Window, ev: Event) => any) | null;
  oncanplaythrough: ((this: Window, ev: Event) => any) | null;
  onchange: ((this: Window, ev: Event) => any) | null;
  onclick: ((this: Window, ev: MouseEvent) => any) | null;
  oncompassneedscalibration: ((this: Window, ev: Event) => any) | null;
  oncontextmenu: ((this: Window, ev: PointerEvent) => any) | null;
  ondblclick: ((this: Window, ev: MouseEvent) => any) | null;
  ondevicelight: ((this: Window, ev: DeviceLightEvent) => any) | null;
  ondevicemotion: ((this: Window, ev: DeviceMotionEvent) => any) | null;
  ondeviceorientation: ((this: Window, ev: DeviceOrientationEvent) => any) | null;
  ondrag: ((this: Window, ev: DragEvent) => any) | null;
  ondragend: ((this: Window, ev: DragEvent) => any) | null;
  ondragenter: ((this: Window, ev: DragEvent) => any) | null;
  ondragleave: ((this: Window, ev: DragEvent) => any) | null;
  ondragover: ((this: Window, ev: DragEvent) => any) | null;
  ondragstart: ((this: Window, ev: DragEvent) => any) | null;
  ondrop: ((this: Window, ev: DragEvent) => any) | null;
  ondurationchange: ((this: Window, ev: Event) => any) | null;
  onemptied: ((this: Window, ev: Event) => any) | null;
  onended: ((this: Window, ev: Event) => any) | null;
  onerror: ErrorEventHandler;
  onfocus: ((this: Window, ev: FocusEvent) => any) | null;
  onhashchange: ((this: Window, ev: HashChangeEvent) => any) | null;
  oninput: ((this: Window, ev: Event) => any) | null;
  oninvalid: ((this: Window, ev: Event) => any) | null;
  onkeydown: ((this: Window, ev: KeyboardEvent) => any) | null;
  onkeypress: ((this: Window, ev: KeyboardEvent) => any) | null;
  onkeyup: ((this: Window, ev: KeyboardEvent) => any) | null;
  onload: ((this: Window, ev: Event) => any) | null;
  onloadeddata: ((this: Window, ev: Event) => any) | null;
  onloadedmetadata: ((this: Window, ev: Event) => any) | null;
  onloadstart: ((this: Window, ev: Event) => any) | null;
  onmessage: ((this: Window, ev: MessageEvent) => any) | null;
  onmousedown: ((this: Window, ev: MouseEvent) => any) | null;
  onmouseenter: ((this: Window, ev: MouseEvent) => any) | null;
  onmouseleave: ((this: Window, ev: MouseEvent) => any) | null;
  onmousemove: ((this: Window, ev: MouseEvent) => any) | null;
  onmouseout: ((this: Window, ev: MouseEvent) => any) | null;
  onmouseover: ((this: Window, ev: MouseEvent) => any) | null;
  onmouseup: ((this: Window, ev: MouseEvent) => any) | null;
  onmousewheel: ((this: Window, ev: WheelEvent) => any) | null;
  onmsgesturechange: ((this: Window, ev: Event) => any) | null;
  onmsgesturedoubletap: ((this: Window, ev: Event) => any) | null;
  onmsgestureend: ((this: Window, ev: Event) => any) | null;
  onmsgesturehold: ((this: Window, ev: Event) => any) | null;
  onmsgesturestart: ((this: Window, ev: Event) => any) | null;
  onmsgesturetap: ((this: Window, ev: Event) => any) | null;
  onmsinertiastart: ((this: Window, ev: Event) => any) | null;
  onmspointercancel: ((this: Window, ev: Event) => any) | null;
  onmspointerdown: ((this: Window, ev: Event) => any) | null;
  onmspointerenter: ((this: Window, ev: Event) => any) | null;
  onmspointerleave: ((this: Window, ev: Event) => any) | null;
  onmspointermove: ((this: Window, ev: Event) => any) | null;
  onmspointerout: ((this: Window, ev: Event) => any) | null;
  onmspointerover: ((this: Window, ev: Event) => any) | null;
  onmspointerup: ((this: Window, ev: Event) => any) | null;
  onoffline: ((this: Window, ev: Event) => any) | null;
  ononline: ((this: Window, ev: Event) => any) | null;
  onorientationchange: ((this: Window, ev: Event) => any) | null;
  onpagehide: ((this: Window, ev: PageTransitionEvent) => any) | null;
  onpageshow: ((this: Window, ev: PageTransitionEvent) => any) | null;
  onpause: ((this: Window, ev: Event) => any) | null;
  onplay: ((this: Window, ev: Event) => any) | null;
  onplaying: ((this: Window, ev: Event) => any) | null;
  onpopstate: ((this: Window, ev: PopStateEvent) => any) | null;
  onprogress: ((this: Window, ev: ProgressEvent) => any) | null;
  onratechange: ((this: Window, ev: Event) => any) | null;
  onreadystatechange: ((this: Window, ev: ProgressEvent) => any) | null;
  onreset: ((this: Window, ev: Event) => any) | null;
  onresize: ((this: Window, ev: UIEvent) => any) | null;
  onscroll: ((this: Window, ev: UIEvent) => any) | null;
  onseeked: ((this: Window, ev: Event) => any) | null;
  onseeking: ((this: Window, ev: Event) => any) | null;
  onselect: ((this: Window, ev: UIEvent) => any) | null;
  onstalled: ((this: Window, ev: Event) => any) | null;
  onstorage: ((this: Window, ev: StorageEvent) => any) | null;
  onsubmit: ((this: Window, ev: Event) => any) | null;
  onsuspend: ((this: Window, ev: Event) => any) | null;
  ontimeupdate: ((this: Window, ev: Event) => any) | null;
  onunload: ((this: Window, ev: Event) => any) | null;
  onvolumechange: ((this: Window, ev: Event) => any) | null;
  onvrdisplayactivate: ((this: Window, ev: Event) => any) | null;
  onvrdisplayblur: ((this: Window, ev: Event) => any) | null;
  onvrdisplayconnect: ((this: Window, ev: Event) => any) | null;
  onvrdisplaydeactivate: ((this: Window, ev: Event) => any) | null;
  onvrdisplaydisconnect: ((this: Window, ev: Event) => any) | null;
  onvrdisplayfocus: ((this: Window, ev: Event) => any) | null;
  onvrdisplaypointerrestricted: ((this: Window, ev: Event) => any) | null;
  onvrdisplaypointerunrestricted: ((this: Window, ev: Event) => any) | null;
  onvrdisplaypresentchange: ((this: Window, ev: Event) => any) | null;
  onwaiting: ((this: Window, ev: Event) => any) | null;
  opener: any;
  readonly orientation: string | number;
  readonly outerHeight: number;
  readonly outerWidth: number;
  readonly pageXOffset: number;
  readonly pageYOffset: number;
  readonly parent: Window;
  readonly performance: Performance;
  readonly personalbar: BarProp;
  readonly screen: Screen;
  readonly screenLeft: number;
  readonly screenTop: number;
  readonly screenX: number;
  readonly screenY: number;
  readonly scrollX: number;
  readonly scrollY: number;
  readonly scrollbars: BarProp;
  readonly self: Window;
  readonly speechSynthesis: SpeechSynthesis;
  status: string;
  readonly statusbar: BarProp;
  readonly styleMedia: StyleMedia;
  readonly toolbar: BarProp;
  readonly top: Window;
  readonly window: Window;
  alert(message?: any): void;
  blur(): void;
  cancelAnimationFrame(handle: number): void;
  /** @deprecated */
  captureEvents(): void;
  close(): void;
  confirm(message?: string): boolean;
  createImageBitmap(image: HTMLImageElement | SVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap | ImageData | Blob, options?: ImageBitmapOptions): Promise<ImageBitmap>;
  createImageBitmap(image: HTMLImageElement | SVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap | ImageData | Blob, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>;
  departFocus(navigationReason: NavigationReason, origin: FocusNavigationOrigin): void;
  focus(): void;
  getComputedStyle(elt: Element, pseudoElt?: string | null): CSSStyleDeclaration;
  getMatchedCSSRules(elt: Element, pseudoElt?: string | null): CSSRuleList;
  getSelection(): Selection;
  matchMedia(mediaQuery: string): MediaQueryList;
  moveBy(x?: number, y?: number): void;
  moveTo(x?: number, y?: number): void;
  msWriteProfilerMark(profilerMarkName: string): void;
  open(url?: string, target?: string, features?: string, replace?: boolean): Window | null;
  postMessage(message: any, targetOrigin: string, transfer?: any[]): void;
  print(): void;
  prompt(message?: string, _default?: string): string | null;
  /** @deprecated */
  releaseEvents(): void;
  requestAnimationFrame(callback: FrameRequestCallback): number;
  resizeBy(x?: number, y?: number): void;
  resizeTo(x?: number, y?: number): void;
  scroll(options?: ScrollToOptions): void;
  scroll(x?: number, y?: number): void;
  scrollBy(options?: ScrollToOptions): void;
  scrollBy(x?: number, y?: number): void;
  scrollTo(options?: ScrollToOptions): void;
  scrollTo(x?: number, y?: number): void;
  stop(): void;
  webkitCancelAnimationFrame(handle: number): void;
  webkitConvertPointFromNodeToPage(node: Node, pt: WebKitPoint): WebKitPoint;
  webkitConvertPointFromPageToNode(node: Node, pt: WebKitPoint): WebKitPoint;
  webkitRequestAnimationFrame(callback: FrameRequestCallback): number;
  addEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface WindowBase64 {
  atob(encodedString: string): string;
  btoa(rawString: string): string;
}

interface WindowConsole {
  readonly console: Console;
}

interface WindowEventHandlersEventMap {
  "afterprint": Event;
  "beforeprint": Event;
  "beforeunload": BeforeUnloadEvent;
  "hashchange": HashChangeEvent;
  "message": MessageEvent;
  "offline": Event;
  "online": Event;
  "pagehide": PageTransitionEvent;
  "pageshow": PageTransitionEvent;
  "popstate": PopStateEvent;
  "storage": StorageEvent;
  "unload": Event;
}

interface WindowEventHandlers {
  onafterprint: ((this: WindowEventHandlers, ev: Event) => any) | null;
  onbeforeprint: ((this: WindowEventHandlers, ev: Event) => any) | null;
  onbeforeunload: ((this: WindowEventHandlers, ev: BeforeUnloadEvent) => any) | null;
  onhashchange: ((this: WindowEventHandlers, ev: HashChangeEvent) => any) | null;
  onmessage: ((this: WindowEventHandlers, ev: MessageEvent) => any) | null;
  onoffline: ((this: WindowEventHandlers, ev: Event) => any) | null;
  ononline: ((this: WindowEventHandlers, ev: Event) => any) | null;
  onpagehide: ((this: WindowEventHandlers, ev: PageTransitionEvent) => any) | null;
  onpageshow: ((this: WindowEventHandlers, ev: PageTransitionEvent) => any) | null;
  onpopstate: ((this: WindowEventHandlers, ev: PopStateEvent) => any) | null;
  onstorage: ((this: WindowEventHandlers, ev: StorageEvent) => any) | null;
  onunload: ((this: WindowEventHandlers, ev: Event) => any) | null;
  addEventListener<K extends keyof WindowEventHandlersEventMap>(type: K, listener: (this: WindowEventHandlers, ev: WindowEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof WindowEventHandlersEventMap>(type: K, listener: (this: WindowEventHandlers, ev: WindowEventHandlersEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface WindowLocalStorage {
  readonly localStorage: Storage;
}

interface WindowOrWorkerGlobalScope {
  readonly caches: CacheStorage;
  readonly indexedDB: IDBFactory;
  readonly performance: Performance;
  fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;
}

interface WindowSessionStorage {
  readonly sessionStorage: Storage;
}

interface WindowTimers extends WindowTimersExtension {
  clearInterval(handle?: number): void;
  clearTimeout(handle?: number): void;
  setInterval(handler: (...args: any[]) => void, timeout: number): number;
  setInterval(handler: any, timeout?: any, ...args: any[]): number;
  setTimeout(handler: (...args: any[]) => void, timeout: number): number;
  setTimeout(handler: any, timeout?: any, ...args: any[]): number;
}

interface WindowTimersExtension {
  clearImmediate(handle: number): void;
  setImmediate(handler: (...args: any[]) => void): number;
  setImmediate(handler: any, ...args: any[]): number;
}

interface WorkerEventMap extends AbstractWorkerEventMap {
  "message": MessageEvent;
}

interface Worker extends EventTarget, AbstractWorker {
  onmessage: ((this: Worker, ev: MessageEvent) => any) | null;
  postMessage(message: any, transfer?: any[]): void;
  terminate(): void;
  addEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface Worklet {
  addModule(moduleURL: string, options?: WorkletOptions): Promise<void>;
}

interface WritableStream {
  readonly locked: boolean;
  abort(reason?: any): Promise<void>;
  getWriter(): WritableStreamDefaultWriter;
}

interface WritableStreamDefaultController {
  error(error?: any): void;
}

interface WritableStreamDefaultWriter {
  readonly closed: Promise<void>;
  readonly desiredSize: number;
  readonly ready: Promise<void>;
  abort(reason?: any): Promise<void>;
  close(): Promise<void>;
  releaseLock(): void;
  write(chunk?: any): Promise<any>;
}

interface XMLDocument extends Document {
  addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: XMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: XMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface XMLHttpRequestEventMap extends XMLHttpRequestEventTargetEventMap {
  "readystatechange": Event;
}

interface XMLHttpRequest extends XMLHttpRequestEventTarget {
  onreadystatechange: ((this: XMLHttpRequest, ev: Event) => any) | null;
  /**
   * Returns client's state.
   */
  readonly readyState: number;
  /**
   * Returns the response's body.
   */
  readonly response: any;
  /**
   * Returns the text response.
   * Throws an "InvalidStateError" DOMException if responseType is not the empty string or "text".
   */
  readonly responseText: string;
  /**
   * Returns the response type.
   * Can be set to change the response type. Values are:
   * the empty string (default),
   * "arraybuffer",
   * "blob",
   * "document",
   * "json", and
   * "text".
   * When set: setting to "document" is ignored if current global object is not a Window object.
   * When set: throws an "InvalidStateError" DOMException if state is loading or done.
   * When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
   */
  responseType: XMLHttpRequestResponseType;
  readonly responseURL: string;
  /**
   * Returns the document response.
   * Throws an "InvalidStateError" DOMException if responseType is not the empty string or "document".
   */
  readonly responseXML: Document | null;
  readonly status: number;
  readonly statusText: string;
  /**
   * Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the
   * request has not yet completed, and the synchronous flag is unset, a timeout event will then be dispatched, or a
   * "TimeoutError" DOMException will be thrown otherwise (for the send() method).
   * When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
   */
  timeout: number;
  /**
   * Returns the associated XMLHttpRequestUpload object. It can be used to gather transmission information when data is
   * transferred to a server.
   */
  readonly upload: XMLHttpRequestUpload;
  /**
   * True when credentials are to be included in a cross-origin request. False when they are
   * to be excluded in a cross-origin request and when cookies are to be ignored in its response.
   * Initially false.
   * When set: throws an "InvalidStateError" DOMException if state is not unsent or opened, or if the send() flag is set.
   */
  withCredentials: boolean;
  /**
   * Cancels any network activity.
   */
  abort(): void;
  getAllResponseHeaders(): string;
  getResponseHeader(name: string): string | null;
  /**
   * Sets the request method, request URL, and synchronous flag.
   * Throws a "SyntaxError" DOMException if either method is not a
   * valid HTTP method or url cannot be parsed.
   * Throws a "SecurityError" DOMException if method is a
   * case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.
   * Throws an "InvalidAccessError" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.
   */
  open(method: string, url: string): void;
  open(method: string, url: string, async: boolean, username?: string | null, password?: string | null): void;
  /**
   * Acts as if the `Content-Type` header value for response is mime.
   * (It does not actually change the header though.)
   * Throws an "InvalidStateError" DOMException if state is loading or done.
   */
  overrideMimeType(mime: string): void;
  /**
   * Initiates the request. The optional argument provides the request body. The argument is ignored if request method is GET or HEAD.
   * Throws an "InvalidStateError" DOMException if either state is not opened or the send() flag is set.
   */
  send(body?: Document | BodyInit): void;
  /**
   * Combines a header in author request headers.
   * Throws an "InvalidStateError" DOMException if either state is not opened or the send() flag is set.
   * Throws a "SyntaxError" DOMException if name is not a header name
   * or if value is not a header value.
   */
  setRequestHeader(name: string, value: string): void;
  readonly DONE: number;
  readonly HEADERS_RECEIVED: number;
  readonly LOADING: number;
  readonly OPENED: number;
  readonly UNSENT: number;
  addEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var XMLHttpRequest: {
  prototype: XMLHttpRequest;
  new(): XMLHttpRequest;
  readonly DONE: number;
  readonly HEADERS_RECEIVED: number;
  readonly LOADING: number;
  readonly OPENED: number;
  readonly UNSENT: number;
};

interface XMLHttpRequestEventTargetEventMap {
  "abort": ProgressEvent;
  "error": ProgressEvent;
  "load": ProgressEvent;
  "loadend": ProgressEvent;
  "loadstart": ProgressEvent;
  "progress": ProgressEvent;
  "timeout": ProgressEvent;
}

interface XMLHttpRequestEventTarget extends EventTarget {
  onabort: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
  onerror: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
  onload: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
  onloadend: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
  onloadstart: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
  onprogress: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
  ontimeout: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
  addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface XMLHttpRequestUpload extends XMLHttpRequestEventTarget {
  addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface XMLSerializer {
  serializeToString(target: Node): string;
}

declare var XMLSerializer: {
  prototype: XMLSerializer;
  new(): XMLSerializer;
};

interface XPathEvaluator {
  createExpression(expression: string, resolver: XPathNSResolver): XPathExpression;
  createNSResolver(nodeResolver?: Node): XPathNSResolver;
  evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver | null, type: number, result: XPathResult | null): XPathResult;
}

interface XPathExpression {
  evaluate(contextNode: Node, type: number, result: XPathResult | null): XPathResult;
}

interface XPathNSResolver {
  lookupNamespaceURI(prefix: string): string;
}

interface XPathResult {
  readonly booleanValue: boolean;
  readonly invalidIteratorState: boolean;
  readonly numberValue: number;
  readonly resultType: number;
  readonly singleNodeValue: Node;
  readonly snapshotLength: number;
  readonly stringValue: string;
  iterateNext(): Node;
  snapshotItem(index: number): Node;
  readonly ANY_TYPE: number;
  readonly ANY_UNORDERED_NODE_TYPE: number;
  readonly BOOLEAN_TYPE: number;
  readonly FIRST_ORDERED_NODE_TYPE: number;
  readonly NUMBER_TYPE: number;
  readonly ORDERED_NODE_ITERATOR_TYPE: number;
  readonly ORDERED_NODE_SNAPSHOT_TYPE: number;
  readonly STRING_TYPE: number;
  readonly UNORDERED_NODE_ITERATOR_TYPE: number;
  readonly UNORDERED_NODE_SNAPSHOT_TYPE: number;
}

interface XSLTProcessor {
  clearParameters(): void;
  getParameter(namespaceURI: string, localName: string): any;
  importStylesheet(style: Node): void;
  removeParameter(namespaceURI: string, localName: string): void;
  reset(): void;
  setParameter(namespaceURI: string, localName: string, value: any): void;
  transformToDocument(source: Node): Document;
  transformToFragment(source: Node, document: Document): DocumentFragment;
}

interface webkitRTCPeerConnection extends RTCPeerConnection {
  addEventListener<K extends keyof RTCPeerConnectionEventMap>(type: K, listener: (this: webkitRTCPeerConnection, ev: RTCPeerConnectionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  removeEventListener<K extends keyof RTCPeerConnectionEventMap>(type: K, listener: (this: webkitRTCPeerConnection, ev: RTCPeerConnectionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface DecodeErrorCallback {
  (error: DOMException): void;
}

interface DecodeSuccessCallback {
  (decodedData: AudioBuffer): void;
}

interface ErrorEventHandler {
  (event: Event | string, source?: string, fileno?: number, columnNumber?: number, error?: Error): void;
}

interface EventHandlerNonNull {
  (event: Event): any;
}

interface ForEachCallback {
  (keyId: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null, status: MediaKeyStatus): void;
}

interface FrameRequestCallback {
  (time: number): void;
}

interface FunctionStringCallback {
  (data: string): void;
}

interface GenerateAssertionCallback {
  (contents: string, origin: string, options: RTCIdentityProviderOptions): Promise<RTCIdentityAssertionResult>;
}

interface IntersectionObserverCallback {
  (entries: IntersectionObserverEntry[], observer: IntersectionObserver): void;
}

interface MSLaunchUriCallback {
  (): void;
}

interface MediaQueryListListener {
  (mql: MediaQueryList): void;
}

interface MutationCallback {
  (mutations: MutationRecord[], observer: MutationObserver): void;
}

interface NavigatorUserMediaErrorCallback {
  (error: MediaStreamError): void;
}

interface NavigatorUserMediaSuccessCallback {
  (stream: MediaStream): void;
}

interface NotificationPermissionCallback {
  (permission: NotificationPermission): void;
}

interface PerformanceObserverCallback {
  (entries: PerformanceObserverEntryList, observer: PerformanceObserver): void;
}

interface PositionCallback {
  (position: Position): void;
}

interface PositionErrorCallback {
  (positionError: PositionError): void;
}

interface RTCPeerConnectionErrorCallback {
  (error: DOMException): void;
}

interface RTCSessionDescriptionCallback {
  (description: RTCSessionDescriptionInit): void;
}

interface RTCStatsCallback {
  (report: RTCStatsReport): void;
}

interface ValidateAssertionCallback {
  (assertion: string, origin: string): Promise<RTCIdentityValidationResult>;
}

interface VoidFunction {
  (): void;
}

interface WritableStreamChunkCallback {
  (chunk: any, controller: WritableStreamDefaultController): void;
}

interface WritableStreamDefaultControllerCallback {
  (controller: WritableStreamDefaultController): void;
}

interface WritableStreamErrorCallback {
  (reason: string): void;
}

interface HTMLElementTagNameMap {
  "a": HTMLAnchorElement;
  "abbr": HTMLElement;
  "acronym": HTMLElement;
  "address": HTMLElement;
  "applet": HTMLAppletElement;
  "area": HTMLAreaElement;
  "article": HTMLElement;
  "aside": HTMLElement;
  "audio": HTMLAudioElement;
  "b": HTMLElement;
  "base": HTMLBaseElement;
  "basefont": HTMLBaseFontElement;
  "bdo": HTMLElement;
  "big": HTMLElement;
  "blockquote": HTMLQuoteElement;
  "body": HTMLBodyElement;
  "br": HTMLBRElement;
  "button": HTMLButtonElement;
  "canvas": HTMLCanvasElement;
  "caption": HTMLTableCaptionElement;
  "center": HTMLElement;
  "cite": HTMLElement;
  "code": HTMLElement;
  "col": HTMLTableColElement;
  "colgroup": HTMLTableColElement;
  "data": HTMLDataElement;
  "datalist": HTMLDataListElement;
  "dd": HTMLElement;
  "del": HTMLModElement;
  "dfn": HTMLElement;
  "dir": HTMLDirectoryElement;
  "div": HTMLDivElement;
  "dl": HTMLDListElement;
  "dt": HTMLElement;
  "em": HTMLElement;
  "embed": HTMLEmbedElement;
  "fieldset": HTMLFieldSetElement;
  "figcaption": HTMLElement;
  "figure": HTMLElement;
  "font": HTMLFontElement;
  "footer": HTMLElement;
  "form": HTMLFormElement;
  "frame": HTMLFrameElement;
  "frameset": HTMLFrameSetElement;
  "h1": HTMLHeadingElement;
  "h2": HTMLHeadingElement;
  "h3": HTMLHeadingElement;
  "h4": HTMLHeadingElement;
  "h5": HTMLHeadingElement;
  "h6": HTMLHeadingElement;
  "head": HTMLHeadElement;
  "header": HTMLElement;
  "hgroup": HTMLElement;
  "hr": HTMLHRElement;
  "html": HTMLHtmlElement;
  "i": HTMLElement;
  "iframe": HTMLIFrameElement;
  "img": HTMLImageElement;
  "input": HTMLInputElement;
  "ins": HTMLModElement;
  "isindex": HTMLUnknownElement;
  "kbd": HTMLElement;
  "keygen": HTMLElement;
  "label": HTMLLabelElement;
  "legend": HTMLLegendElement;
  "li": HTMLLIElement;
  "link": HTMLLinkElement;
  "listing": HTMLPreElement;
  "map": HTMLMapElement;
  "mark": HTMLElement;
  "marquee": HTMLMarqueeElement;
  "menu": HTMLMenuElement;
  "meta": HTMLMetaElement;
  "meter": HTMLMeterElement;
  "nav": HTMLElement;
  "nextid": HTMLUnknownElement;
  "nobr": HTMLElement;
  "noframes": HTMLElement;
  "noscript": HTMLElement;
  "object": HTMLObjectElement;
  "ol": HTMLOListElement;
  "optgroup": HTMLOptGroupElement;
  "option": HTMLOptionElement;
  "output": HTMLOutputElement;
  "p": HTMLParagraphElement;
  "param": HTMLParamElement;
  "picture": HTMLPictureElement;
  "plaintext": HTMLElement;
  "pre": HTMLPreElement;
  "progress": HTMLProgressElement;
  "q": HTMLQuoteElement;
  "rt": HTMLElement;
  "ruby": HTMLElement;
  "s": HTMLElement;
  "samp": HTMLElement;
  "script": HTMLScriptElement;
  "section": HTMLElement;
  "select": HTMLSelectElement;
  "slot": HTMLSlotElement;
  "small": HTMLElement;
  "source": HTMLSourceElement;
  "span": HTMLSpanElement;
  "strike": HTMLElement;
  "strong": HTMLElement;
  "style": HTMLStyleElement;
  "sub": HTMLElement;
  "sup": HTMLElement;
  "table": HTMLTableElement;
  "tbody": HTMLTableSectionElement;
  "td": HTMLTableDataCellElement;
  "template": HTMLTemplateElement;
  "textarea": HTMLTextAreaElement;
  "tfoot": HTMLTableSectionElement;
  "th": HTMLTableHeaderCellElement;
  "thead": HTMLTableSectionElement;
  "time": HTMLTimeElement;
  "title": HTMLTitleElement;
  "tr": HTMLTableRowElement;
  "track": HTMLTrackElement;
  "tt": HTMLElement;
  "u": HTMLElement;
  "ul": HTMLUListElement;
  "var": HTMLElement;
  "video": HTMLVideoElement;
  "wbr": HTMLElement;
  "xmp": HTMLPreElement;
}

interface SVGElementTagNameMap {
  "circle": SVGCircleElement;
  "clipPath": SVGClipPathElement;
  "defs": SVGDefsElement;
  "desc": SVGDescElement;
  "ellipse": SVGEllipseElement;
  "feBlend": SVGFEBlendElement;
  "feColorMatrix": SVGFEColorMatrixElement;
  "feComponentTransfer": SVGFEComponentTransferElement;
  "feComposite": SVGFECompositeElement;
  "feConvolveMatrix": SVGFEConvolveMatrixElement;
  "feDiffuseLighting": SVGFEDiffuseLightingElement;
  "feDisplacementMap": SVGFEDisplacementMapElement;
  "feDistantLight": SVGFEDistantLightElement;
  "feFlood": SVGFEFloodElement;
  "feFuncA": SVGFEFuncAElement;
  "feFuncB": SVGFEFuncBElement;
  "feFuncG": SVGFEFuncGElement;
  "feFuncR": SVGFEFuncRElement;
  "feGaussianBlur": SVGFEGaussianBlurElement;
  "feImage": SVGFEImageElement;
  "feMerge": SVGFEMergeElement;
  "feMergeNode": SVGFEMergeNodeElement;
  "feMorphology": SVGFEMorphologyElement;
  "feOffset": SVGFEOffsetElement;
  "fePointLight": SVGFEPointLightElement;
  "feSpecularLighting": SVGFESpecularLightingElement;
  "feSpotLight": SVGFESpotLightElement;
  "feTile": SVGFETileElement;
  "feTurbulence": SVGFETurbulenceElement;
  "filter": SVGFilterElement;
  "foreignObject": SVGForeignObjectElement;
  "g": SVGGElement;
  "image": SVGImageElement;
  "line": SVGLineElement;
  "linearGradient": SVGLinearGradientElement;
  "marker": SVGMarkerElement;
  "mask": SVGMaskElement;
  "metadata": SVGMetadataElement;
  "path": SVGPathElement;
  "pattern": SVGPatternElement;
  "polygon": SVGPolygonElement;
  "polyline": SVGPolylineElement;
  "radialGradient": SVGRadialGradientElement;
  "rect": SVGRectElement;
  "stop": SVGStopElement;
  "svg": SVGSVGElement;
  "switch": SVGSwitchElement;
  "symbol": SVGSymbolElement;
  "text": SVGTextElement;
  "textPath": SVGTextPathElement;
  "tspan": SVGTSpanElement;
  "use": SVGUseElement;
  "view": SVGViewElement;
}

/** @deprecated Directly use HTMLElementTagNameMap or SVGElementTagNameMap as appropriate, instead. */
interface ElementTagNameMap extends HTMLElementTagNameMap, SVGElementTagNameMap { }

declare var Blob: typeof Blob;
declare var URL: typeof URL;
declare var URLSearchParams: typeof URLSearchParams;
declare var document: Document;
declare var location: Location;
declare var navigator: Navigator;
declare var self: Window;
declare var window: Window;
declare function alert(message?: any): void;
declare function confirm(message?: string): boolean;
declare function open(url?: string, target?: string, features?: string, replace?: boolean): Window | null;
declare function prompt(message?: string, _default?: string): string | null;
declare function clearInterval(handle?: number): void;
declare function clearTimeout(handle?: number): void;
declare function setInterval(handler: (...args: any[]) => void, timeout: number): number;
declare function setInterval(handler: any, timeout?: any, ...args: any[]): number;
declare function setTimeout(handler: (...args: any[]) => void, timeout: number): number;
declare function setTimeout(handler: any, timeout?: any, ...args: any[]): number;
declare function clearImmediate(handle: number): void;
declare function setImmediate(handler: (...args: any[]) => void): number;
declare function setImmediate(handler: any, ...args: any[]): number;
declare var sessionStorage: Storage;
declare var localStorage: Storage;
declare var console: Console;
declare function fetch(input?: Request | string, init?: RequestInit): Promise<Response>;
type BlobPart = BufferSource | Blob | string;
type HeadersInit = Headers | string[][] | Record<string, string>;
type BodyInit = Blob | BufferSource | FormData | URLSearchParams | ReadableStream | string;
type RequestInfo = Request | string;
type DOMHighResTimeStamp = number;
type PerformanceEntryList = PerformanceEntry[];
type PushMessageDataInit = BufferSource | string;
type VibratePattern = number | number[];
type BufferSource = ArrayBufferView | ArrayBuffer;
type DOMTimeStamp = number;
type FormDataEntryValue = File | string;
type ScrollBehavior = "auto" | "instant" | "smooth";
type ScrollLogicalPosition = "start" | "center" | "end" | "nearest";
type MouseWheelEvent = WheelEvent;
type ScrollRestoration = "auto" | "manual";
type InsertPosition = "beforebegin" | "afterbegin" | "beforeend" | "afterend";
type OrientationLockType = "any" | "natural" | "portrait" | "landscape" | "portrait-primary" | "portrait-secondary" | "landscape-primary"| "landscape-secondary";
type IDBValidKey = number | string | Date | BufferSource | IDBArrayKey;
type AlgorithmIdentifier = string | Algorithm;
type MutationRecordType = "attributes" | "characterData" | "childList";
type AAGUID = string;
type ByteString = string;
type ConstrainBoolean = boolean | ConstrainBooleanParameters;
type ConstrainDOMString = string | string[] | ConstrainDOMStringParameters;
type ConstrainDouble = number | ConstrainDoubleRange;
type ConstrainLong = number | ConstrainLongRange;
type CryptoOperationData = ArrayBufferView;
type GLbitfield = number;
type GLboolean = boolean;
type GLbyte = number;
type GLclampf = number;
type GLenum = number;
type GLfloat = number;
type GLint = number;
type GLintptr = number;
type GLshort = number;
type GLsizei = number;
type GLsizeiptr = number;
type GLubyte = number;
type GLuint = number;
type GLushort = number;
type IDBKeyPath = string;
type MSInboundPayload = MSVideoRecvPayload | MSAudioRecvPayload;
type MSLocalClientEvent = MSLocalClientEventBase | MSAudioLocalClientEvent;
type MSOutboundPayload = MSVideoSendPayload | MSAudioSendPayload;
type RTCIceGatherCandidate = RTCIceCandidateDictionary | RTCIceCandidateComplete;
type RTCTransport = RTCDtlsTransport | RTCSrtpSdesTransport;
type USVString = string;
type payloadtype = number;
type MessageEventSource = Window | MessagePort | ServiceWorker;
type AnimationPlayState = "idle" | "running" | "paused" | "finished";
type AppendMode = "segments" | "sequence";
type AudioContextLatencyCategory = "balanced" | "interactive" | "playback";
type AudioContextState = "suspended" | "running" | "closed";
type AutomationRate = "a-rate" | "k-rate";
type BinaryType = "blob" | "arraybuffer";
type BiquadFilterType = "lowpass" | "highpass" | "bandpass" | "lowshelf" | "highshelf" | "peaking" | "notch" | "allpass";
type CanPlayTypeResult = "" | "maybe" | "probably";
type CanvasFillRule = "nonzero" | "evenodd";
type ChannelCountMode = "max" | "clamped-max" | "explicit";
type ChannelInterpretation = "speakers" | "discrete";
type ClientTypes = "window" | "worker" | "sharedworker" | "all";
type CompositeOperation = "replace" | "add" | "accumulate";
type DisplayCaptureSurfaceType = "monitor" | "window" | "application" | "browser";
type DistanceModelType = "linear" | "inverse" | "exponential";
type DocumentReadyState = "loading" | "interactive" | "complete";
type EndOfStreamError = "network" | "decode";
type ExpandGranularity = "character" | "word" | "sentence" | "textedit";
type FillMode = "none" | "forwards" | "backwards" | "both" | "auto";
type GamepadHand = "" | "left" | "right";
type GamepadHapticActuatorType = "vibration";
type GamepadInputEmulationType = "mouse" | "keyboard" | "gamepad";
type GamepadMappingType = "" | "standard";
type IDBCursorDirection = "next" | "nextunique" | "prev" | "prevunique";
type IDBRequestReadyState = "pending" | "done";
type IDBTransactionMode = "readonly" | "readwrite" | "versionchange";
type IterationCompositeOperation = "replace" | "accumulate";
type KeyFormat = "raw" | "spki" | "pkcs8" | "jwk";
type KeyType = "public" | "private" | "secret";
type KeyUsage = "encrypt" | "decrypt" | "sign" | "verify" | "deriveKey" | "deriveBits" | "wrapKey" | "unwrapKey";
type ListeningState = "inactive" | "active" | "disambiguation";
type MSCredentialType = "FIDO_2_0";
type MSIceAddrType = "os" | "stun" | "turn" | "peer-derived";
type MSIceType = "failed" | "direct" | "relay";
type MSStatsType = "description" | "localclientevent" | "inbound-network" | "outbound-network" | "inbound-payload" | "outbound-payload" | "transportdiagnostics";
type MSTransportType = "Embedded" | "USB" | "NFC" | "BT";
type MSWebViewPermissionState = "unknown" | "defer" | "allow" | "deny";
type MSWebViewPermissionType = "geolocation" | "unlimitedIndexedDBQuota" | "media" | "pointerlock" | "webnotifications";
type MediaDeviceKind = "audioinput" | "audiooutput" | "videoinput";
type MediaKeyMessageType = "license-request" | "license-renewal" | "license-release" | "individualization-request";
type MediaKeySessionType = "temporary" | "persistent-license" | "persistent-release-message";
type MediaKeyStatus = "usable" | "expired" | "output-downscaled" | "output-not-allowed" | "status-pending" | "internal-error";
type MediaKeysRequirement = "required" | "optional" | "not-allowed";
type MediaStreamTrackState = "live" | "ended";
type NavigationReason = "up" | "down" | "left" | "right";
type NavigationType = "navigate" | "reload" | "back_forward" | "prerender";
type NotificationDirection = "auto" | "ltr" | "rtl";
type NotificationPermission = "default" | "denied" | "granted";
type OscillatorType = "sine" | "square" | "sawtooth" | "triangle" | "custom";
type OverSampleType = "none" | "2x" | "4x";
type PanningModelType = "equalpower" | "HRTF";
type PaymentComplete = "success" | "fail" | "unknown";
type PaymentShippingType = "shipping" | "delivery" | "pickup";
type PlaybackDirection = "normal" | "reverse" | "alternate" | "alternate-reverse";
type PushEncryptionKeyName = "p256dh" | "auth";
type PushPermissionState = "denied" | "granted" | "prompt";
type RTCBundlePolicy = "balanced" | "max-compat" | "max-bundle";
type RTCDataChannelState = "connecting" | "open" | "closing" | "closed";
type RTCDegradationPreference = "maintain-framerate" | "maintain-resolution" | "balanced";
type RTCDtlsRole = "auto" | "client" | "server";
type RTCDtlsTransportState = "new" | "connecting" | "connected" | "closed" | "failed";
type RTCDtxStatus = "disabled" | "enabled";
type RTCErrorDetailType = "data-channel-failure" | "dtls-failure" | "fingerprint-failure" | "idp-bad-script-failure" | "idp-execution-failure" | "idp-load-failure" | "idp-need-login" | "idp-timeout" | "idp-tls-failure" | "idp-token-expired" | "idp-token-invalid" | "sctp-failure" | "sdp-syntax-error" | "hardware-encoder-not-available" | "hardware-encoder-error";
type RTCIceCandidateType = "host" | "srflx" | "prflx" | "relay";
type RTCIceComponent = "rtp" | "rtcp";
type RTCIceConnectionState = "new" | "checking" | "connected" | "completed" | "disconnected" | "failed" | "closed";
type RTCIceCredentialType = "password" | "oauth";
type RTCIceGatherPolicy = "all" | "nohost" | "relay";
type RTCIceGathererState = "new" | "gathering" | "complete";
type RTCIceGatheringState = "new" | "gathering" | "complete";
type RTCIceProtocol = "udp" | "tcp";
type RTCIceRole = "controlling" | "controlled";
type RTCIceTcpCandidateType = "active" | "passive" | "so";
type RTCIceTransportPolicy = "relay" | "all";
type RTCIceTransportState = "new" | "checking" | "connected" | "completed" | "disconnected" | "failed" | "closed";
type RTCPeerConnectionState = "new" | "connecting" | "connected" | "disconnected" | "failed" | "closed";
type RTCPriorityType = "very-low" | "low" | "medium" | "high";
type RTCRtcpMuxPolicy = "negotiate" | "require";
type RTCRtpTransceiverDirection = "sendrecv" | "sendonly" | "recvonly" | "inactive";
type RTCSctpTransportState = "new" | "connecting" | "connected" | "closed";
type RTCSdpType = "offer" | "pranswer" | "answer" | "rollback";
type RTCSignalingState = "stable" | "have-local-offer" | "have-remote-offer" | "have-local-pranswer" | "have-remote-pranswer" | "closed";
type RTCStatsIceCandidatePairState = "frozen" | "waiting" | "inprogress" | "failed" | "succeeded" | "cancelled";
type RTCStatsIceCandidateType = "host" | "serverreflexive" | "peerreflexive" | "relayed";
type RTCStatsType = "inboundrtp" | "outboundrtp" | "session" | "datachannel" | "track" | "transport" | "candidatepair" | "localcandidate" | "remotecandidate";
type ReadyState = "closed" | "open" | "ended";
type ReferrerPolicy = "" | "no-referrer" | "no-referrer-when-downgrade" | "origin-only" | "origin-when-cross-origin" | "unsafe-url";
type RequestCache = "default" | "no-store" | "reload" | "no-cache" | "force-cache" | "only-if-cached";
type RequestCredentials = "omit" | "same-origin" | "include";
type RequestDestination = "" | "audio" | "audioworklet" | "document" | "embed" | "font" | "image" | "manifest" | "object" | "paintworklet" | "report" | "script" | "sharedworker" | "style" | "track" | "video" | "worker" | "xslt";
type RequestMode = "navigate" | "same-origin" | "no-cors" | "cors";
type RequestRedirect = "follow" | "error" | "manual";
type ResponseType = "basic" | "cors" | "default" | "error" | "opaque" | "opaqueredirect";
type ScopedCredentialType = "ScopedCred";
type SelectionMode = "select" | "start" | "end" | "preserve";
type ServiceWorkerState = "installing" | "installed" | "activating" | "activated" | "redundant";
type ServiceWorkerUpdateViaCache = "imports" | "all" | "none";
type TextTrackKind = "subtitles" | "captions" | "descriptions" | "chapters" | "metadata";
type TextTrackMode = "disabled" | "hidden" | "showing";
type TouchType = "direct" | "stylus";
type Transport = "usb" | "nfc" | "ble";
type VRDisplayEventReason = "mounted" | "navigation" | "requested" | "unmounted";
type VREye = "left" | "right";
type VideoFacingModeEnum = "user" | "environment" | "left" | "right";
type VisibilityState = "hidden" | "visible" | "prerender" | "unloaded";
type WorkerType = "classic" | "module";
type XMLHttpRequestResponseType = "" | "arraybuffer" | "blob" | "document" | "json" | "text";
// Type definitions for jquery 3.3
// Project: https://jquery.com
// Definitions by: Leonard Thieu <https://github.com/leonard-thieu>
//                 Boris Yankov <https://github.com/borisyankov>
//                 Christian Hoffmeister <https://github.com/choffmeister>
//                 Steve Fenton <https://github.com/Steve-Fenton>
//                 Diullei Gomes <https://github.com/Diullei>
//                 Tass Iliopoulos <https://github.com/tasoili>
//                 Jason Swearingen <https://github.com/jasons-novaleaf>
//                 Sean Hill <https://github.com/seanski>
//                 Guus Goossens <https://github.com/Guuz>
//                 Kelly Summerlin <https://github.com/ksummerlin>
//                 Basarat Ali Syed <https://github.com/basarat>
//                 Nicholas Wolverson <https://github.com/nwolverson>
//                 Derek Cicerone <https://github.com/derekcicerone>
//                 Andrew Gaspar <https://github.com/AndrewGaspar>
//                 Seikichi Kondo <https://github.com/seikichi>
//                 Benjamin Jackman <https://github.com/benjaminjackman>
//                 Poul Sorensen <https://github.com/s093294>
//                 Josh Strobl <https://github.com/JoshStrobl>
//                 John Reilly <https://github.com/johnnyreilly>
//                 Dick van den Brink <https://github.com/DickvdBrink>
//                 Thomas Schulz <https://github.com/King2500>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.3

declare module 'jquery' {
  export = jQuery;
}

declare module 'jquery/dist/jquery.slim' {
  export = jQuery;
}

declare const jQuery: JQueryStatic;
declare const $: JQueryStatic;

// Used by JQuery.Event
type _Event = Event;
// Used by JQuery.Promise3 and JQuery.Promise
type _Promise<T> = Promise<T>;

interface JQueryStatic<TElement = HTMLElement> {
  /**
   * @see {@link http://api.jquery.com/jquery.ajax/#jQuery-ajax1}
   * @deprecated Use jQuery.ajaxSetup(options)
   */
  ajaxSettings: JQuery.AjaxSettings;
  /**
   * A factory function that returns a chainable utility object with methods to register multiple
   * callbacks into callback queues, invoke callback queues, and relay the success or failure state of
   * any synchronous or asynchronous function.
   *
   * @param beforeStart A function that is called just before the constructor returns.
   * @see {@link https://api.jquery.com/jQuery.Deferred/}
   * @since 1.5
   */
  Deferred: JQuery.DeferredStatic;
  Event: JQuery.EventStatic<TElement>;
  /**
   * Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize
   * CSS property naming, or create custom properties.
   *
   * @see {@link https://api.jquery.com/jQuery.cssHooks/}
   * @since 1.4.3
   */
  cssHooks: JQuery.PlainObject<JQuery.CSSHook<TElement>>;
  /**
   * An object containing all CSS properties that may be used without a unit. The .css() method uses this
   * object to see if it may append px to unitless values.
   *
   * @see {@link https://api.jquery.com/jQuery.cssNumber/}
   * @since 1.4.3
   */
  cssNumber: JQuery.PlainObject<boolean>;
  readonly fn: JQuery<TElement>;
  fx: {
      /**
       * The rate (in milliseconds) at which animations fire.
       *
       * @see {@link https://api.jquery.com/jQuery.fx.interval/}
       * @since 1.4.3
       * @deprecated 3.0
       */
      interval: number;
      /**
       * Globally disable all animations.
       *
       * @see {@link https://api.jquery.com/jQuery.fx.off/}
       * @since 1.3
       */
      off: boolean;
      step: JQuery.PlainObject<JQuery.AnimationHook<Node>>;
  };
  /**
   * A Promise-like object (or "thenable") that resolves when the document is ready.
   *
   * @see {@link https://api.jquery.com/jQuery.ready/}
   * @since 1.8
   */
  ready: JQuery.Thenable<JQueryStatic<TElement>>;
  /**
   * A collection of properties that represent the presence of different browser features or bugs.
   * Intended for jQuery's internal use; specific properties may be removed when they are no longer
   * needed internally to improve page startup performance. For your own project's feature-detection
   * needs, we strongly recommend the use of an external library such as Modernizr instead of dependency
   * on properties in jQuery.support.
   *
   * @see {@link https://api.jquery.com/jQuery.support/}
   * @since 1.3
   * @deprecated 1.9
   */
  support: JQuery.PlainObject;
  valHooks: JQuery.PlainObject<JQuery.ValHook<TElement>>;
  /**
   * Creates DOM elements on the fly from the provided string of raw HTML.
   *
   * @param html A string of HTML to create on the fly. Note that this parses HTML, not XML.
   *             A string defining a single, standalone, HTML element (e.g. <div/> or <div></div>).
   * @param ownerDocument_attributes A document in which the new elements will be created.
   *                                 An object of attributes, events, and methods to call on the newly-created element.
   * @see {@link https://api.jquery.com/jQuery/}
   * @since 1.0
   * @since 1.4
   */
  (html: JQuery.htmlString, ownerDocument_attributes: Document | JQuery.PlainObject): JQuery<TElement>;
  /**
   * Accepts a string containing a CSS selector which is then used to match a set of elements.
   *
   * @param selector A string containing a selector expression
   * @param context A DOM Element, Document, or jQuery to use as context
   * @see {@link https://api.jquery.com/jQuery/}
   * @since 1.0
   */
  (selector: JQuery.Selector, context: Element | Document | JQuery | undefined): JQuery<TElement>;
  // HACK: This is the factory function returned when importing jQuery without a DOM. Declaring it separately breaks using the type parameter on JQueryStatic.
  // HACK: The discriminator parameter handles the edge case of passing a Window object to JQueryStatic. It doesn't actually exist on the factory function.
  <FElement extends Node = HTMLElement>(window: Window, discriminator: boolean): JQueryStatic<FElement>;
  /**
   * Return a collection of matched elements either found in the DOM based on passed argument(s) or created
   * by passing an HTML string.
   *
   * @param element_elementArray A DOM element to wrap in a jQuery object.
   *                             An array containing a set of DOM elements to wrap in a jQuery object.
   * @see {@link https://api.jquery.com/jQuery/}
   * @since 1.0
   */
  <T extends Element>(element_elementArray: T | ArrayLike<T>): JQuery<T>;
  /**
   * Return a collection of matched elements either found in the DOM based on passed argument(s) or created
   * by passing an HTML string.
   *
   * @param selection An existing jQuery object to clone.
   * @see {@link https://api.jquery.com/jQuery/}
   * @since 1.0
   */
  <T>(selection: JQuery<T>): JQuery<T>;
  /**
   * Accepts a string containing a CSS selector which is then used to match a set of elements.
   *
   * Creates DOM elements on the fly from the provided string of raw HTML.
   *
   * Binds a function to be executed when the DOM has finished loading.
   *
   * @param selector_object_callback A string containing a selector expression
   *                                 A string of HTML to create on the fly. Note that this parses HTML, not XML.
   *                                 The function to execute when the DOM is ready.
   * @see {@link https://api.jquery.com/jQuery/}
   * @since 1.0
   */
  (selector_object_callback: JQuery.Selector | JQuery.htmlString | ((this: Document, $: JQueryStatic<TElement>) => void)): JQuery<TElement>; // tslint:disable-line:unified-signatures
  /**
   * Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.
   *
   * @param object A plain object to wrap in a jQuery object.
   * @see {@link https://api.jquery.com/jQuery/}
   * @since 1.0
   */
  <T extends JQuery.PlainObject>(object: T): JQuery<T>;
  /**
   * Returns an empty jQuery set.
   *
   * @see {@link https://api.jquery.com/jQuery/}
   * @since 1.4
   */
  (): JQuery<TElement>;
  /**
   * A multi-purpose callbacks list object that provides a powerful way to manage callback lists.
   *
   * @param flags An optional list of space-separated flags that change how the callback list behaves.
   * @see {@link https://api.jquery.com/jQuery.Callbacks/}
   * @since 1.7
   */
  Callbacks<T extends Function>(flags?: string): JQuery.Callbacks<T>;
  /**
   * Perform an asynchronous HTTP (Ajax) request.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param settings A set of key/value pairs that configure the Ajax request. All settings are optional. A default can
   *                 be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings.
   * @see {@link https://api.jquery.com/jQuery.ajax/}
   * @since 1.5
   */
  ajax(url: string, settings?: JQuery.AjaxSettings): JQuery.jqXHR;
  /**
   * Perform an asynchronous HTTP (Ajax) request.
   *
   * @param settings A set of key/value pairs that configure the Ajax request. All settings are optional. A default can
   *                 be set for any option with $.ajaxSetup().
   * @see {@link https://api.jquery.com/jQuery.ajax/}
   * @since 1.0
   */
  ajax(settings?: JQuery.AjaxSettings): JQuery.jqXHR;
  /**
   * Handle custom Ajax options or modify existing options before each request is sent and before they
   * are processed by $.ajax().
   *
   * @param dataTypes An optional string containing one or more space-separated dataTypes
   * @param handler A handler to set default values for future Ajax requests.
   * @see {@link https://api.jquery.com/jQuery.ajaxPrefilter/}
   * @since 1.5
   */
  ajaxPrefilter(dataTypes: string,
                handler: (options: JQuery.AjaxSettings, originalOptions: JQuery.AjaxSettings, jqXHR: JQuery.jqXHR) => string | void): void;
  /**
   * Handle custom Ajax options or modify existing options before each request is sent and before they
   * are processed by $.ajax().
   *
   * @param handler A handler to set default values for future Ajax requests.
   * @see {@link https://api.jquery.com/jQuery.ajaxPrefilter/}
   * @since 1.5
   */
  ajaxPrefilter(handler: (options: JQuery.AjaxSettings, originalOptions: JQuery.AjaxSettings, jqXHR: JQuery.jqXHR) => string | void): void;
  /**
   * Set default values for future Ajax requests. Its use is not recommended.
   *
   * @param options A set of key/value pairs that configure the default Ajax request. All options are optional.
   * @see {@link https://api.jquery.com/jQuery.ajaxSetup/}
   * @since 1.1
   */
  ajaxSetup(options: JQuery.AjaxSettings): JQuery.AjaxSettings;
  /**
   * Creates an object that handles the actual transmission of Ajax data.
   *
   * @param dataType A string identifying the data type to use
   * @param handler A handler to return the new transport object to use with the data type provided in the first argument.
   * @see {@link https://api.jquery.com/jQuery.ajaxTransport/}
   * @since 1.5
   */
  ajaxTransport(dataType: string,
                handler: (options: JQuery.AjaxSettings, originalOptions: JQuery.AjaxSettings, jqXHR: JQuery.jqXHR) => JQuery.Transport | void): void;
  /**
   * @deprecated 3.3
   */
  camelCase(value: string): string;
  /**
   * Check to see if a DOM element is a descendant of another DOM element.
   *
   * @param container The DOM element that may contain the other element.
   * @param contained The DOM element that may be contained by (a descendant of) the other element.
   * @see {@link https://api.jquery.com/jQuery.contains/}
   * @since 1.4
   */
  contains(container: Element, contained: Element): boolean;
  css(elem: Element, unknown: any): any;
  /**
   * Returns value at named data store for the element, as set by jQuery.data(element, name, value), or
   * the full data store for the element.
   *
   * @param element The DOM element to query for the data.
   * @param key Name of the data stored.
   * @see {@link https://api.jquery.com/jQuery.data/}
   * @since 1.2.3
   */
  data(element: Element, key: string, undefined: undefined): any; // tslint:disable-line:unified-signatures
  /**
   * Store arbitrary data associated with the specified element. Returns the value that was set.
   *
   * @param element The DOM element to associate with the data.
   * @param key A string naming the piece of data to set.
   * @param value The new data value; this can be any Javascript type except undefined.
   * @see {@link https://api.jquery.com/jQuery.data/}
   * @since 1.2.3
   */
  data<T>(element: Element, key: string, value: T): T;
  /**
   * Returns value at named data store for the element, as set by jQuery.data(element, name, value), or
   * the full data store for the element.
   *
   * @param element The DOM element to query for the data.
   * @param key Name of the data stored.
   * @see {@link https://api.jquery.com/jQuery.data/}
   * @since 1.2.3
   * @since 1.4
   */
  data(element: Element, key?: string): any;
  /**
   * Execute the next function on the queue for the matched element.
   *
   * @param element A DOM element from which to remove and execute a queued function.
   * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
   * @see {@link https://api.jquery.com/jQuery.dequeue/}
   * @since 1.3
   */
  dequeue(element: Element, queueName?: string): void;
  /**
   * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays.
   * Arrays and array-like objects with a length property (such as a function's arguments object) are
   * iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
   *
   * @param array The array to iterate over.
   * @param callback The function that will be executed on every object.
   * @see {@link https://api.jquery.com/jQuery.each/}
   * @since 1.0
   */
  each<T>(array: ArrayLike<T>, callback: (this: T, indexInArray: number, value: T) => false | any): ArrayLike<T>;
  /**
   * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays.
   * Arrays and array-like objects with a length property (such as a function's arguments object) are
   * iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
   *
   * @param obj The object to iterate over.
   * @param callback The function that will be executed on every object.
   * @see {@link https://api.jquery.com/jQuery.each/}
   * @since 1.0
   */
  each<T, K extends keyof T>(obj: T, callback: (this: T[K], propertyName: K, valueOfProperty: T[K]) => false | any): T;
  /**
   * Takes a string and throws an exception containing it.
   *
   * @param message The message to send out.
   * @see {@link https://api.jquery.com/jQuery.error/}
   * @since 1.4.1
   */
  error(message: string): any;
  /**
   * Escapes any character that has a special meaning in a CSS selector.
   *
   * @param selector A string containing a selector expression to escape.
   * @see {@link https://api.jquery.com/jQuery.escapeSelector/}
   * @since 3.0
   */
  escapeSelector(selector: JQuery.Selector): JQuery.Selector;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
   * @param target The object to extend. It will receive the new properties.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.1.4
   */
  extend<T, U, V, W, X, Y, Z>(deep: true, target: T, object1: U, object2: V, object3: W, object4: X, object5: Y, object6: Z): T & U & V & W & X & Y & Z;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
   * @param target The object to extend. It will receive the new properties.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.1.4
   */
  extend<T, U, V, W, X, Y>(deep: true, target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T & U & V & W & X & Y;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
   * @param target The object to extend. It will receive the new properties.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.1.4
   */
  extend<T, U, V, W, X>(deep: true, target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
   * @param target The object to extend. It will receive the new properties.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.1.4
   */
  extend<T, U, V, W>(deep: true, target: T, object1: U, object2: V, object3: W): T & U & V & W;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
   * @param target The object to extend. It will receive the new properties.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.1.4
   */
  extend<T, U, V>(deep: true, target: T, object1: U, object2: V): T & U & V;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
   * @param target The object to extend. It will receive the new properties.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.1.4
   */
  extend<T, U>(deep: true, target: T, object1: U): T & U;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.
   * @param target The object to extend. It will receive the new properties.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.1.4
   */
  extend(deep: true, target: any, object1: any, ...objects: any[]): any;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param target An object that will receive the new properties if additional objects are passed in or that will
   *               extend the jQuery namespace if it is the sole argument.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.0
   */
  extend<T, U, V, W, X, Y, Z>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y, object6: Z): T & U & V & W & X & Y & Z;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param target An object that will receive the new properties if additional objects are passed in or that will
   *               extend the jQuery namespace if it is the sole argument.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.0
   */
  extend<T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T & U & V & W & X & Y;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param target An object that will receive the new properties if additional objects are passed in or that will
   *               extend the jQuery namespace if it is the sole argument.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.0
   */
  extend<T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param target An object that will receive the new properties if additional objects are passed in or that will
   *               extend the jQuery namespace if it is the sole argument.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.0
   */
  extend<T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param target An object that will receive the new properties if additional objects are passed in or that will
   *               extend the jQuery namespace if it is the sole argument.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.0
   */
  extend<T, U, V>(target: T, object1: U, object2: V): T & U & V;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param target An object that will receive the new properties if additional objects are passed in or that will
   *               extend the jQuery namespace if it is the sole argument.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.0
   */
  extend<T, U>(target: T, object1: U): T & U;
  /**
   * Merge the contents of two or more objects together into the first object.
   *
   * @param target An object that will receive the new properties if additional objects are passed in or that will
   *               extend the jQuery namespace if it is the sole argument.
   * @see {@link https://api.jquery.com/jQuery.extend/}
   * @since 1.0
   */
  extend(target: any, object1: any, ...objects: any[]): any;
  /**
   * Load data from the server using a HTTP GET request.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param data A plain object or string that is sent to the server with the request.
   * @param success A callback function that is executed if the request succeeds. Required if dataType is provided, but
   *                you can use null or jQuery.noop as a placeholder.
   * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
   * @see {@link https://api.jquery.com/jQuery.get/}
   * @since 1.0
   */
  get(url: string,
      data: JQuery.PlainObject | string,
      success: JQuery.jqXHR.DoneCallback | null,
      dataType?: string): JQuery.jqXHR;
  /**
   * Load data from the server using a HTTP GET request.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param success A callback function that is executed if the request succeeds. Required if dataType is provided, but
   *                you can use null or jQuery.noop as a placeholder.
   * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
   * @see {@link https://api.jquery.com/jQuery.get/}
   * @since 1.0
   */
  get(url: string,
      success: JQuery.jqXHR.DoneCallback | null,
      dataType: string): JQuery.jqXHR;
  /**
   * Load data from the server using a HTTP GET request.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param success_data A callback function that is executed if the request succeeds. Required if dataType is provided, but
   *                     you can use null or jQuery.noop as a placeholder.
   *                     A plain object or string that is sent to the server with the request.
   * @see {@link https://api.jquery.com/jQuery.get/}
   * @since 1.0
   */
  get(url: string,
      success_data: JQuery.jqXHR.DoneCallback | JQuery.PlainObject | string): JQuery.jqXHR;
  /**
   * Load data from the server using a HTTP GET request.
   *
   * @param url_settings A string containing the URL to which the request is sent.
   *                     A set of key/value pairs that configure the Ajax request. All properties except for url are
   *                     optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) for a
   *                     complete list of all settings. The type option will automatically be set to GET.
   * @see {@link https://api.jquery.com/jQuery.get/}
   * @since 1.0
   * @since 1.12
   * @since 2.2
   */
  get(url_settings?: string | JQuery.UrlAjaxSettings): JQuery.jqXHR;
  /**
   * Load JSON-encoded data from the server using a GET HTTP request.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param data A plain object or string that is sent to the server with the request.
   * @param success A callback function that is executed if the request succeeds.
   * @see {@link https://api.jquery.com/jQuery.getJSON/}
   * @since 1.0
   */
  getJSON(url: string,
          data: JQuery.PlainObject | string,
          success: JQuery.jqXHR.DoneCallback): JQuery.jqXHR;
  /**
   * Load JSON-encoded data from the server using a GET HTTP request.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param success_data A callback function that is executed if the request succeeds.
   *                     A plain object or string that is sent to the server with the request.
   * @see {@link https://api.jquery.com/jQuery.getJSON/}
   * @since 1.0
   */
  getJSON(url: string,
          success_data?: JQuery.jqXHR.DoneCallback | JQuery.PlainObject | string): JQuery.jqXHR;
  /**
   * Load a JavaScript file from the server using a GET HTTP request, then execute it.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param success A callback function that is executed if the request succeeds.
   * @see {@link https://api.jquery.com/jQuery.getScript/}
   * @since 1.0
   */
  getScript(url: string,
            success?: JQuery.jqXHR.DoneCallback<string | undefined>): JQuery.jqXHR<string | undefined>;
  /**
   * Execute some JavaScript code globally.
   *
   * @param code The JavaScript code to execute.
   * @see {@link https://api.jquery.com/jQuery.globalEval/}
   * @since 1.0.4
   */
  globalEval(code: string): void;
  /**
   * Finds the elements of an array which satisfy a filter function. The original array is not affected.
   *
   * @param array The array-like object to search through.
   * @param fn The function to process each item against. The first argument to the function is the item, and the
   *           second argument is the index. The function should return a Boolean value. this will be the global window object.
   * @param invert If "invert" is false, or not provided, then the function returns an array consisting of all elements
   *               for which "callback" returns true. If "invert" is true, then the function returns an array
   *               consisting of all elements for which "callback" returns false.
   * @see {@link https://api.jquery.com/jQuery.grep/}
   * @since 1.0
   */
  grep<T>(array: ArrayLike<T>,
          fn: (elementOfArray: T, indexInArray: number) => boolean,
          invert?: boolean): T[];
  /**
   * Determine whether an element has any jQuery data associated with it.
   *
   * @param element A DOM element to be checked for data.
   * @see {@link https://api.jquery.com/jQuery.hasData/}
   * @since 1.5
   */
  hasData(element: Element): boolean;
  /**
   * Holds or releases the execution of jQuery's ready event.
   *
   * @param hold Indicates whether the ready hold is being requested or released
   * @see {@link https://api.jquery.com/jQuery.holdReady/}
   * @since 1.6
   * @deprecated 3.2
   */
  holdReady(hold: boolean): void;
  /**
   * Modify and filter HTML strings passed through jQuery manipulation methods.
   *
   * @param html The HTML string on which to operate.
   * @see {@link https://api.jquery.com/jQuery.htmlPrefilter/}
   * @since 1.12/2.2
   */
  htmlPrefilter(html: JQuery.htmlString): JQuery.htmlString;
  /**
   * Search for a specified value within an array and return its index (or -1 if not found).
   *
   * @param value The value to search for.
   * @param array An array through which to search.
   * @param fromIndex The index of the array at which to begin the search. The default is 0, which will search the whole array.
   * @see {@link https://api.jquery.com/jQuery.inArray/}
   * @since 1.2
   */
  inArray<T>(value: T, array: T[], fromIndex?: number): number;
  /**
   * Determine whether the argument is an array.
   *
   * @param obj Object to test whether or not it is an array.
   * @see {@link https://api.jquery.com/jQuery.isArray/}
   * @since 1.3
   * @deprecated 3.2
   */
  isArray(obj: any): obj is any[];
  /**
   * Check to see if an object is empty (contains no enumerable properties).
   *
   * @param obj The object that will be checked to see if it's empty.
   * @see {@link https://api.jquery.com/jQuery.isEmptyObject/}
   * @since 1.4
   */
  isEmptyObject(obj: any): boolean;
  /**
   * Determine if the argument passed is a JavaScript function object.
   *
   * @param obj Object to test whether or not it is a function.
   * @see {@link https://api.jquery.com/jQuery.isFunction/}
   * @since 1.2
   * @deprecated 3.3
   */
  isFunction(obj: any): obj is Function;
  /**
   * Determines whether its argument represents a JavaScript number.
   *
   * @param value The value to be tested.
   * @see {@link https://api.jquery.com/jQuery.isNumeric/}
   * @since 1.7
   * @deprecated 3.3
   */
  isNumeric(value: any): value is number;
  /**
   * Check to see if an object is a plain object (created using "{}" or "new Object").
   *
   * @param obj The object that will be checked to see if it's a plain object.
   * @see {@link https://api.jquery.com/jQuery.isPlainObject/}
   * @since 1.4
   */
  isPlainObject(obj: any): obj is JQuery.PlainObject;
  /**
   * Determine whether the argument is a window.
   *
   * @param obj Object to test whether or not it is a window.
   * @see {@link https://api.jquery.com/jQuery.isWindow/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  isWindow(obj: any): obj is Window;
  /**
   * Check to see if a DOM node is within an XML document (or is an XML document).
   *
   * @param node The DOM node that will be checked to see if it's in an XML document.
   * @see {@link https://api.jquery.com/jQuery.isXMLDoc/}
   * @since 1.1.4
   */
  isXMLDoc(node: Node): boolean;
  /**
   * Convert an array-like object into a true JavaScript array.
   *
   * @param obj Any object to turn into a native Array.
   * @see {@link https://api.jquery.com/jQuery.makeArray/}
   * @since 1.2
   */
  makeArray<T>(obj: ArrayLike<T>): T[];
  /**
   * Translate all items in an array or object to new array of items.
   *
   * @param array The Array to translate.
   * @param callback The function to process each item against. The first argument to the function is the array item, the
   *                 second argument is the index in array The function can return any value. A returned array will be
   *                 flattened into the resulting array. Within the function, this refers to the global (window) object.
   * @see {@link https://api.jquery.com/jQuery.map/}
   * @since 1.0
   */
  map<T, TReturn>(array: T[], callback: (this: Window, elementOfArray: T, indexInArray: number) => JQuery.TypeOrArray<TReturn> | null | undefined): TReturn[];
  /**
   * Translate all items in an array or object to new array of items.
   *
   * @param obj The Object to translate.
   * @param callback The function to process each item against. The first argument to the function is the value; the
   *                 second argument is the key of the object property. The function can return any value to add to the
   *                 array. A returned array will be flattened into the resulting array. Within the function, this refers
   *                 to the global (window) object.
   * @see {@link https://api.jquery.com/jQuery.map/}
   * @since 1.6
   */
  map<T, K extends keyof T, TReturn>(obj: T, callback: (this: Window, propertyOfObject: T[K], key: K) => JQuery.TypeOrArray<TReturn> | null | undefined): TReturn[];
  /**
   * Merge the contents of two arrays together into the first array.
   *
   * @param first The first array-like object to merge, the elements of second added.
   * @param second The second array-like object to merge into the first, unaltered.
   * @see {@link https://api.jquery.com/jQuery.merge/}
   * @since 1.0
   */
  merge<T, U>(first: ArrayLike<T>, second: ArrayLike<U>): Array<T | U>;
  /**
   * Relinquish jQuery's control of the $ variable.
   *
   * @param removeAll A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).
   * @see {@link https://api.jquery.com/jQuery.noConflict/}
   * @since 1.0
   */
  noConflict(removeAll?: boolean): this;
  /**
   * An empty function.
   *
   * @see {@link https://api.jquery.com/jQuery.noop/}
   * @since 1.4
   */
  noop(): undefined;
  /**
   * Return a number representing the current time.
   *
   * @see {@link https://api.jquery.com/jQuery.now/}
   * @since 1.4.3
   * @deprecated 3.3 Use Date.now().
   */
  now(): number;
  /**
   * Create a serialized representation of an array, a plain object, or a jQuery object suitable for use
   * in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input
   * elements with name/value properties.
   *
   * @param obj An array, a plain object, or a jQuery object to serialize.
   * @param traditional A Boolean indicating whether to perform a traditional "shallow" serialization.
   * @see {@link https://api.jquery.com/jQuery.param/}
   * @since 1.2
   * @since 1.4
   */
  param(obj: any[] | JQuery.PlainObject | JQuery, traditional?: boolean): string;
  /**
   * Parses a string into an array of DOM nodes.
   *
   * @param data HTML string to be parsed
   * @param context Document element to serve as the context in which the HTML fragment will be created
   * @param keepScripts A Boolean indicating whether to include scripts passed in the HTML string
   * @see {@link https://api.jquery.com/jQuery.parseHTML/}
   * @since 1.8
   */
  parseHTML(data: string, context: Document | null | undefined, keepScripts: boolean): JQuery.Node[];
  /**
   * Parses a string into an array of DOM nodes.
   *
   * @param data HTML string to be parsed
   * @param context_keepScripts Document element to serve as the context in which the HTML fragment will be created
   *                            A Boolean indicating whether to include scripts passed in the HTML string
   * @see {@link https://api.jquery.com/jQuery.parseHTML/}
   * @since 1.8
   */
  parseHTML(data: string, context_keepScripts?: Document | null | boolean): JQuery.Node[];
  /**
   * Takes a well-formed JSON string and returns the resulting JavaScript value.
   *
   * @param json The JSON string to parse.
   * @see {@link https://api.jquery.com/jQuery.parseJSON/}
   * @since 1.4.1
   * @deprecated 3.0
   */
  parseJSON(json: string): any;
  /**
   * Parses a string into an XML document.
   *
   * @param data a well-formed XML string to be parsed
   * @see {@link https://api.jquery.com/jQuery.parseXML/}
   * @since 1.5
   */
  parseXML(data: string): XMLDocument;
  /**
   * Load data from the server using a HTTP POST request.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param data A plain object or string that is sent to the server with the request.
   * @param success A callback function that is executed if the request succeeds. Required if dataType is provided, but
   *                can be null in that case.
   * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
   * @see {@link https://api.jquery.com/jQuery.post/}
   * @since 1.0
   */
  post(url: string,
       data: JQuery.PlainObject | string,
       success: JQuery.jqXHR.DoneCallback | null,
       dataType?: string): JQuery.jqXHR;
  /**
   * Load data from the server using a HTTP POST request.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param success A callback function that is executed if the request succeeds. Required if dataType is provided, but
   *                can be null in that case.
   * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
   * @see {@link https://api.jquery.com/jQuery.post/}
   * @since 1.0
   */
  post(url: string,
       success: JQuery.jqXHR.DoneCallback | null,
       dataType: string): JQuery.jqXHR;
  /**
   * Load data from the server using a HTTP POST request.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param success_data A callback function that is executed if the request succeeds. Required if dataType is provided, but
   *                     can be null in that case.
   *                     A plain object or string that is sent to the server with the request.
   * @see {@link https://api.jquery.com/jQuery.post/}
   * @since 1.0
   */
  post(url: string,
       success_data: JQuery.jqXHR.DoneCallback | JQuery.PlainObject | string): JQuery.jqXHR;
  /**
   * Load data from the server using a HTTP POST request.
   *
   * @param url_settings A string containing the URL to which the request is sent.
   *                     A set of key/value pairs that configure the Ajax request. All properties except for url are
   *                     optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) for a
   *                     complete list of all settings. Type will automatically be set to POST.
   * @see {@link https://api.jquery.com/jQuery.post/}
   * @since 1.0
   * @since 1.12
   * @since 2.2
   */
  post(url_settings?: string | JQuery.UrlAjaxSettings): JQuery.jqXHR;

  // region proxy

  // region (fn, null | undefined)

  // region 0 to 7 arguments

  // region 0 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F, G>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G) => TReturn,
                           context: null | undefined,
                           a: A, b: B, c: C, d: D, e: E, f: F, g: G): () => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F>(fn: (a: A, b: B, c: C, d: D, e: E, f: F) => TReturn,
                        context: null | undefined,
                        a: A, b: B, c: C, d: D, e: E, f: F): () => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E>(fn: (a: A, b: B, c: C, d: D, e: E) => TReturn,
                     context: null | undefined,
                     a: A, b: B, c: C, d: D, e: E): () => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D>(fn: (a: A, b: B, c: C, d: D) => TReturn,
                  context: null | undefined,
                  a: A, b: B, c: C, d: D): () => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C>(fn: (a: A, b: B, c: C) => TReturn,
               context: null | undefined,
               a: A, b: B, c: C): () => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B>(fn: (a: A, b: B) => TReturn,
            context: null | undefined,
            a: A, b: B): () => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4`
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A>(fn: (a: A) => TReturn,
         context: null | undefined,
         a: A): () => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn>(fn: () => TReturn,
                 context: null | undefined): () => TReturn;

  // endregion

  // region 1 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F, G,
      T>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
              t: T) => TReturn,
         context: null | undefined,
         a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F,
      T>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
              t: T) => TReturn,
         context: null | undefined,
         a: A, b: B, c: C, d: D, e: E, f: F): (t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E,
      T>(fn: (a: A, b: B, c: C, d: D, e: E,
              t: T) => TReturn,
         context: null | undefined,
         a: A, b: B, c: C, d: D, e: E): (t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D,
      T>(fn: (a: A, b: B, c: C, d: D,
              t: T) => TReturn,
         context: null | undefined,
         a: A, b: B, c: C, d: D): (t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C,
      T>(fn: (a: A, b: B, c: C,
              t: T) => TReturn,
         context: null | undefined,
         a: A, b: B, c: C): (t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B,
      T>(fn: (a: A, b: B,
              t: T) => TReturn,
         context: null | undefined,
         a: A, b: B): (t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A,
      T>(fn: (a: A,
              t: T) => TReturn,
         context: null | undefined,
         a: A): (t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      T>(fn: (t: T) => TReturn,
         context: null | undefined): (t: T) => TReturn;

  // endregion

  // region 2 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F, G,
      T, U>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                 t: T, u: U) => TReturn,
            context: null | undefined,
            a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F,
      T, U>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                 t: T, u: U) => TReturn,
            context: null | undefined,
            a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E,
      T, U>(fn: (a: A, b: B, c: C, d: D, e: E,
                 t: T, u: U) => TReturn,
            context: null | undefined,
            a: A, b: B, c: C, d: D, e: E): (t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D,
      T, U>(fn: (a: A, b: B, c: C, d: D,
                 t: T, u: U) => TReturn,
            context: null | undefined,
            a: A, b: B, c: C, d: D): (t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C,
      T, U>(fn: (a: A, b: B, c: C,
                 t: T, u: U) => TReturn,
            context: null | undefined,
            a: A, b: B, c: C): (t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B,
      T, U>(fn: (a: A, b: B,
                 t: T, u: U) => TReturn,
            context: null | undefined,
            a: A, b: B): (t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A,
      T, U>(fn: (a: A,
                 t: T, u: U) => TReturn,
            context: null | undefined,
            a: A): (t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      T, U>(fn: (t: T, u: U) => TReturn,
            context: null | undefined): (t: T, u: U) => TReturn;

  // endregion

  // region 3 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F, G,
      T, U, V>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                    t: T, u: U, v: V) => TReturn,
               context: null | undefined,
               a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F,
      T, U, V>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                    t: T, u: U, v: V) => TReturn,
               context: null | undefined,
               a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E,
      T, U, V>(fn: (a: A, b: B, c: C, d: D, e: E,
                    t: T, u: U, v: V) => TReturn,
               context: null | undefined,
               a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D,
      T, U, V>(fn: (a: A, b: B, c: C, d: D,
                    t: T, u: U, v: V) => TReturn,
               context: null | undefined,
               a: A, b: B, c: C, d: D): (t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C,
      T, U, V>(fn: (a: A, b: B, c: C,
                    t: T, u: U, v: V) => TReturn,
               context: null | undefined,
               a: A, b: B, c: C): (t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B,
      T, U, V>(fn: (a: A, b: B,
                    t: T, u: U, v: V) => TReturn,
               context: null | undefined,
               a: A, b: B): (t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A,
      T, U, V>(fn: (a: A,
                    t: T, u: U, v: V) => TReturn,
               context: null | undefined,
               a: A): (t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      T, U, V>(fn: (t: T, u: U, v: V) => TReturn,
               context: null | undefined): (t: T, u: U, v: V) => TReturn;

  // endregion

  // region 4 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F, G,
      T, U, V, W>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: null | undefined,
                  a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F,
      T, U, V, W>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: null | undefined,
                  a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E,
      T, U, V, W>(fn: (a: A, b: B, c: C, d: D, e: E,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: null | undefined,
                  a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D,
      T, U, V, W>(fn: (a: A, b: B, c: C, d: D,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: null | undefined,
                  a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C,
      T, U, V, W>(fn: (a: A, b: B, c: C,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: null | undefined,
                  a: A, b: B, c: C): (t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B,
      T, U, V, W>(fn: (a: A, b: B,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: null | undefined,
                  a: A, b: B): (t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A,
      T, U, V, W>(fn: (a: A,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: null | undefined,
                  a: A): (t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      T, U, V, W>(fn: (t: T, u: U, v: V, w: W) => TReturn,
                  context: null | undefined): (t: T, u: U, v: V, w: W) => TReturn;

  // endregion

  // region 5 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F, G,
      T, U, V, W, X>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: null | undefined,
                     a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F,
      T, U, V, W, X>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: null | undefined,
                     a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E,
      T, U, V, W, X>(fn: (a: A, b: B, c: C, d: D, e: E,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: null | undefined,
                     a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D,
      T, U, V, W, X>(fn: (a: A, b: B, c: C, d: D,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: null | undefined,
                     a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C,
      T, U, V, W, X>(fn: (a: A, b: B, c: C,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: null | undefined,
                     a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B,
      T, U, V, W, X>(fn: (a: A, b: B,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: null | undefined,
                     a: A, b: B): (t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A,
      T, U, V, W, X>(fn: (a: A,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: null | undefined,
                     a: A): (t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      T, U, V, W, X>(fn: (t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: null | undefined): (t: T, u: U, v: V, w: W, x: X) => TReturn;

  // endregion

  // region 6 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F, G,
      T, U, V, W, X, Y>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: null | undefined,
                        a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F,
      T, U, V, W, X, Y>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: null | undefined,
                        a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E,
      T, U, V, W, X, Y>(fn: (a: A, b: B, c: C, d: D, e: E,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: null | undefined,
                        a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D,
      T, U, V, W, X, Y>(fn: (a: A, b: B, c: C, d: D,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: null | undefined,
                        a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C,
      T, U, V, W, X, Y>(fn: (a: A, b: B, c: C,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: null | undefined,
                        a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B,
      T, U, V, W, X, Y>(fn: (a: A, b: B,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: null | undefined,
                        a: A, b: B): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A,
      T, U, V, W, X, Y>(fn: (a: A,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: null | undefined,
                        a: A): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      T, U, V, W, X, Y>(fn: (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: null | undefined): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;

  // endregion

  // region 7+ parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F, G,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: null | undefined,
                           a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E, F,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: null | undefined,
                           a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D, E,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B, c: C, d: D, e: E,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: null | undefined,
                           a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C, D,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B, c: C, d: D,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: null | undefined,
                           a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B, C,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B, c: C,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: null | undefined,
                           a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A, B,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: null | undefined,
                           a: A, b: B): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      A,
      T, U, V, W, X, Y, Z>(fn: (a: A,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: null | undefined,
                           a: A): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn,
      T, U, V, W, X, Y, Z>(fn: (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: null | undefined): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;

  // endregion

  // endregion

  // region 8+ arguments

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @param additionalArguments Any number of arguments to be passed to the function referenced in the function argument.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.9
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TReturn>(fn: (...args: any[]) => TReturn,
                 context: null | undefined,
                 ...additionalArguments: any[]): (...args: any[]) => TReturn;

  // endregion

  // endregion

  // region (fn, context)

  // region 0 to 7 arguments

  // region 0 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F, G>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G) => TReturn,
                           context: TContext,
                           a: A, b: B, c: C, d: D, e: E, f: F, g: G): (this: TContext) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F>(fn: (a: A, b: B, c: C, d: D, e: E, f: F) => TReturn,
                        context: TContext,
                        a: A, b: B, c: C, d: D, e: E, f: F): (this: TContext) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E>(fn: (a: A, b: B, c: C, d: D, e: E) => TReturn,
                     context: TContext,
                     a: A, b: B, c: C, d: D, e: E): (this: TContext) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D>(fn: (a: A, b: B, c: C, d: D) => TReturn,
                  context: TContext,
                  a: A, b: B, c: C, d: D): (this: TContext) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C>(fn: (a: A, b: B, c: C) => TReturn,
               context: TContext,
               a: A, b: B, c: C): (this: TContext) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B>(fn: (a: A, b: B) => TReturn,
            context: TContext,
            a: A, b: B): (this: TContext) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4`
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A>(fn: (a: A) => TReturn,
         context: TContext,
         a: A): (this: TContext) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn>(fn: () => TReturn,
               context: TContext): (this: TContext) => TReturn;

  // endregion

  // region 1 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F, G,
      T>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
              t: T) => TReturn,
         context: TContext,
         a: A, b: B, c: C, d: D, e: E, f: F, g: G): (this: TContext, t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F,
      T>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
              t: T) => TReturn,
         context: TContext,
         a: A, b: B, c: C, d: D, e: E, f: F): (this: TContext, t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E,
      T>(fn: (a: A, b: B, c: C, d: D, e: E,
              t: T) => TReturn,
         context: TContext,
         a: A, b: B, c: C, d: D, e: E): (this: TContext, t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D,
      T>(fn: (a: A, b: B, c: C, d: D,
              t: T) => TReturn,
         context: TContext,
         a: A, b: B, c: C, d: D): (this: TContext, t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C,
      T>(fn: (a: A, b: B, c: C,
              t: T) => TReturn,
         context: TContext,
         a: A, b: B, c: C): (this: TContext, t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B,
      T>(fn: (a: A, b: B,
              t: T) => TReturn,
         context: TContext,
         a: A, b: B): (this: TContext, t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A,
      T>(fn: (a: A,
              t: T) => TReturn,
         context: TContext,
         a: A): (this: TContext, t: T) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      T>(fn: (t: T) => TReturn,
         context: TContext): (this: TContext, t: T) => TReturn;

  // endregion

  // region 2 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F, G,
      T, U>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                 t: T, u: U) => TReturn,
            context: TContext,
            a: A, b: B, c: C, d: D, e: E, f: F, g: G): (this: TContext, t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F,
      T, U>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                 t: T, u: U) => TReturn,
            context: TContext,
            a: A, b: B, c: C, d: D, e: E, f: F): (this: TContext, t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E,
      T, U>(fn: (a: A, b: B, c: C, d: D, e: E,
                 t: T, u: U) => TReturn,
            context: TContext,
            a: A, b: B, c: C, d: D, e: E): (this: TContext, t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D,
      T, U>(fn: (a: A, b: B, c: C, d: D,
                 t: T, u: U) => TReturn,
            context: TContext,
            a: A, b: B, c: C, d: D): (this: TContext, t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C,
      T, U>(fn: (a: A, b: B, c: C,
                 t: T, u: U) => TReturn,
            context: TContext,
            a: A, b: B, c: C): (this: TContext, t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B,
      T, U>(fn: (a: A, b: B,
                 t: T, u: U) => TReturn,
            context: TContext,
            a: A, b: B): (this: TContext, t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A,
      T, U>(fn: (a: A,
                 t: T, u: U) => TReturn,
            context: TContext,
            a: A): (this: TContext, t: T, u: U) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      T, U>(fn: (t: T, u: U) => TReturn,
            context: TContext): (this: TContext, t: T, u: U) => TReturn;

  // endregion

  // region 3 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F, G,
      T, U, V>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                    t: T, u: U, v: V) => TReturn,
               context: TContext,
               a: A, b: B, c: C, d: D, e: E, f: F, g: G): (this: TContext, t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F,
      T, U, V>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                    t: T, u: U, v: V) => TReturn,
               context: TContext,
               a: A, b: B, c: C, d: D, e: E, f: F): (this: TContext, t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E,
      T, U, V>(fn: (a: A, b: B, c: C, d: D, e: E,
                    t: T, u: U, v: V) => TReturn,
               context: TContext,
               a: A, b: B, c: C, d: D, e: E): (this: TContext, t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D,
      T, U, V>(fn: (a: A, b: B, c: C, d: D,
                    t: T, u: U, v: V) => TReturn,
               context: TContext,
               a: A, b: B, c: C, d: D): (this: TContext, t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C,
      T, U, V>(fn: (a: A, b: B, c: C,
                    t: T, u: U, v: V) => TReturn,
               context: TContext,
               a: A, b: B, c: C): (this: TContext, t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B,
      T, U, V>(fn: (a: A, b: B,
                    t: T, u: U, v: V) => TReturn,
               context: TContext,
               a: A, b: B): (this: TContext, t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A,
      T, U, V>(fn: (a: A,
                    t: T, u: U, v: V) => TReturn,
               context: TContext,
               a: A): (this: TContext, t: T, u: U, v: V) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      T, U, V>(fn: (t: T, u: U, v: V) => TReturn,
               context: TContext): (this: TContext, t: T, u: U, v: V) => TReturn;

  // endregion

  // region 4 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F, G,
      T, U, V, W>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: TContext,
                  a: A, b: B, c: C, d: D, e: E, f: F, g: G): (this: TContext, t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F,
      T, U, V, W>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: TContext,
                  a: A, b: B, c: C, d: D, e: E, f: F): (this: TContext, t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E,
      T, U, V, W>(fn: (a: A, b: B, c: C, d: D, e: E,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: TContext,
                  a: A, b: B, c: C, d: D, e: E): (this: TContext, t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D,
      T, U, V, W>(fn: (a: A, b: B, c: C, d: D,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: TContext,
                  a: A, b: B, c: C, d: D): (this: TContext, t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C,
      T, U, V, W>(fn: (a: A, b: B, c: C,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: TContext,
                  a: A, b: B, c: C): (this: TContext, t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B,
      T, U, V, W>(fn: (a: A, b: B,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: TContext,
                  a: A, b: B): (this: TContext, t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A,
      T, U, V, W>(fn: (a: A,
                       t: T, u: U, v: V, w: W) => TReturn,
                  context: TContext,
                  a: A): (this: TContext, t: T, u: U, v: V, w: W) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      T, U, V, W>(fn: (t: T, u: U, v: V, w: W) => TReturn,
                  context: TContext): (this: TContext, t: T, u: U, v: V, w: W) => TReturn;

  // endregion

  // region 5 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F, G,
      T, U, V, W, X>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: TContext,
                     a: A, b: B, c: C, d: D, e: E, f: F, g: G): (this: TContext, t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F,
      T, U, V, W, X>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: TContext,
                     a: A, b: B, c: C, d: D, e: E, f: F): (this: TContext, t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E,
      T, U, V, W, X>(fn: (a: A, b: B, c: C, d: D, e: E,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: TContext,
                     a: A, b: B, c: C, d: D, e: E): (this: TContext, t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D,
      T, U, V, W, X>(fn: (a: A, b: B, c: C, d: D,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: TContext,
                     a: A, b: B, c: C, d: D): (this: TContext, t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C,
      T, U, V, W, X>(fn: (a: A, b: B, c: C,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: TContext,
                     a: A, b: B, c: C): (this: TContext, t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B,
      T, U, V, W, X>(fn: (a: A, b: B,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: TContext,
                     a: A, b: B): (this: TContext, t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A,
      T, U, V, W, X>(fn: (a: A,
                          t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: TContext,
                     a: A): (this: TContext, t: T, u: U, v: V, w: W, x: X) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      T, U, V, W, X>(fn: (t: T, u: U, v: V, w: W, x: X) => TReturn,
                     context: TContext): (this: TContext, t: T, u: U, v: V, w: W, x: X) => TReturn;

  // endregion

  // region 6 parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F, G,
      T, U, V, W, X, Y>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: TContext,
                        a: A, b: B, c: C, d: D, e: E, f: F, g: G): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F,
      T, U, V, W, X, Y>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: TContext,
                        a: A, b: B, c: C, d: D, e: E, f: F): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E,
      T, U, V, W, X, Y>(fn: (a: A, b: B, c: C, d: D, e: E,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: TContext,
                        a: A, b: B, c: C, d: D, e: E): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D,
      T, U, V, W, X, Y>(fn: (a: A, b: B, c: C, d: D,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: TContext,
                        a: A, b: B, c: C, d: D): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C,
      T, U, V, W, X, Y>(fn: (a: A, b: B, c: C,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: TContext,
                        a: A, b: B, c: C): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B,
      T, U, V, W, X, Y>(fn: (a: A, b: B,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: TContext,
                        a: A, b: B): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A,
      T, U, V, W, X, Y>(fn: (a: A,
                             t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: TContext,
                        a: A): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      T, U, V, W, X, Y>(fn: (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,
                        context: TContext): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;

  // endregion

  // region 7+ parameters

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F, G,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: TContext,
                           a: A, b: B, c: C, d: D, e: E, f: F, g: G): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E, F,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B, c: C, d: D, e: E, f: F,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: TContext,
                           a: A, b: B, c: C, d: D, e: E, f: F): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D, E,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B, c: C, d: D, e: E,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: TContext,
                           a: A, b: B, c: C, d: D, e: E): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C, D,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B, c: C, d: D,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: TContext,
                           a: A, b: B, c: C, d: D): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B, C,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B, c: C,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: TContext,
                           a: A, b: B, c: C): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A, B,
      T, U, V, W, X, Y, Z>(fn: (a: A, b: B,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: TContext,
                           a: A, b: B): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      A,
      T, U, V, W, X, Y, Z>(fn: (a: A,
                                t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: TContext,
                           a: A): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;
  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn,
      T, U, V, W, X, Y, Z>(fn: (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,
                           context: TContext): (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;

  // endregion

  // endregion

  // region 8+ arguments

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param fn The function whose context will be changed.
   * @param context The object to which the context (this) of the function should be set.
   * @param additionalArguments Any number of arguments to be passed to the function referenced in the function argument.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object,
      TReturn>(fn: (...args: any[]) => TReturn,
               context: TContext,
               ...additionalArguments: any[]): (this: TContext, ...args: any[]) => TReturn;

  // endregion

  // endregion

  // region (context, name)

  /**
   * Takes a function and returns a new one that will always have a particular context.
   *
   * @param context The object to which the context of the function should be set.
   * @param name The name of the function whose context will be changed (should be a property of the context object).
   * @param additionalArguments Any number of arguments to be passed to the function named in the name argument.
   * @see {@link https://api.jquery.com/jQuery.proxy/}
   * @since 1.4
   * @since 1.6
   * @deprecated 3.3 Use Function#bind.
   */
  proxy<TContext extends object>(context: TContext,
                                 name: keyof TContext,
                                 ...additionalArguments: any[]): (this: TContext, ...args: any[]) => any;

  // endregion

  // endregion

  /**
   * Manipulate the queue of functions to be executed on the matched element.
   *
   * @param element A DOM element where the array of queued functions is attached.
   * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
   * @param newQueue The new function to add to the queue.
   *                 An array of functions to replace the current queue contents.
   * @see {@link https://api.jquery.com/jQuery.queue/}
   * @since 1.3
   */
  queue<T extends Element>(element: T, queueName?: string, newQueue?: JQuery.TypeOrArray<JQuery.QueueFunction<T>>): JQuery.Queue<T>;
  /**
   * Handles errors thrown synchronously in functions wrapped in jQuery().
   *
   * @param error An error thrown in the function wrapped in jQuery().
   * @see {@link https://api.jquery.com/jQuery.readyException/}
   * @since 3.1
   */
  readyException(error: Error): any;
  /**
   * Remove a previously-stored piece of data.
   *
   * @param element A DOM element from which to remove data.
   * @param name A string naming the piece of data to remove.
   * @see {@link https://api.jquery.com/jQuery.removeData/}
   * @since 1.2.3
   */
  removeData(element: Element, name?: string): void;
  /**
   * Creates an object containing a set of properties ready to be used in the definition of custom animations.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/jQuery.speed/}
   * @since 1.1
   */
  speed(duration: JQuery.Duration, easing: string, complete: (this: TElement) => void): JQuery.EffectsOptions<TElement>;
  /**
   * Creates an object containing a set of properties ready to be used in the definition of custom animations.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing_complete A string indicating which easing function to use for the transition.
   *                        A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/jQuery.speed/}
   * @since 1.0
   * @since 1.1
   */
  speed(duration: JQuery.Duration,
        easing_complete: string | ((this: TElement) => void)): JQuery.EffectsOptions<TElement>;
  /**
   * Creates an object containing a set of properties ready to be used in the definition of custom animations.
   *
   * @param duration_complete_settings A string or number determining how long the animation will run.
   *                                   A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/jQuery.speed/}
   * @since 1.0
   * @since 1.1
   */
  speed(duration_complete_settings?: JQuery.Duration | ((this: TElement) => void) | JQuery.SpeedSettings<TElement>): JQuery.EffectsOptions<TElement>;
  /**
   * Remove the whitespace from the beginning and end of a string.
   *
   * @param str The string to trim.
   * @see {@link https://api.jquery.com/jQuery.trim/}
   * @since 1.0
   */
  trim(str: string): string;
  /**
   * Determine the internal JavaScript [[Class]] of an object.
   *
   * @param obj Object to get the internal JavaScript [[Class]] of.
   * @see {@link https://api.jquery.com/jQuery.type/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  type(obj: any): 'array' | 'boolean' | 'date' | 'error' | 'function' | 'null' | 'number' | 'object' | 'regexp' | 'string' | 'symbol' | 'undefined';
  /**
   * Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on
   * arrays of DOM elements, not strings or numbers.
   *
   * @param array The Array of DOM elements.
   * @see {@link https://api.jquery.com/jQuery.unique/}
   * @since 1.1.3
   * @deprecated 3.0
   */
  unique<T extends Element>(array: T[]): T[];
  /**
   * Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on
   * arrays of DOM elements, not strings or numbers.
   *
   * @param array The Array of DOM elements.
   * @see {@link https://api.jquery.com/jQuery.uniqueSort/}
   * @since 1.12
   * @since 2.2
   */
  uniqueSort<T extends Element>(array: T[]): T[];
  /**
   * Provides a way to execute callback functions based on zero or more Thenable objects, usually
   * Deferred objects that represent asynchronous events.
   *
   * @see {@link https://api.jquery.com/jQuery.when/}
   * @since 1.5
   */
  when<TR1, UR1, VR1,
      TJ1 = any, UJ1 = any, VJ1 = any>
      (deferredT: JQuery.Promise<TR1, TJ1, any> | JQuery.Thenable<TR1> | TR1,
       deferredU: JQuery.Promise<UR1, UJ1, any> | JQuery.Thenable<UR1> | UR1,
       deferredV: JQuery.Promise<VR1, VJ1, any> | JQuery.Thenable<VR1> | VR1): JQuery.Promise3<TR1, TJ1, never,
      UR1, UJ1, never,
      VR1, VJ1, never>;
  /**
   * Provides a way to execute callback functions based on zero or more Thenable objects, usually
   * Deferred objects that represent asynchronous events.
   *
   * @see {@link https://api.jquery.com/jQuery.when/}
   * @since 1.5
   */
  when<TR1, UR1,
      TJ1 = any, UJ1 = any>
      (deferredT: JQuery.Promise<TR1, TJ1, any> | JQuery.Thenable<TR1> | TR1,
       deferredU: JQuery.Promise<UR1, UJ1, any> | JQuery.Thenable<UR1> | UR1): JQuery.Promise2<TR1, TJ1, never,
      UR1, UJ1, never>;
  /**
   * Provides a way to execute callback functions based on zero or more Thenable objects, usually
   * Deferred objects that represent asynchronous events.
   *
   * @see {@link https://api.jquery.com/jQuery.when/}
   * @since 1.5
   */
  when<TR1, TJ1,
      TR2, TJ2,
      TR3 = never, TJ3 = never>
      (deferredT: JQuery.Promise3<TR1, TJ1, any, TR2, TJ2, any, TR3, TJ3, any> |
          JQuery.Promise2<TR1, TJ1, any, TR2, TJ2, any>): JQuery.Promise3<TR1, TJ1, never, TR2, TJ2, never, TR3, TJ3, never>;
  /**
   * Provides a way to execute callback functions based on zero or more Thenable objects, usually
   * Deferred objects that represent asynchronous events.
   *
   * @see {@link https://api.jquery.com/jQuery.when/}
   * @since 1.5
   */
  when<TR1, TJ1 = any>(deferred: JQuery.Promise<TR1, TJ1, any> | JQuery.Thenable<TR1> | TR1): JQuery.Promise<TR1, TJ1, never>;
  /**
   * Provides a way to execute callback functions based on zero or more Thenable objects, usually
   * Deferred objects that represent asynchronous events.
   *
   * @param deferreds Zero or more Thenable objects.
   * @see {@link https://api.jquery.com/jQuery.when/}
   * @since 1.5
   */
  when<TR1 = never, TJ1 = never>(...deferreds: Array<JQuery.Promise<TR1, TJ1, any> | JQuery.Thenable<TR1> | TR1>): JQuery.Promise<TR1, TJ1, never>;
  /**
   * Provides a way to execute callback functions based on zero or more Thenable objects, usually
   * Deferred objects that represent asynchronous events.
   *
   * @param deferreds Zero or more Thenable objects.
   * @see {@link https://api.jquery.com/jQuery.when/}
   * @since 1.5
   */
  when(...deferreds: any[]): JQuery.Promise<any, any, never>;
}

interface JQuery<TElement = HTMLElement> extends Iterable<TElement> {
  /**
   * A string containing the jQuery version number.
   *
   * @see {@link https://api.jquery.com/jquery/}
   * @since 1.0
   */
  jquery: string;
  /**
   * The number of elements in the jQuery object.
   *
   * @see {@link https://api.jquery.com/length/}
   * @since 1.0
   */
  length: number;
  /**
   * Create a new jQuery object with elements added to the set of matched elements.
   *
   * @param selector A string representing a selector expression to find additional elements to add to the set of matched elements.
   * @param context The point in the document at which the selector should begin matching; similar to the context
   *                argument of the $(selector, context) method.
   * @see {@link https://api.jquery.com/add/}
   * @since 1.4
   */
  add(selector: JQuery.Selector, context: Element): this;
  /**
   * Create a new jQuery object with elements added to the set of matched elements.
   *
   * @param selector A string representing a selector expression to find additional elements to add to the set of matched elements.
   *                 One or more elements to add to the set of matched elements.
   *                 An HTML fragment to add to the set of matched elements.
   *                 An existing jQuery object to add to the set of matched elements.
   * @see {@link https://api.jquery.com/add/}
   * @since 1.0
   * @since 1.3.2
   */
  add(selector: JQuery.Selector | JQuery.TypeOrArray<Element> | JQuery.htmlString | JQuery): this;
  /**
   * Add the previous set of elements on the stack to the current set, optionally filtered by a selector.
   *
   * @param selector A string containing a selector expression to match the current set of elements against.
   * @see {@link https://api.jquery.com/addBack/}
   * @since 1.8
   */
  addBack(selector?: JQuery.Selector): this;
  /**
   * Adds the specified class(es) to each element in the set of matched elements.
   *
   * @param className One or more space-separated classes to be added to the class attribute of each matched element.
   *                  An array of classes to be added to the class attribute of each matched element.
   *                  A function returning one or more space-separated class names to be added to the existing class
   *                  name(s). Receives the index position of the element in the set and the existing class name(s) as
   *                  arguments. Within the function, this refers to the current element in the set.
   * @see {@link https://api.jquery.com/addClass/}
   * @since 1.0
   * @since 1.4
   * @since 3.3
   */
  addClass(className: JQuery.TypeOrArray<string> | ((this: TElement, index: number, currentClassName: string) => string)): this;
  /**
   * Insert content, specified by the parameter, after each element in the set of matched elements.
   *
   * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
   *                 jQuery objects to insert after each element in the set of matched elements.
   * @see {@link https://api.jquery.com/after/}
   * @since 1.0
   */
  after(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;
  /**
   * Insert content, specified by the parameter, after each element in the set of matched elements.
   *
   * @param fn A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
   *           after each element in the set of matched elements. Receives the index position of the element in the
   *           set and the old HTML value of the element as arguments. Within the function, this refers to the
   *           current element in the set.
   * @see {@link https://api.jquery.com/after/}
   * @since 1.4
   * @since 1.10
   */
  after(fn: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;
  /**
   * Register a handler to be called when Ajax requests complete. This is an AjaxEvent.
   *
   * @param handler The function to be invoked.
   * @see {@link https://api.jquery.com/ajaxComplete/}
   * @since 1.0
   */
  ajaxComplete(handler: (this: Document, event: JQuery.Event<Document>, jqXHR: JQuery.jqXHR, ajaxOptions: JQuery.AjaxSettings) => void | false): this;
  /**
   * Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.
   *
   * @param handler The function to be invoked.
   * @see {@link https://api.jquery.com/ajaxError/}
   * @since 1.0
   */
  ajaxError(handler: (this: Document, event: JQuery.Event<Document>, jqXHR: JQuery.jqXHR, ajaxSettings: JQuery.AjaxSettings, thrownError: string) => void | false): this;
  /**
   * Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.
   *
   * @param handler The function to be invoked.
   * @see {@link https://api.jquery.com/ajaxSend/}
   * @since 1.0
   */
  ajaxSend(handler: (this: Document, event: JQuery.Event<Document>, jqXHR: JQuery.jqXHR, ajaxOptions: JQuery.AjaxSettings) => void | false): this;
  /**
   * Register a handler to be called when the first Ajax request begins. This is an Ajax Event.
   *
   * @param handler The function to be invoked.
   * @see {@link https://api.jquery.com/ajaxStart/}
   * @since 1.0
   */
  ajaxStart(handler: (this: Document) => void | false): this;
  /**
   * Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.
   *
   * @param handler The function to be invoked.
   * @see {@link https://api.jquery.com/ajaxStop/}
   * @since 1.0
   */
  ajaxStop(handler: (this: Document) => void | false): this;
  /**
   * Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.
   *
   * @param handler The function to be invoked.
   * @see {@link https://api.jquery.com/ajaxSuccess/}
   * @since 1.0
   */
  ajaxSuccess(handler: (this: Document, event: JQuery.Event<Document>, jqXHR: JQuery.jqXHR, ajaxOptions: JQuery.AjaxSettings, data: JQuery.PlainObject) => void | false): this;
  /**
   * Perform a custom animation of a set of CSS properties.
   *
   * @param properties An object of CSS properties and values that the animation will move toward.
   * @param duration A string or number determining how long the animation will run.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/animate/}
   * @since 1.0
   */
  animate(properties: JQuery.PlainObject,
          duration: JQuery.Duration,
          easing: string,
          complete?: (this: TElement) => void): this;
  /**
   * Perform a custom animation of a set of CSS properties.
   *
   * @param properties An object of CSS properties and values that the animation will move toward.
   * @param duration_easing A string or number determining how long the animation will run.
   *                        A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/animate/}
   * @since 1.0
   */
  animate(properties: JQuery.PlainObject,
          duration_easing: JQuery.Duration | string,
          complete?: (this: TElement) => void): this;
  /**
   * Perform a custom animation of a set of CSS properties.
   *
   * @param properties An object of CSS properties and values that the animation will move toward.
   * @param options A map of additional options to pass to the method.
   * @see {@link https://api.jquery.com/animate/}
   * @since 1.0
   */
  animate(properties: JQuery.PlainObject,
          options: JQuery.EffectsOptions<TElement>): this;
  /**
   * Perform a custom animation of a set of CSS properties.
   *
   * @param properties An object of CSS properties and values that the animation will move toward.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/animate/}
   * @since 1.0
   */
  animate(properties: JQuery.PlainObject,
          complete?: (this: TElement) => void): this;
  /**
   * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
   *
   * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
   *                 jQuery objects to insert at the end of each element in the set of matched elements.
   * @see {@link https://api.jquery.com/append/}
   * @since 1.0
   */
  append(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;
  /**
   * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
   *
   * @param fn A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at
   *           the end of each element in the set of matched elements. Receives the index position of the element
   *           in the set and the old HTML value of the element as arguments. Within the function, this refers to
   *           the current element in the set.
   * @see {@link https://api.jquery.com/append/}
   * @since 1.4
   */
  append(fn: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;
  /**
   * Insert every element in the set of matched elements to the end of the target.
   *
   * @param target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements
   *               will be inserted at the end of the element(s) specified by this parameter.
   * @see {@link https://api.jquery.com/appendTo/}
   * @since 1.0
   */
  appendTo(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Element> | JQuery): this;
  /**
   * Set one or more attributes for the set of matched elements.
   *
   * @param attributeName The name of the attribute to set.
   * @param value A value to set for the attribute. If null, the specified attribute will be removed (as in .removeAttr()).
   *              A function returning the value to set. this is the current element. Receives the index position of
   *              the element in the set and the old attribute value as arguments.
   * @see {@link https://api.jquery.com/attr/}
   * @since 1.0
   * @since 1.1
   */
  attr(attributeName: string,
       value: string | number | null | ((this: TElement, index: number, attr: string) => string | number | void | undefined)): this;
  /**
   * Set one or more attributes for the set of matched elements.
   *
   * @param attributes An object of attribute-value pairs to set.
   * @see {@link https://api.jquery.com/attr/}
   * @since 1.0
   */
  attr(attributes: JQuery.PlainObject): this;
  /**
   * Get the value of an attribute for the first element in the set of matched elements.
   *
   * @param attributeName The name of the attribute to get.
   * @see {@link https://api.jquery.com/attr/}
   * @since 1.0
   */
  attr(attributeName: string): string | undefined;
  /**
   * Insert content, specified by the parameter, before each element in the set of matched elements.
   *
   * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
   *                 jQuery objects to insert before each element in the set of matched elements.
   * @see {@link https://api.jquery.com/before/}
   * @since 1.0
   */
  before(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;
  /**
   * Insert content, specified by the parameter, before each element in the set of matched elements.
   *
   * @param fn A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
   *           before each element in the set of matched elements. Receives the index position of the element in
   *           the set and the old HTML value of the element as arguments. Within the function, this refers to the
   *           current element in the set.
   * @see {@link https://api.jquery.com/before/}
   * @since 1.4
   * @since 1.10
   */
  before(fn: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;
  // [bind() overloads] https://github.com/jquery/api.jquery.com/issues/1048
  /**
   * Attach a handler to an event for the elements.
   *
   * @param eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/bind/}
   * @since 1.0
   * @since 1.4.3
   * @deprecated 3.0
   */
  bind<TData>(eventType: string,
              eventData: TData,
              handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Attach a handler to an event for the elements.
   *
   * @param eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
   * @param handler A function to execute each time the event is triggered.
   *                Setting the second argument to false will attach a function that prevents the default action from
   *                occurring and stops the event from bubbling.
   * @see {@link https://api.jquery.com/bind/}
   * @since 1.0
   * @since 1.4.3
   * @deprecated 3.0
   */
  bind(eventType: string,
       handler: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false | null | undefined): this;
  /**
   * Attach a handler to an event for the elements.
   *
   * @param events An object containing one or more DOM event types and functions to execute for them.
   * @see {@link https://api.jquery.com/bind/}
   * @since 1.4
   * @deprecated 3.0
   */
  bind(events: JQuery.PlainObject<JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false>): this;
  /**
   * Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/blur/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  blur<TData>(eventData: TData,
              handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/blur/}
   * @since 1.0
   * @deprecated 3.3
   */
  blur(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/change/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  change<TData>(eventData: TData,
                handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/change/}
   * @since 1.0
   * @deprecated 3.3
   */
  change(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Get the children of each element in the set of matched elements, optionally filtered by a selector.
   *
   * @param selector A string containing a selector expression to match elements against.
   * @see {@link https://api.jquery.com/children/}
   * @since 1.0
   */
  children(selector?: JQuery.Selector): this;
  /**
   * Remove from the queue all items that have not yet been run.
   *
   * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
   * @see {@link https://api.jquery.com/clearQueue/}
   * @since 1.4
   */
  clearQueue(queueName?: string): this;
  /**
   * Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/click/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  click<TData>(eventData: TData,
               handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/click/}
   * @since 1.0
   * @deprecated 3.3
   */
  click(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Create a deep copy of the set of matched elements.
   *
   * @param withDataAndEvents A Boolean indicating whether event handlers and data should be copied along with the elements. The
   *                          default value is false. *In jQuery 1.5.0 the default value was incorrectly true; it was changed back
   *                          to false in 1.5.1 and up.
   * @param deepWithDataAndEvents A Boolean indicating whether event handlers and data for all children of the cloned element should
   *                              be copied. By default its value matches the first argument's value (which defaults to false).
   * @see {@link https://api.jquery.com/clone/}
   * @since 1.0
   * @since 1.5
   */
  clone(withDataAndEvents?: boolean, deepWithDataAndEvents?: boolean): this;
  /**
   * For each element in the set, get the first element that matches the selector by testing the element
   * itself and traversing up through its ancestors in the DOM tree.
   *
   * @param selector A string containing a selector expression to match elements against.
   * @param context A DOM element within which a matching element may be found.
   * @see {@link https://api.jquery.com/closest/}
   * @since 1.4
   */
  closest(selector: JQuery.Selector, context: Element): this;
  /**
   * For each element in the set, get the first element that matches the selector by testing the element
   * itself and traversing up through its ancestors in the DOM tree.
   *
   * @param selector A string containing a selector expression to match elements against.
   *                 A jQuery object to match elements against.
   *                 An element to match elements against.
   * @see {@link https://api.jquery.com/closest/}
   * @since 1.3
   * @since 1.6
   */
  closest(selector: JQuery.Selector | Element | JQuery): this;
  /**
   * Get the children of each element in the set of matched elements, including text and comment nodes.
   *
   * @see {@link https://api.jquery.com/contents/}
   * @since 1.2
   */
  contents(): JQuery<TElement | Text | Comment>;
  /**
   * Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/contextmenu/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  contextmenu<TData>(eventData: TData,
                     handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/contextmenu/}
   * @since 1.0
   * @deprecated 3.3
   */
  contextmenu(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Set one or more CSS properties for the set of matched elements.
   *
   * @param propertyName A CSS property name.
   * @param value A value to set for the property.
   *              A function returning the value to set. this is the current element. Receives the index position of
   *              the element in the set and the old value as arguments.
   * @see {@link https://api.jquery.com/css/}
   * @since 1.0
   * @since 1.4
   */
  css(propertyName: string,
      value: string | number | ((this: TElement, index: number, value: string) => string | number | void | undefined)): this;
  /**
   * Set one or more CSS properties for the set of matched elements.
   *
   * @param properties An object of property-value pairs to set.
   * @see {@link https://api.jquery.com/css/}
   * @since 1.0
   */
  css(properties: JQuery.PlainObject<string | number | ((this: TElement, index: number, value: string) => string | number | void | undefined)>): this;
  /**
   * Get the computed style properties for the first element in the set of matched elements.
   *
   * @param propertyName A CSS property.
   *                     An array of one or more CSS properties.
   * @see {@link https://api.jquery.com/css/}
   * @since 1.0
   */
  css(propertyName: string): string;
  /**
   * Get the computed style properties for the first element in the set of matched elements.
   *
   * @param propertyNames An array of one or more CSS properties.
   * @see {@link https://api.jquery.com/css/}
   * @since 1.9
   */
  css(propertyNames: string[]): JQuery.PlainObject<string>;
  /**
   * Return the value at the named data store for the first element in the jQuery collection, as set by
   * data(name, value) or by an HTML5 data-* attribute.
   *
   * @param key Name of the data stored.
   * @see {@link https://api.jquery.com/data/}
   * @since 1.2.3
   */
  data(key: string, undefined: undefined): any; // tslint:disable-line:unified-signatures
  /**
   * Store arbitrary data associated with the matched elements.
   *
   * @param key A string naming the piece of data to set.
   * @param value The new data value; this can be any Javascript type except undefined.
   * @see {@link https://api.jquery.com/data/}
   * @since 1.2.3
   */
  data(key: string, value: any): this;
  /**
   * Store arbitrary data associated with the matched elements.
   *
   * @param obj An object of key-value pairs of data to update.
   * @see {@link https://api.jquery.com/data/}
   * @since 1.4.3
   */
  data(obj: JQuery.PlainObject): this;
  /**
   * Return the value at the named data store for the first element in the jQuery collection, as set by
   * data(name, value) or by an HTML5 data-* attribute.
   *
   * @param key Name of the data stored.
   * @see {@link https://api.jquery.com/data/}
   * @since 1.2.3
   */
  data(key: string): any;
  /**
   * Return the value at the named data store for the first element in the jQuery collection, as set by
   * data(name, value) or by an HTML5 data-* attribute.
   *
   * @see {@link https://api.jquery.com/data/}
   * @since 1.4
   */
  data(): JQuery.PlainObject;
  /**
   * Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/dblclick/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  dblclick<TData>(eventData: TData,
                  handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/dblclick/}
   * @since 1.0
   * @deprecated 3.3
   */
  dblclick(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Set a timer to delay execution of subsequent items in the queue.
   *
   * @param duration An integer indicating the number of milliseconds to delay execution of the next item in the queue.
   * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
   * @see {@link https://api.jquery.com/delay/}
   * @since 1.4
   */
  delay(duration: JQuery.Duration, queueName?: string): this;
  /**
   * Attach a handler to one or more events for all elements that match the selector, now or in the
   * future, based on a specific set of root elements.
   *
   * @param selector A selector to filter the elements that trigger the event.
   * @param eventType A string containing one or more space-separated JavaScript event types, such as "click" or
   *                  "keydown," or custom event names.
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/delegate/}
   * @since 1.4.2
   * @deprecated 3.0
   */
  delegate<TData>(selector: JQuery.Selector,
                  eventType: string,
                  eventData: TData,
                  handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Attach a handler to one or more events for all elements that match the selector, now or in the
   * future, based on a specific set of root elements.
   *
   * @param selector A selector to filter the elements that trigger the event.
   * @param eventType A string containing one or more space-separated JavaScript event types, such as "click" or
   *                  "keydown," or custom event names.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/delegate/}
   * @since 1.4.2
   * @deprecated 3.0
   */
  delegate(selector: JQuery.Selector,
           eventType: string,
           handler: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Attach a handler to one or more events for all elements that match the selector, now or in the
   * future, based on a specific set of root elements.
   *
   * @param selector A selector to filter the elements that trigger the event.
   * @param events A plain object of one or more event types and functions to execute for them.
   * @see {@link https://api.jquery.com/delegate/}
   * @since 1.4.3
   * @deprecated 3.0
   */
  delegate(selector: JQuery.Selector,
           events: JQuery.PlainObject<JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false>): this;
  /**
   * Execute the next function on the queue for the matched elements.
   *
   * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
   * @see {@link https://api.jquery.com/dequeue/}
   * @since 1.2
   */
  dequeue(queueName?: string): this;
  /**
   * Remove the set of matched elements from the DOM.
   *
   * @param selector A selector expression that filters the set of matched elements to be removed.
   * @see {@link https://api.jquery.com/detach/}
   * @since 1.4
   */
  detach(selector?: JQuery.Selector): this;
  /**
   * Iterate over a jQuery object, executing a function for each matched element.
   *
   * @param fn A function to execute for each matched element.
   * @see {@link https://api.jquery.com/each/}
   * @since 1.0
   */
  each(fn: (this: TElement, index: number, element: TElement) => void | false): this;
  /**
   * Remove all child nodes of the set of matched elements from the DOM.
   *
   * @see {@link https://api.jquery.com/empty/}
   * @since 1.0
   */
  empty(): this;
  /**
   * End the most recent filtering operation in the current chain and return the set of matched elements
   * to its previous state.
   *
   * @see {@link https://api.jquery.com/end/}
   * @since 1.0
   */
  end(): this;
  /**
   * Reduce the set of matched elements to the one at the specified index.
   *
   * @param index An integer indicating the 0-based position of the element.
   *              An integer indicating the position of the element, counting backwards from the last element in the set.
   * @see {@link https://api.jquery.com/eq/}
   * @since 1.1.2
   * @since 1.4
   */
  eq(index: number): this;
  /**
   * Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.
   *
   * @param obj An object to merge onto the jQuery prototype.
   * @see {@link https://api.jquery.com/jQuery.fn.extend/}
   * @since 1.0
   */
  extend(obj: object): this;
  /**
   * Display the matched elements by fading them to opaque.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/fadeIn/}
   * @since 1.4.3
   */
  fadeIn(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
  /**
   * Display the matched elements by fading them to opaque.
   *
   * @param duration_easing A string or number determining how long the animation will run.
   *                        A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/fadeIn/}
   * @since 1.0
   * @since 1.4.3
   */
  fadeIn(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
  /**
   * Display the matched elements by fading them to opaque.
   *
   * @param duration_easing_complete_options A string or number determining how long the animation will run.
   *                                         A string indicating which easing function to use for the transition.
   *                                         A function to call once the animation is complete, called once per matched element.
   *                                         A map of additional options to pass to the method.
   * @see {@link https://api.jquery.com/fadeIn/}
   * @since 1.0
   * @since 1.4.3
   */
  fadeIn(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
  /**
   * Hide the matched elements by fading them to transparent.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/fadeOut/}
   * @since 1.4.3
   */
  fadeOut(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
  /**
   * Hide the matched elements by fading them to transparent.
   *
   * @param duration_easing A string or number determining how long the animation will run.
   *                        A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/fadeOut/}
   * @since 1.0
   * @since 1.4.3
   */
  fadeOut(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
  /**
   * Hide the matched elements by fading them to transparent.
   *
   * @param duration_easing_complete_options A string or number determining how long the animation will run.
   *                                         A string indicating which easing function to use for the transition.
   *                                         A function to call once the animation is complete, called once per matched element.
   *                                         A map of additional options to pass to the method.
   * @see {@link https://api.jquery.com/fadeOut/}
   * @since 1.0
   * @since 1.4.3
   */
  fadeOut(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
  /**
   * Adjust the opacity of the matched elements.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param opacity A number between 0 and 1 denoting the target opacity.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/fadeTo/}
   * @since 1.4.3
   */
  fadeTo(duration: JQuery.Duration, opacity: number, easing: string, complete?: (this: TElement) => void): this;
  /**
   * Adjust the opacity of the matched elements.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param opacity A number between 0 and 1 denoting the target opacity.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/fadeTo/}
   * @since 1.0
   */
  fadeTo(duration: JQuery.Duration, opacity: number, complete?: (this: TElement) => void): this;
  /**
   * Display or hide the matched elements by animating their opacity.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/fadeToggle/}
   * @since 1.4.4
   */
  fadeToggle(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
  /**
   * Display or hide the matched elements by animating their opacity.
   *
   * @param duration_easing A string or number determining how long the animation will run.
   *                        A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/fadeToggle/}
   * @since 1.0
   * @since 1.4.3
   */
  fadeToggle(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
  /**
   * Display or hide the matched elements by animating their opacity.
   *
   * @param duration_easing_complete_options A string or number determining how long the animation will run.
   *                                         A string indicating which easing function to use for the transition.
   *                                         A function to call once the animation is complete, called once per matched element.
   *                                         A map of additional options to pass to the method.
   * @see {@link https://api.jquery.com/fadeToggle/}
   * @since 1.0
   * @since 1.4.3
   */
  fadeToggle(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
  /**
   * Reduce the set of matched elements to those that match the selector or pass the function's test.
   *
   * @param selector A string containing a selector expression to match the current set of elements against.
   *                 One or more DOM elements to match the current set of elements against.
   *                 An existing jQuery object to match the current set of elements against.
   *                 A function used as a test for each element in the set. this is the current DOM element.
   * @see {@link https://api.jquery.com/filter/}
   * @since 1.0
   * @since 1.4
   */
  filter(selector: JQuery.Selector | JQuery.TypeOrArray<Element> | JQuery | ((this: TElement, index: number, element: TElement) => boolean)): this;
  /**
   * Get the descendants of each element in the current set of matched elements, filtered by a selector,
   * jQuery object, or element.
   *
   * @param selector A string containing a selector expression to match elements against.
   *                 An element or a jQuery object to match elements against.
   * @see {@link https://api.jquery.com/find/}
   * @since 1.0
   * @since 1.6
   */
  find(selector: JQuery.Selector | Element | JQuery): this;
  /**
   * Stop the currently-running animation, remove all queued animations, and complete all animations for
   * the matched elements.
   *
   * @param queue The name of the queue in which to stop animations.
   * @see {@link https://api.jquery.com/finish/}
   * @since 1.9
   */
  finish(queue?: string): this;
  /**
   * Reduce the set of matched elements to the first in the set.
   *
   * @see {@link https://api.jquery.com/first/}
   * @since 1.4
   */
  first(): this;
  /**
   * Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/focus/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  focus<TData>(eventData: TData,
               handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/focus/}
   * @since 1.0
   * @deprecated 3.3
   */
  focus(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to the "focusin" event.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/focusin/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  focusin<TData>(eventData: TData,
                 handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "focusin" event.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/focusin/}
   * @since 1.4
   * @deprecated 3.3
   */
  focusin(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to the "focusout" JavaScript event.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/focusout/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  focusout<TData>(eventData: TData,
                  handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "focusout" JavaScript event.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/focusout/}
   * @since 1.4
   * @deprecated 3.3
   */
  focusout(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Retrieve one of the elements matched by the jQuery object.
   *
   * @param index A zero-based integer indicating which element to retrieve.
   * @see {@link https://api.jquery.com/get/}
   * @since 1.0
   */
  get(index: number): TElement;
  /**
   * Retrieve the elements matched by the jQuery object.
   *
   * @see {@link https://api.jquery.com/get/}
   * @since 1.0
   */
  get(): TElement[];
  /**
   * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
   *
   * @param selector A string containing a selector expression to match elements against.
   *                 A DOM element to match elements against.
   * @see {@link https://api.jquery.com/has/}
   * @since 1.4
   */
  has(selector: string | Element): this;
  /**
   * Determine whether any of the matched elements are assigned the given class.
   *
   * @param className The class name to search for.
   * @see {@link https://api.jquery.com/hasClass/}
   * @since 1.2
   */
  hasClass(className: string): boolean;
  /**
   * Set the CSS height of every matched element.
   *
   * @param value An integer representing the number of pixels, or an integer with an optional unit of measure
   *              appended (as a string).
   *              A function returning the height to set. Receives the index position of the element in the set and
   *              the old height as arguments. Within the function, this refers to the current element in the set.
   * @see {@link https://api.jquery.com/height/}
   * @since 1.0
   * @since 1.4.1
   */
  height(value: string | number | ((this: TElement, index: number, height: number) => string | number)): this;
  /**
   * Get the current computed height for the first element in the set of matched elements.
   *
   * @see {@link https://api.jquery.com/height/}
   * @since 1.0
   */
  height(): number | undefined;
  /**
   * Hide the matched elements.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/hide/}
   * @since 1.4.3
   */
  hide(duration: JQuery.Duration, easing: string, complete: (this: TElement) => void): this;
  /**
   * Hide the matched elements.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing_complete A string indicating which easing function to use for the transition.
   *                        A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/hide/}
   * @since 1.0
   * @since 1.4.3
   */
  hide(duration: JQuery.Duration, easing_complete: string | ((this: TElement) => void)): this;
  /**
   * Hide the matched elements.
   *
   * @param duration_complete_options A string or number determining how long the animation will run.
   *                                  A function to call once the animation is complete, called once per matched element.
   *                                  A map of additional options to pass to the method.
   * @see {@link https://api.jquery.com/hide/}
   * @since 1.0
   */
  hide(duration_complete_options?: JQuery.Duration | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
  /**
   * Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and
   * leaves the elements.
   *
   * @param handlerInOut A function to execute when the mouse pointer enters or leaves the element.
   * @param handlerOut A function to execute when the mouse pointer leaves the element.
   * @see {@link https://api.jquery.com/hover/}
   * @since 1.0
   * @since 1.4
   */
  // HACK: The type parameter T is not used but ensures the 'event' callback parameter is typed correctly.
  hover<T>(handlerInOut: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false,
           handlerOut?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Set the HTML contents of each element in the set of matched elements.
   *
   * @param htmlString A string of HTML to set as the content of each matched element.
   *                   A function returning the HTML content to set. Receives the index position of the element in the set
   *                   and the old HTML value as arguments. jQuery empties the element before calling the function; use the
   *                   oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set.
   * @see {@link https://api.jquery.com/html/}
   * @since 1.0
   * @since 1.4
   */
  html(htmlString: JQuery.htmlString | ((this: TElement, index: number, oldhtml: JQuery.htmlString) => JQuery.htmlString)): this;
  /**
   * Get the HTML contents of the first element in the set of matched elements.
   *
   * @see {@link https://api.jquery.com/html/}
   * @since 1.0
   */
  html(): string;
  /**
   * Search for a given element from among the matched elements.
   *
   * @param element The DOM element or first element within the jQuery object to look for.
   *                A selector representing a jQuery collection in which to look for an element.
   * @see {@link https://api.jquery.com/index/}
   * @since 1.0
   * @since 1.4
   */
  index(element?: JQuery.Selector | Element | JQuery): number;
  /**
   * Set the CSS inner height of each element in the set of matched elements.
   *
   * @param value A number representing the number of pixels, or a number along with an optional unit of measure
   *              appended (as a string).
   *              A function returning the inner height (including padding but not border) to set. Receives the index
   *              position of the element in the set and the old inner height as arguments. Within the function, this
   *              refers to the current element in the set.
   * @see {@link https://api.jquery.com/innerHeight/}
   * @since 1.8.0
   */
  innerHeight(value: string | number | ((this: TElement, index: number, height: number) => string | number)): this;
  /**
   * Get the current computed height for the first element in the set of matched elements, including
   * padding but not border.
   *
   * @see {@link https://api.jquery.com/innerHeight/}
   * @since 1.2.6
   */
  innerHeight(): number | undefined;
  /**
   * Set the CSS inner width of each element in the set of matched elements.
   *
   * @param value A number representing the number of pixels, or a number along with an optional unit of measure
   *              appended (as a string).
   *              A function returning the inner width (including padding but not border) to set. Receives the index
   *              position of the element in the set and the old inner width as arguments. Within the function, this
   *              refers to the current element in the set.
   * @see {@link https://api.jquery.com/innerWidth/}
   * @since 1.8.0
   */
  innerWidth(value: string | number | ((this: TElement, index: number, width: number) => string | number)): this;
  /**
   * Get the current computed inner width for the first element in the set of matched elements, including
   * padding but not border.
   *
   * @see {@link https://api.jquery.com/innerWidth/}
   * @since 1.2.6
   */
  innerWidth(): number | undefined;
  /**
   * Insert every element in the set of matched elements after the target.
   *
   * @param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements
   *               will be inserted after the element(s) specified by this parameter.
   * @see {@link https://api.jquery.com/insertAfter/}
   * @since 1.0
   */
  insertAfter(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Element> | JQuery): this;
  /**
   * Insert every element in the set of matched elements before the target.
   *
   * @param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements
   *               will be inserted before the element(s) specified by this parameter.
   * @see {@link https://api.jquery.com/insertBefore/}
   * @since 1.0
   */
  insertBefore(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Element> | JQuery): this;
  /**
   * Check the current matched set of elements against a selector, element, or jQuery object and return
   * true if at least one of these elements matches the given arguments.
   *
   * @param selector A string containing a selector expression to match elements against.
   *                 A function used as a test for every element in the set. It accepts two arguments, index, which is
   *                 the element's index in the jQuery collection, and element, which is the DOM element. Within the
   *                 function, this refers to the current DOM element.
   *                 An existing jQuery object to match the current set of elements against.
   *                 One or more elements to match the current set of elements against.
   * @see {@link https://api.jquery.com/is/}
   * @since 1.0
   * @since 1.6
   */
  is(selector: JQuery.Selector | JQuery.TypeOrArray<Element> | JQuery | ((this: TElement, index: number, element: TElement) => boolean)): boolean;
  /**
   * Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/keydown/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  keydown<TData>(eventData: TData,
                 handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/keydown/}
   * @since 1.0
   * @deprecated 3.3
   */
  keydown(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/keypress/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  keypress<TData>(eventData: TData,
                  handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/keypress/}
   * @since 1.0
   * @deprecated 3.3
   */
  keypress(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/keyup/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  keyup<TData>(eventData: TData,
               handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/keyup/}
   * @since 1.0
   * @deprecated 3.3
   */
  keyup(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Reduce the set of matched elements to the final one in the set.
   *
   * @see {@link https://api.jquery.com/last/}
   * @since 1.4
   */
  last(): this;
  /**
   * Load data from the server and place the returned HTML into the matched element.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param data A plain object or string that is sent to the server with the request.
   * @param complete A callback function that is executed when the request completes.
   * @see {@link https://api.jquery.com/load/}
   * @since 1.0
   */
  load(url: string,
       data: string | JQuery.PlainObject,
       complete: (this: TElement, responseText: string, textStatus: JQuery.Ajax.TextStatus, jqXHR: JQuery.jqXHR) => void): this;
  /**
   * Load data from the server and place the returned HTML into the matched element.
   *
   * @param url A string containing the URL to which the request is sent.
   * @param complete_data A callback function that is executed when the request completes.
   *                      A plain object or string that is sent to the server with the request.
   * @see {@link https://api.jquery.com/load/}
   * @since 1.0
   */
  load(url: string,
       complete_data?: ((this: TElement, responseText: string, textStatus: JQuery.Ajax.TextStatus, jqXHR: JQuery.jqXHR) => void) | string | JQuery.PlainObject): this;
  /**
   * Pass each element in the current matched set through a function, producing a new jQuery object
   * containing the return values.
   *
   * @param callback A function object that will be invoked for each element in the current set.
   * @see {@link https://api.jquery.com/map/}
   * @since 1.2
   */
  map<TReturn>(callback: (this: TElement, index: number, domElement: TElement) => JQuery.TypeOrArray<TReturn> | null | undefined): JQuery<TReturn>;
  /**
   * Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mousedown/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  mousedown<TData>(eventData: TData,
                   handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mousedown/}
   * @since 1.0
   * @deprecated 3.3
   */
  mousedown(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mouseenter/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  mouseenter<TData>(eventData: TData,
                    handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mouseenter/}
   * @since 1.0
   * @deprecated 3.3
   */
  mouseenter(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mouseleave/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  mouseleave<TData>(eventData: TData,
                    handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mouseleave/}
   * @since 1.0
   * @deprecated 3.3
   */
  mouseleave(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mousemove/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  mousemove<TData>(eventData: TData,
                   handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mousemove/}
   * @since 1.0
   * @deprecated 3.3
   */
  mousemove(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mouseout/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  mouseout<TData>(eventData: TData,
                  handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mouseout/}
   * @since 1.0
   * @deprecated 3.3
   */
  mouseout(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mouseover/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  mouseover<TData>(eventData: TData,
                   handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mouseover/}
   * @since 1.0
   * @deprecated 3.3
   */
  mouseover(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mouseup/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  mouseup<TData>(eventData: TData,
                 handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/mouseup/}
   * @since 1.0
   * @deprecated 3.3
   */
  mouseup(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Get the immediately following sibling of each element in the set of matched elements. If a selector
   * is provided, it retrieves the next sibling only if it matches that selector.
   *
   * @param selector A string containing a selector expression to match elements against.
   * @see {@link https://api.jquery.com/next/}
   * @since 1.0
   */
  next(selector?: JQuery.Selector): this;
  /**
   * Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
   *
   * @param selector A string containing a selector expression to match elements against.
   * @see {@link https://api.jquery.com/nextAll/}
   * @since 1.2
   */
  nextAll(selector?: string): this;
  /**
   * Get all following siblings of each element up to but not including the element matched by the
   * selector, DOM node, or jQuery object passed.
   *
   * @param selector A string containing a selector expression to indicate where to stop matching following sibling elements.
   *                 A DOM node or jQuery object indicating where to stop matching following sibling elements.
   * @param filter A string containing a selector expression to match elements against.
   * @see {@link https://api.jquery.com/nextUntil/}
   * @since 1.4
   * @since 1.6
   */
  nextUntil(selector?: JQuery.Selector | Element | JQuery, filter?: JQuery.Selector): this;
  /**
   * Remove elements from the set of matched elements.
   *
   * @param selector A string containing a selector expression, a DOM element, or an array of elements to match against the set.
   *                 A function used as a test for each element in the set. It accepts two arguments, index, which is the
   *                 element's index in the jQuery collection, and element, which is the DOM element. Within the
   *                 function, this refers to the current DOM element.
   *                 An existing jQuery object to match the current set of elements against.
   * @see {@link https://api.jquery.com/not/}
   * @since 1.0
   * @since 1.4
   */
  not(selector: JQuery.Selector | JQuery.TypeOrArray<Element> | JQuery | ((this: TElement, index: number, element: TElement) => boolean)): this;
  /**
   * Remove an event handler.
   *
   * @param events One or more space-separated event types and optional namespaces, or just namespaces, such as
   *               "click", "keydown.myPlugin", or ".myPlugin".
   * @param selector A selector which should match the one originally passed to .on() when attaching event handlers.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/off/}
   * @since 1.7
   */
  off(events: string, selector: JQuery.Selector, handler: JQuery.EventHandlerBase<any, JQuery.Event<TElement, any>> | false): this;
  /**
   * Remove an event handler.
   *
   * @param events One or more space-separated event types and optional namespaces, or just namespaces, such as
   *               "click", "keydown.myPlugin", or ".myPlugin".
   * @param selector_handler A selector which should match the one originally passed to .on() when attaching event handlers.
   *                         A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/off/}
   * @since 1.7
   */
  off(events: string, selector_handler?: JQuery.Selector | JQuery.EventHandlerBase<any, JQuery.Event<TElement, any>> | false): this;
  /**
   * Remove an event handler.
   *
   * @param events An object where the string keys represent one or more space-separated event types and optional
   *               namespaces, and the values represent handler functions previously attached for the event(s).
   * @param selector A selector which should match the one originally passed to .on() when attaching event handlers.
   * @see {@link https://api.jquery.com/off/}
   * @since 1.7
   */
  off(events: JQuery.PlainObject<JQuery.EventHandlerBase<any, JQuery.Event<TElement, any>> | false>, selector?: JQuery.Selector): this;
  /**
   * Remove an event handler.
   *
   * @param event A jQuery.Event object.
   * @see {@link https://api.jquery.com/off/}
   * @since 1.7
   */
  off(event?: JQuery.Event<TElement>): this;
  /**
   * Set the current coordinates of every element in the set of matched elements, relative to the document.
   *
   * @param coordinates An object containing the properties top and left, which are numbers indicating the new top and left
   *                    coordinates for the elements.
   *                    A function to return the coordinates to set. Receives the index of the element in the collection as
   *                    the first argument and the current coordinates as the second argument. The function should return an
   *                    object with the new top and left properties.
   * @see {@link https://api.jquery.com/offset/}
   * @since 1.4
   */
  offset(coordinates: JQuery.Coordinates | ((this: TElement, index: number, coords: JQuery.Coordinates) => JQuery.Coordinates)): this;
  /**
   * Get the current coordinates of the first element in the set of matched elements, relative to the document.
   *
   * @see {@link https://api.jquery.com/offset/}
   * @since 1.2
   */
  offset(): JQuery.Coordinates | undefined;
  /**
   * Get the closest ancestor element that is positioned.
   *
   * @see {@link https://api.jquery.com/offsetParent/}
   * @since 1.2.6
   */
  offsetParent(): this;
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
   *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
   * @param data Data to be passed to the handler in event.data when an event is triggered.
   * @param handler A function to execute when the event is triggered.
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on<TData>(events: string,
            selector: JQuery.Selector | null,
            data: TData,
            handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
   *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
   * @param data Data to be passed to the handler in event.data when an event is triggered.
   * @param handler A function to execute when the event is triggered.
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on<TData>(events: string,
      selector: JQuery.Selector | null,
      data: TData,
      handler: ((event: JQueryEventObject) => void)): this; // tslint:disable-line:unified-signatures
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
   *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
   * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
   *                for a function that simply does return false.
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on(events: string,
     selector: JQuery.Selector,
     handler: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
   *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
   * @param handler A function to execute when the event is triggered.
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on(events: string,
      selector: JQuery.Selector,
      handler: ((event: JQueryEventObject) => void)): this; // tslint:disable-line:unified-signatures
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param data Data to be passed to the handler in event.data when an event is triggered.
   * @param handler A function to execute when the event is triggered.
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on<TData>(events: string,
            data: TData,
            handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param data Data to be passed to the handler in event.data when an event is triggered.
   * @param handler A function to execute when the event is triggered.
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on<TData>(events: string,
      data: TData,
      handler: ((event: JQueryEventObject) => void)): this; // tslint:disable-line:unified-signatures
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
   *                for a function that simply does return false.
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on(events: string,
     handler: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param handler A function to execute when the event is triggered.
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on(events: string,
      handler: ((event: JQueryEventObject) => void)): this; // tslint:disable-line:unified-signatures
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events An object in which the string keys represent one or more space-separated event types and optional
   *               namespaces, and the values represent a handler function to be called for the event(s).
   * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
   *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
   * @param data Data to be passed to the handler in event.data when an event occurs.
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on<TData>(events: JQuery.PlainObject<JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>> | false>,
            selector: JQuery.Selector | null,
            data: TData): this;
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events An object in which the string keys represent one or more space-separated event types and optional
   *               namespaces, and the values represent a handler function to be called for the event(s).
   * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
   *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on(events: JQuery.PlainObject<JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false>,
     selector: JQuery.Selector): this; // tslint:disable-line:unified-signatures
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events An object in which the string keys represent one or more space-separated event types and optional
   *               namespaces, and the values represent a handler function to be called for the event(s).
   * @param data Data to be passed to the handler in event.data when an event occurs.
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on<TData>(events: JQuery.PlainObject<JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>> | false>,
            data: TData): this;
  /**
   * Attach an event handler function for one or more events to the selected elements.
   *
   * @param events An object in which the string keys represent one or more space-separated event types and optional
   *               namespaces, and the values represent a handler function to be called for the event(s).
   * @see {@link https://api.jquery.com/on/}
   * @since 1.7
   */
  on(events: JQuery.PlainObject<JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false>): this;
  /**
   * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
   *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
   * @param data Data to be passed to the handler in event.data when an event is triggered.
   * @param handler A function to execute when the event is triggered.
   * @see {@link https://api.jquery.com/one/}
   * @since 1.7
   */
  one<TData>(events: string,
             selector: JQuery.Selector | null,
             data: TData,
             handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
   *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
   * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
   *                for a function that simply does return false.
   * @see {@link https://api.jquery.com/one/}
   * @since 1.7
   */
  one(events: string,
      selector: JQuery.Selector,
      handler: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param data Data to be passed to the handler in event.data when an event is triggered.
   * @param handler A function to execute when the event is triggered.
   * @see {@link https://api.jquery.com/one/}
   * @since 1.7
   */
  one<TData>(events: string,
             data: TData,
             handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
   *
   * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
   * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
   *                for a function that simply does return false.
   * @see {@link https://api.jquery.com/one/}
   * @since 1.7
   */
  one(events: string,
      handler: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
   *
   * @param events An object in which the string keys represent one or more space-separated event types and optional
   *               namespaces, and the values represent a handler function to be called for the event(s).
   * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
   *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
   * @param data Data to be passed to the handler in event.data when an event occurs.
   * @see {@link https://api.jquery.com/one/}
   * @since 1.7
   */
  one<TData>(events: JQuery.PlainObject<JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>> | false>,
             selector: JQuery.Selector | null,
             data: TData): this;
  /**
   * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
   *
   * @param events An object in which the string keys represent one or more space-separated event types and optional
   *               namespaces, and the values represent a handler function to be called for the event(s).
   * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
   *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
   * @see {@link https://api.jquery.com/one/}
   * @since 1.7
   */
  one(events: JQuery.PlainObject<JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false>,
      selector: JQuery.Selector): this; // tslint:disable-line:unified-signatures
  /**
   * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
   *
   * @param events An object in which the string keys represent one or more space-separated event types and optional
   *               namespaces, and the values represent a handler function to be called for the event(s).
   * @param data Data to be passed to the handler in event.data when an event occurs.
   * @see {@link https://api.jquery.com/one/}
   * @since 1.7
   */
  one<TData>(events: JQuery.PlainObject<JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>> | false>,
             data: TData): this;
  /**
   * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
   *
   * @param events An object in which the string keys represent one or more space-separated event types and optional
   *               namespaces, and the values represent a handler function to be called for the event(s).
   * @see {@link https://api.jquery.com/one/}
   * @since 1.7
   */
  one(events: JQuery.PlainObject<JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false>): this;
  /**
   * Set the CSS outer height of each element in the set of matched elements.
   *
   * @param value A number representing the number of pixels, or a number along with an optional unit of measure
   *              appended (as a string).
   * @see {@link https://api.jquery.com/outerHeight/}
   * @since 1.8.0
   */
  outerHeight(value: string | number | ((this: TElement, index: number, height: number) => string | number)): this;
  /**
   * Get the current computed outer height (including padding, border, and optionally margin) for the
   * first element in the set of matched elements.
   *
   * @param includeMargin A Boolean indicating whether to include the element's margin in the calculation.
   * @see {@link https://api.jquery.com/outerHeight/}
   * @since 1.2.6
   */
  outerHeight(includeMargin?: boolean): number | undefined;
  /**
   * Set the CSS outer width of each element in the set of matched elements.
   *
   * @param value A number representing the number of pixels, or a number along with an optional unit of measure
   *              appended (as a string).
   *              A function returning the outer width to set. Receives the index position of the element in the set
   *              and the old outer width as arguments. Within the function, this refers to the current element in the set.
   * @see {@link https://api.jquery.com/outerWidth/}
   * @since 1.8.0
   */
  outerWidth(value: string | number | ((this: TElement, index: number, width: number) => string | number)): this;
  /**
   * Get the current computed outer width (including padding, border, and optionally margin) for the
   * first element in the set of matched elements.
   *
   * @param includeMargin A Boolean indicating whether to include the element's margin in the calculation.
   * @see {@link https://api.jquery.com/outerWidth/}
   * @since 1.2.6
   */
  outerWidth(includeMargin?: boolean): number | undefined;
  /**
   * Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
   *
   * @param selector A string containing a selector expression to match elements against.
   * @see {@link https://api.jquery.com/parent/}
   * @since 1.0
   */
  parent(selector?: JQuery.Selector): this;
  /**
   * Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
   *
   * @param selector A string containing a selector expression to match elements against.
   * @see {@link https://api.jquery.com/parents/}
   * @since 1.0
   */
  parents(selector?: JQuery.Selector): this;
  /**
   * Get the ancestors of each element in the current set of matched elements, up to but not including
   * the element matched by the selector, DOM node, or jQuery object.
   *
   * @param selector A string containing a selector expression to indicate where to stop matching ancestor elements.
   *                 A DOM node or jQuery object indicating where to stop matching ancestor elements.
   * @param filter A string containing a selector expression to match elements against.
   * @see {@link https://api.jquery.com/parentsUntil/}
   * @since 1.4
   * @since 1.6
   */
  parentsUntil(selector?: JQuery.Selector | Element | JQuery, filter?: JQuery.Selector): this;
  /**
   * Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.
   *
   * @see {@link https://api.jquery.com/position/}
   * @since 1.2
   */
  position(): JQuery.Coordinates;
  /**
   * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
   *
   * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
   *                 jQuery objects to insert at the beginning of each element in the set of matched elements.
   * @see {@link https://api.jquery.com/prepend/}
   * @since 1.0
   */
  prepend(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;
  /**
   * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
   *
   * @param fn A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at
   *           the beginning of each element in the set of matched elements. Receives the index position of the
   *           element in the set and the old HTML value of the element as arguments. Within the function, this
   *           refers to the current element in the set.
   * @see {@link https://api.jquery.com/prepend/}
   * @since 1.4
   */
  prepend(fn: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;
  /**
   * Insert every element in the set of matched elements to the beginning of the target.
   *
   * @param target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements
   *               will be inserted at the beginning of the element(s) specified by this parameter.
   * @see {@link https://api.jquery.com/prependTo/}
   * @since 1.0
   */
  prependTo(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Element> | JQuery): this;
  /**
   * Get the immediately preceding sibling of each element in the set of matched elements. If a selector
   * is provided, it retrieves the previous sibling only if it matches that selector.
   *
   * @param selector A string containing a selector expression to match elements against.
   * @see {@link https://api.jquery.com/prev/}
   * @since 1.0
   */
  prev(selector?: JQuery.Selector): this;
  /**
   * Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
   *
   * @param selector A string containing a selector expression to match elements against.
   * @see {@link https://api.jquery.com/prevAll/}
   * @since 1.2
   */
  prevAll(selector?: JQuery.Selector): this;
  /**
   * Get all preceding siblings of each element up to but not including the element matched by the
   * selector, DOM node, or jQuery object.
   *
   * @param selector A string containing a selector expression to indicate where to stop matching preceding sibling elements.
   *                 A DOM node or jQuery object indicating where to stop matching preceding sibling elements.
   * @param filter A string containing a selector expression to match elements against.
   * @see {@link https://api.jquery.com/prevUntil/}
   * @since 1.4
   * @since 1.6
   */
  prevUntil(selector?: JQuery.Selector | Element | JQuery, filter?: JQuery.Selector): this;
  /**
   * Return a Promise object to observe when all actions of a certain type bound to the collection,
   * queued or not, have finished.
   *
   * @param type The type of queue that needs to be observed.
   * @param target Object onto which the promise methods have to be attached
   * @see {@link https://api.jquery.com/promise/}
   * @since 1.6
   */
  promise<T extends object>(type: string, target: T): T & JQuery.Promise<this>;
  /**
   * Return a Promise object to observe when all actions of a certain type bound to the collection,
   * queued or not, have finished.
   *
   * @param target Object onto which the promise methods have to be attached
   * @see {@link https://api.jquery.com/promise/}
   * @since 1.6
   */
  promise<T extends object>(target: T): T & JQuery.Promise<this>;
  /**
   * Return a Promise object to observe when all actions of a certain type bound to the collection,
   * queued or not, have finished.
   *
   * @param type The type of queue that needs to be observed.
   * @see {@link https://api.jquery.com/promise/}
   * @since 1.6
   */
  promise(type?: string): JQuery.Promise<this>;
  /**
   * Set one or more properties for the set of matched elements.
   *
   * @param propertyName The name of the property to set.
   * @param value A function returning the value to set. Receives the index position of the element in the set and the
   *              old property value as arguments. Within the function, the keyword this refers to the current element.
   * @see {@link https://api.jquery.com/prop/}
   * @since 1.6
   */
  prop(propertyName: string, value: (this: TElement, index: number, oldPropertyValue: any) => any): this;
  /**
   * Set one or more properties for the set of matched elements.
   *
   * @param propertyName The name of the property to set.
   * @param value A value to set for the property.
   * @see {@link https://api.jquery.com/prop/}
   * @since 1.6
   */
  prop(propertyName: string, value: any): this; // tslint:disable-line:unified-signatures
  /**
   * Set one or more properties for the set of matched elements.
   *
   * @param properties An object of property-value pairs to set.
   * @see {@link https://api.jquery.com/prop/}
   * @since 1.6
   */
  prop(properties: JQuery.PlainObject): this;
  /**
   * Get the value of a property for the first element in the set of matched elements.
   *
   * @param propertyName The name of the property to get.
   * @see {@link https://api.jquery.com/prop/}
   * @since 1.6
   */
  prop(propertyName: string): any | undefined;
  /**
   * Add a collection of DOM elements onto the jQuery stack.
   *
   * @param elements An array of elements to push onto the stack and make into a new jQuery object.
   * @param name The name of a jQuery method that generated the array of elements.
   * @param args The arguments that were passed in to the jQuery method (for serialization).
   * @see {@link https://api.jquery.com/pushStack/}
   * @since 1.3
   */
  pushStack(elements: ArrayLike<Element>, name: string, args: any[]): this;
  /**
   * Add a collection of DOM elements onto the jQuery stack.
   *
   * @param elements An array of elements to push onto the stack and make into a new jQuery object.
   * @see {@link https://api.jquery.com/pushStack/}
   * @since 1.0
   */
  pushStack(elements: ArrayLike<Element>): this;
  /**
   * Manipulate the queue of functions to be executed, once for each matched element.
   *
   * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
   * @param newQueue The new function to add to the queue, with a function to call that will dequeue the next item.
   *                 An array of functions to replace the current queue contents.
   * @see {@link https://api.jquery.com/queue/}
   * @since 1.2
   */
  queue(queueName: string, newQueue: JQuery.TypeOrArray<JQuery.QueueFunction<TElement>>): this;
  /**
   * Manipulate the queue of functions to be executed, once for each matched element.
   *
   * @param newQueue The new function to add to the queue, with a function to call that will dequeue the next item.
   *                 An array of functions to replace the current queue contents.
   * @see {@link https://api.jquery.com/queue/}
   * @since 1.2
   */
  queue(newQueue: JQuery.TypeOrArray<JQuery.QueueFunction<TElement>>): this;
  /**
   * Show the queue of functions to be executed on the matched elements.
   *
   * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
   * @see {@link https://api.jquery.com/queue/}
   * @since 1.2
   */
  queue(queueName?: string): JQuery.Queue<Node>;
  /**
   * Specify a function to execute when the DOM is fully loaded.
   *
   * @param handler A function to execute after the DOM is ready.
   * @see {@link https://api.jquery.com/ready/}
   * @since 1.0
   * @deprecated 3.0
   */
  ready(handler: ($: JQueryStatic<TElement>) => void): this;
  /**
   * Remove the set of matched elements from the DOM.
   *
   * @param selector A selector expression that filters the set of matched elements to be removed.
   * @see {@link https://api.jquery.com/remove/}
   * @since 1.0
   */
  remove(selector?: string): this;
  /**
   * Remove an attribute from each element in the set of matched elements.
   *
   * @param attributeName An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.
   * @see {@link https://api.jquery.com/removeAttr/}
   * @since 1.0
   */
  removeAttr(attributeName: string): this;
  /**
   * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
   *
   * @param className One or more space-separated classes to be removed from the class attribute of each matched element.
   *                  An array of classes to be removed from the class attribute of each matched element.
   *                  A function returning one or more space-separated class names to be removed. Receives the index
   *                  position of the element in the set and the old class value as arguments.
   * @see {@link https://api.jquery.com/removeClass/}
   * @since 1.0
   * @since 1.4
   * @since 3.3
   */
  removeClass(className?: JQuery.TypeOrArray<string> | ((this: TElement, index: number, className: string) => string)): this;
  /**
   * Remove a previously-stored piece of data.
   *
   * @param name A string naming the piece of data to delete.
   *             An array or space-separated string naming the pieces of data to delete.
   * @see {@link https://api.jquery.com/removeData/}
   * @since 1.2.3
   * @since 1.7
   */
  removeData(name?: JQuery.TypeOrArray<string>): this;
  /**
   * Remove a property for the set of matched elements.
   *
   * @param propertyName The name of the property to remove.
   * @see {@link https://api.jquery.com/removeProp/}
   * @since 1.6
   */
  removeProp(propertyName: string): this;
  /**
   * Replace each target element with the set of matched elements.
   *
   * @param target A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.
   * @see {@link https://api.jquery.com/replaceAll/}
   * @since 1.2
   */
  replaceAll(target: JQuery.Selector | JQuery | JQuery.TypeOrArray<Element>): this;
  /**
   * Replace each element in the set of matched elements with the provided new content and return the set
   * of elements that was removed.
   *
   * @param newContent The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.
   *                   A function that returns content with which to replace the set of matched elements.
   * @see {@link https://api.jquery.com/replaceWith/}
   * @since 1.2
   * @since 1.4
   */
  replaceWith(newContent: JQuery.htmlString | JQuery | JQuery.TypeOrArray<Element> | ((this: TElement) => any)): this;
  /**
   * Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/resize/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  resize<TData>(eventData: TData,
                handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/resize/}
   * @since 1.0
   * @deprecated 3.3
   */
  resize(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/scroll/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  scroll<TData>(eventData: TData,
                handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/scroll/}
   * @since 1.0
   * @deprecated 3.3
   */
  scroll(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Set the current horizontal position of the scroll bar for each of the set of matched elements.
   *
   * @param value An integer indicating the new position to set the scroll bar to.
   * @see {@link https://api.jquery.com/scrollLeft/}
   * @since 1.2.6
   */
  scrollLeft(value: number): this;
  /**
   * Get the current horizontal position of the scroll bar for the first element in the set of matched elements.
   *
   * @see {@link https://api.jquery.com/scrollLeft/}
   * @since 1.2.6
   */
  scrollLeft(): number | undefined;
  /**
   * Set the current vertical position of the scroll bar for each of the set of matched elements.
   *
   * @param value A number indicating the new position to set the scroll bar to.
   * @see {@link https://api.jquery.com/scrollTop/}
   * @since 1.2.6
   */
  scrollTop(value: number): this;
  /**
   * Get the current vertical position of the scroll bar for the first element in the set of matched
   * elements or set the vertical position of the scroll bar for every matched element.
   *
   * @see {@link https://api.jquery.com/scrollTop/}
   * @since 1.2.6
   */
  scrollTop(): number | undefined;
  /**
   * Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/select/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  select<TData>(eventData: TData,
                handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/select/}
   * @since 1.0
   * @deprecated 3.3
   */
  select(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Encode a set of form elements as a string for submission.
   *
   * @see {@link https://api.jquery.com/serialize/}
   * @since 1.0
   */
  serialize(): string;
  /**
   * Encode a set of form elements as an array of names and values.
   *
   * @see {@link https://api.jquery.com/serializeArray/}
   * @since 1.2
   */
  serializeArray(): JQuery.NameValuePair[];
  /**
   * Display the matched elements.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/show/}
   * @since 1.4.3
   */
  show(duration: JQuery.Duration, easing: string, complete: (this: TElement) => void): this;
  /**
   * Display the matched elements.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing_complete A string indicating which easing function to use for the transition.
   *                        A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/show/}
   * @since 1.0
   * @since 1.4.3
   */
  show(duration: JQuery.Duration, easing_complete: string | ((this: TElement) => void)): this;
  /**
   * Display the matched elements.
   *
   * @param duration_complete_options A string or number determining how long the animation will run.
   *                                  A function to call once the animation is complete, called once per matched element.
   *                                  A map of additional options to pass to the method.
   * @see {@link https://api.jquery.com/show/}
   * @since 1.0
   */
  show(duration_complete_options?: JQuery.Duration | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
  /**
   * Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
   *
   * @param selector A string containing a selector expression to match elements against.
   * @see {@link https://api.jquery.com/siblings/}
   * @since 1.0
   */
  siblings(selector?: JQuery.Selector): this;
  /**
   * Reduce the set of matched elements to a subset specified by a range of indices.
   *
   * @param start An integer indicating the 0-based position at which the elements begin to be selected. If negative,
   *              it indicates an offset from the end of the set.
   * @param end An integer indicating the 0-based position at which the elements stop being selected. If negative,
   *            it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.
   * @see {@link https://api.jquery.com/slice/}
   * @since 1.1.4
   */
  slice(start: number, end?: number): this;
  /**
   * Display the matched elements with a sliding motion.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/slideDown/}
   * @since 1.4.3
   */
  slideDown(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
  /**
   * Display the matched elements with a sliding motion.
   *
   * @param duration_easing A string or number determining how long the animation will run.
   *                        A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/slideDown/}
   * @since 1.0
   * @since 1.4.3
   */
  slideDown(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
  /**
   * Display the matched elements with a sliding motion.
   *
   * @param duration_easing_complete_options A string or number determining how long the animation will run.
   *                                         A string indicating which easing function to use for the transition.
   *                                         A function to call once the animation is complete, called once per matched element.
   *                                         A map of additional options to pass to the method.
   * @see {@link https://api.jquery.com/slideDown/}
   * @since 1.0
   * @since 1.4.3
   */
  slideDown(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
  /**
   * Display or hide the matched elements with a sliding motion.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/slideToggle/}
   * @since 1.4.3
   */
  slideToggle(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
  /**
   * Display or hide the matched elements with a sliding motion.
   *
   * @param duration_easing A string or number determining how long the animation will run.
   *                        A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/slideToggle/}
   * @since 1.0
   * @since 1.4.3
   */
  slideToggle(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
  /**
   * Display or hide the matched elements with a sliding motion.
   *
   * @param duration_easing_complete_options A string or number determining how long the animation will run.
   *                                         A string indicating which easing function to use for the transition.
   *                                         A function to call once the animation is complete, called once per matched element.
   *                                         A map of additional options to pass to the method.
   * @see {@link https://api.jquery.com/slideToggle/}
   * @since 1.0
   * @since 1.4.3
   */
  slideToggle(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
  /**
   * Hide the matched elements with a sliding motion.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/slideUp/}
   * @since 1.4.3
   */
  slideUp(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
  /**
   * Hide the matched elements with a sliding motion.
   *
   * @param duration_easing A string or number determining how long the animation will run.
   *                        A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/slideUp/}
   * @since 1.0
   * @since 1.4.3
   */
  slideUp(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;
  /**
   * Hide the matched elements with a sliding motion.
   *
   * @param duration_easing_complete_options A string or number determining how long the animation will run.
   *                                         A string indicating which easing function to use for the transition.
   *                                         A function to call once the animation is complete, called once per matched element.
   *                                         A map of additional options to pass to the method.
   * @see {@link https://api.jquery.com/slideUp/}
   * @since 1.0
   * @since 1.4.3
   */
  slideUp(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;
  /**
   * Stop the currently-running animation on the matched elements.
   *
   * @param queue The name of the queue in which to stop animations.
   * @param clearQueue A Boolean indicating whether to remove queued animation as well. Defaults to false.
   * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.
   * @see {@link https://api.jquery.com/stop/}
   * @since 1.7
   */
  stop(queue: string, clearQueue?: boolean, jumpToEnd?: boolean): this;
  /**
   * Stop the currently-running animation on the matched elements.
   *
   * @param clearQueue A Boolean indicating whether to remove queued animation as well. Defaults to false.
   * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.
   * @see {@link https://api.jquery.com/stop/}
   * @since 1.2
   */
  stop(clearQueue?: boolean, jumpToEnd?: boolean): this;
  /**
   * Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
   *
   * @param eventData An object containing data that will be passed to the event handler.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/submit/}
   * @since 1.4.3
   * @deprecated 3.3
   */
  submit<TData>(eventData: TData,
                handler: JQuery.EventHandler<TElement, TData> | JQuery.EventHandlerBase<any, JQuery.Event<TElement, TData>>): this;
  /**
   * Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
   *
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/submit/}
   * @since 1.0
   * @deprecated 3.3
   */
  submit(handler?: JQuery.EventHandler<TElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;
  /**
   * Set the content of each element in the set of matched elements to the specified text.
   *
   * @param text The text to set as the content of each matched element. When Number or Boolean is supplied, it will
   *             be converted to a String representation.
   *             A function returning the text content to set. Receives the index position of the element in the set
   *             and the old text value as arguments.
   * @see {@link https://api.jquery.com/text/}
   * @since 1.0
   * @since 1.4
   */
  text(text: string | number | boolean | ((this: TElement, index: number, text: string) => string | number | boolean)): this;
  /**
   * Get the combined text contents of each element in the set of matched elements, including their descendants.
   *
   * @see {@link https://api.jquery.com/text/}
   * @since 1.0
   */
  text(): string;
  /**
   * Retrieve all the elements contained in the jQuery set, as an array.
   *
   * @see {@link https://api.jquery.com/toArray/}
   * @since 1.4
   */
  toArray(): TElement[];
  /**
   * Display or hide the matched elements.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param easing A string indicating which easing function to use for the transition.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/toggle/}
   * @since 1.4.3
   */
  toggle(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;
  /**
   * Display or hide the matched elements.
   *
   * @param duration A string or number determining how long the animation will run.
   * @param complete A function to call once the animation is complete, called once per matched element.
   * @see {@link https://api.jquery.com/toggle/}
   * @since 1.0
   */
  toggle(duration: JQuery.Duration, complete: (this: TElement) => void): this;
  /**
   * Display or hide the matched elements.
   *
   * @param duration_complete_options_display A string or number determining how long the animation will run.
   *                                          A function to call once the animation is complete, called once per matched element.
   *                                          A map of additional options to pass to the method.
   *                                          Use true to show the element or false to hide it.
   * @see {@link https://api.jquery.com/toggle/}
   * @since 1.0
   * @since 1.3
   */
  toggle(duration_complete_options_display?: JQuery.Duration | ((this: TElement) => void) | JQuery.EffectsOptions<TElement> | boolean): this;
  /**
   * Add or remove one or more classes from each element in the set of matched elements, depending on
   * either the class's presence or the value of the state argument.
   *
   * @param className One or more class names (separated by spaces) to be toggled for each element in the matched set.
   *                  An array of classes to be toggled for each element in the matched set.
   *                  A function that returns class names to be toggled in the class attribute of each element in the
   *                  matched set. Receives the index position of the element in the set, the old class value, and the state as arguments.
   * @param state A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.
   * @see {@link https://api.jquery.com/toggleClass/}
   * @since 1.0
   * @since 1.3
   * @since 1.4
   * @since 3.3
   */
  toggleClass<TState extends boolean>(className: JQuery.TypeOrArray<string> | ((this: TElement, index: number, className: string, state: TState) => string),
                                      state?: TState): this;
  /**
   * Add or remove one or more classes from each element in the set of matched elements, depending on
   * either the class's presence or the value of the state argument.
   *
   * @param state A boolean value to determine whether the class should be added or removed.
   * @see {@link https://api.jquery.com/toggleClass/}
   * @since 1.4
   * @deprecated 3.0
   */
  toggleClass(state?: boolean): this;
  /**
   * Execute all handlers and behaviors attached to the matched elements for the given event type.
   *
   * @param eventType A string containing a JavaScript event type, such as click or submit.
   *                  A jQuery.Event object.
   * @param extraParameters Additional parameters to pass along to the event handler.
   * @see {@link https://api.jquery.com/trigger/}
   * @since 1.0
   * @since 1.3
   */
  trigger(eventType: string | JQuery.Event<TElement>, extraParameters?: any[] | JQuery.PlainObject | string | number): this;
  /**
   * Execute all handlers attached to an element for an event.
   *
   * @param eventType A string containing a JavaScript event type, such as click or submit.
   *                  A jQuery.Event object.
   * @param extraParameters Additional parameters to pass along to the event handler.
   * @see {@link https://api.jquery.com/triggerHandler/}
   * @since 1.2
   * @since 1.3
   */
  triggerHandler(eventType: string | JQuery.Event<TElement>, extraParameters?: any[] | JQuery.PlainObject | string | number): undefined | any;
  /**
   * Remove a previously-attached event handler from the elements.
   *
   * @param event A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/unbind/}
   * @since 1.0
   * @since 1.4.3
   * @deprecated 3.0
   */
  unbind(event: string, handler: JQuery.EventHandlerBase<any, JQuery.Event<TElement, any>> | false): this;
  /**
   * Remove a previously-attached event handler from the elements.
   *
   * @param event A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
   *              A jQuery.Event object.
   * @see {@link https://api.jquery.com/unbind/}
   * @since 1.0
   * @deprecated 3.0
   */
  unbind(event?: string | JQuery.Event<TElement>): this;
  /**
   * Remove a handler from the event for all elements which match the current selector, based upon a
   * specific set of root elements.
   *
   * @param selector A selector which will be used to filter the event results.
   * @param eventType A string containing a JavaScript event type, such as "click" or "keydown"
   * @param handler A function to execute each time the event is triggered.
   * @see {@link https://api.jquery.com/undelegate/}
   * @since 1.4.2
   * @deprecated 3.0
   */
  undelegate(selector: JQuery.Selector, eventType: string, handler: JQuery.EventHandlerBase<any, JQuery.Event<TElement, any>> | false): this;
  /**
   * Remove a handler from the event for all elements which match the current selector, based upon a
   * specific set of root elements.
   *
   * @param selector A selector which will be used to filter the event results.
   * @param eventTypes A string containing a JavaScript event type, such as "click" or "keydown"
   *                   An object of one or more event types and previously bound functions to unbind from them.
   * @see {@link https://api.jquery.com/undelegate/}
   * @since 1.4.2
   * @since 1.4.3
   * @deprecated 3.0
   */
  undelegate(selector: JQuery.Selector, eventTypes: string | JQuery.PlainObject<JQuery.EventHandlerBase<any, JQuery.Event<TElement, any>> | false>): this;
  /**
   * Remove a handler from the event for all elements which match the current selector, based upon a
   * specific set of root elements.
   *
   * @param namespace A selector which will be used to filter the event results.
   * @see {@link https://api.jquery.com/undelegate/}
   * @since 1.4.2
   * @since 1.6
   * @deprecated 3.0
   */
  undelegate(namespace?: string): this;
  /**
   * Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.
   *
   * @param selector A selector to check the parent element against. If an element's parent does not match the selector,
   *                 the element won't be unwrapped.
   * @see {@link https://api.jquery.com/unwrap/}
   * @since 1.4
   * @since 3.0
   */
  unwrap(selector?: string): this;
  /**
   * Set the value of each element in the set of matched elements.
   *
   * @param value A string of text, a number, or an array of strings corresponding to the value of each matched
   *              element to set as selected/checked.
   *              A function returning the value to set. this is the current element. Receives the index position of
   *              the element in the set and the old value as arguments.
   * @see {@link https://api.jquery.com/val/}
   * @since 1.0
   * @since 1.4
   */
  val(value: string | number | string[] | ((this: TElement, index: number, value: string) => string)): this;
  /**
   * Get the current value of the first element in the set of matched elements.
   *
   * @see {@link https://api.jquery.com/val/}
   * @since 1.0
   */
  val(): string | number | string[] | undefined;
  /**
   * Set the CSS width of each element in the set of matched elements.
   *
   * @param value An integer representing the number of pixels, or an integer along with an optional unit of measure
   *              appended (as a string).
   *              A function returning the width to set. Receives the index position of the element in the set and the
   *              old width as arguments. Within the function, this refers to the current element in the set.
   * @see {@link https://api.jquery.com/width/}
   * @since 1.0
   * @since 1.4.1
   */
  width(value: string | number | ((this: TElement, index: number, value: number) => string | number)): this;
  /**
   * Get the current computed width for the first element in the set of matched elements.
   *
   * @see {@link https://api.jquery.com/width/}
   * @since 1.0
   */
  width(): number | undefined;
  /**
   * Wrap an HTML structure around each element in the set of matched elements.
   *
   * @param wrappingElement A selector, element, HTML string, or jQuery object specifying the structure to wrap around the
   *                        matched elements. When you pass a jQuery collection containing more than one element, or a selector
   *                        matching more than one element, the first element will be used.
   *                        A callback function returning the HTML content or jQuery object to wrap around the matched elements.
   *                        Receives the index position of the element in the set as an argument. Within the function, this
   *                        refers to the current element in the set.
   * @see {@link https://api.jquery.com/wrap/}
   * @since 1.0
   * @since 1.4
   */
  wrap(wrappingElement: JQuery.Selector | JQuery.htmlString | Element | JQuery | ((this: TElement, index: number) => string | JQuery)): this;
  /**
   * Wrap an HTML structure around all elements in the set of matched elements.
   *
   * @param wrappingElement A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.
   *                        A callback function returning the HTML content or jQuery object to wrap around all the matched
   *                        elements. Within the function, this refers to the first element in the set. Prior to jQuery 3.0, the
   *                        callback was incorrectly called for every element in the set and received the index position of the
   *                        element in the set as an argument.
   * @see {@link https://api.jquery.com/wrapAll/}
   * @since 1.2
   * @since 1.4
   */
  wrapAll(wrappingElement: JQuery.Selector | JQuery.htmlString | Element | JQuery | ((this: TElement) => string | JQuery)): this;
  /**
   * Wrap an HTML structure around the content of each element in the set of matched elements.
   *
   * @param wrappingElement An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap
   *                        around the content of the matched elements.
   *                        A callback function which generates a structure to wrap around the content of the matched elements.
   *                        Receives the index position of the element in the set as an argument. Within the function, this
   *                        refers to the current element in the set.
   * @see {@link https://api.jquery.com/wrapInner/}
   * @since 1.2
   * @since 1.4
   */
  wrapInner(wrappingElement: JQuery.Selector | JQuery.htmlString | Element | JQuery | ((this: TElement, index: number) => string | JQuery | Element)): this;

  [n: number]: TElement;
}

// ES5 compatibility
interface Iterable<T> { }

declare namespace JQuery {
  type TypeOrArray<T> = T | T[];
  type Node = Element | Text | Comment | DocumentFragment;

  /**
   * A string is designated htmlString in jQuery documentation when it is used to represent one or more
   * DOM elements, typically to be created and inserted in the document. When passed as an argument of
   * the jQuery() function, the string is identified as HTML if it starts with <tag ... >) and is parsed
   * as such until the final > character. Prior to jQuery 1.9, a string was considered to be HTML if it
   * contained <tag ... > anywhere within the string.
   */
  type htmlString = string;
  /**
   * A selector is used in jQuery to select DOM elements from a DOM document. That document is, in most
   * cases, the DOM document present in all browsers, but can also be an XML document received via Ajax.
   */
  type Selector = string;

  /**
   * The PlainObject type is a JavaScript object containing zero or more key-value pairs. The plain
   * object is, in other words, an Object object. It is designated "plain" in jQuery documentation to
   * distinguish it from other kinds of JavaScript objects: for example, null, user-defined arrays, and
   * host objects such as document, all of which have a typeof value of "object."
   */
  interface PlainObject<T = any> {
      [key: string]: T;
  }

  // region Ajax

  interface AjaxSettings<TContext = any> extends Ajax.AjaxSettingsBase<TContext> {
      /**
       * A string containing the URL to which the request is sent.
       */
      url?: string;
      /**
       * A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x,
       * XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and
       * settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend
       * function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless
       * of the type of request.
       */
      beforeSend?(this: TContext, jqXHR: jqXHR, settings: AjaxSettings<TContext>): false | void;
  }

  interface UrlAjaxSettings<TContext = any> extends Ajax.AjaxSettingsBase<TContext> {
      /**
       * A string containing the URL to which the request is sent.
       */
      url: string;
      /**
       * A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x,
       * XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and
       * settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend
       * function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless
       * of the type of request.
       */
      beforeSend?(this: TContext, jqXHR: jqXHR, settings: UrlAjaxSettings<TContext>): false | void;
  }

  namespace Ajax {
      type SuccessTextStatus = 'success' | 'notmodified' | 'nocontent';
      type ErrorTextStatus = 'timeout' | 'error' | 'abort' | 'parsererror';
      type TextStatus = SuccessTextStatus | ErrorTextStatus;

      interface SuccessCallback<TContext> {
          (this: TContext, data: any, textStatus: SuccessTextStatus, jqXHR: JQuery.jqXHR): void;
      }

      interface ErrorCallback<TContext> {
          (this: TContext, jqXHR: jqXHR, textStatus: ErrorTextStatus, errorThrown: string): void;
      }

      interface CompleteCallback<TContext> {
          (this: TContext, jqXHR: jqXHR, textStatus: TextStatus): void;
      }

      /**
       * @see {@link http://api.jquery.com/jquery.ajax/#jQuery-ajax-settings}
       */
      interface AjaxSettingsBase<TContext> {
          /**
           * A set of key/value pairs that map a given dataType to its MIME type, which gets sent in the Accept
           * request header. This header tells the server what kind of response it will accept in return.
           */
          accepts?: PlainObject<string>;
          /**
           * By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need
           * synchronous requests, set this option to false. Cross-domain requests and dataType: "jsonp" requests
           * do not support synchronous operation. Note that synchronous requests may temporarily lock the
           * browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async:
           * false with jqXHR ($.Deferred) is deprecated; you must use the success/error/complete callback
           * options instead of the corresponding methods of the jqXHR object such as jqXHR.done().
           */
          async?: boolean;
          /**
           * A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x,
           * XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and
           * settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend
           * function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless
           * of the type of request.
           */
          beforeSend?(this: TContext, jqXHR: jqXHR, settings: AjaxSettingsBase<TContext>): false | void;
          /**
           * If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache
           * to false will only work correctly with HEAD and GET requests. It works by appending "_={timestamp}"
           * to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a
           * POST is made to a URL that has already been requested by a GET.
           */
          cache?: boolean;
          /**
           * A function to be called when the request finishes (after success and error callbacks are executed).
           * The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a
           * string categorizing the status of the request ("success", "notmodified", "nocontent", "error",
           * "timeout", "abort", or "parsererror"). As of jQuery 1.5, the complete setting can accept an array of
           * functions. Each function will be called in turn. This is an Ajax Event.
           */
          complete?: TypeOrArray<Ajax.CompleteCallback<TContext>>;
          /**
           * An object of string/regular-expression pairs that determine how jQuery will parse the response,
           * given its content type.
           */
          contents?: PlainObject<RegExp>;
          /**
           * When sending data to the server, use this content type. Default is
           * "application/x-www-form-urlencoded; charset=UTF-8", which is fine for most cases. If you explicitly
           * pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent).
           * As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C
           * XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset
           * will not force the browser to change the encoding. Note: For cross-domain requests, setting the
           * content type to anything other than application/x-www-form-urlencoded, multipart/form-data, or
           * text/plain will trigger the browser to send a preflight OPTIONS request to the server.
           */
          contentType?: string | false;
          /**
           * This object will be the context of all Ajax-related callbacks. By default, the context is an object
           * that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax).
           */
          context?: TContext;
          /**
           * An object containing dataType-to-dataType converters. Each converter's value is a function that
           * returns the transformed value of the response.
           */
          converters?: PlainObject<((value: any) => any) | true>;
          /**
           * If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of
           * crossDomain to true. This allows, for example, server-side redirection to another domain.
           */
          crossDomain?: boolean;
          /**
           * Data to be sent to the server. It is converted to a query string, if not already a string. It's
           * appended to the url for GET-requests. See processData option to prevent this automatic processing.
           * Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same
           * key based on the value of the traditional setting (described below).
           */
          data?: PlainObject | string;
          /**
           * A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering
           * function to sanitize the response. You should return the sanitized data. The function accepts two
           * arguments: The raw data returned from the server and the 'dataType' parameter.
           */
          dataFilter?(data: string, type: string): any;
          /**
           * The type of data that you're expecting back from the server. If none is specified, jQuery will try
           * to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON
           * will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be
           * returned as a string). The available types (and the result passed as the first argument to your
           * success callback) are:
           *
           * "xml": Returns a XML document that can be processed via jQuery.
           *
           * "html": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.
           *
           * "script": Evaluates the response as JavaScript and returns it as plain text. Disables caching by
           * appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to
           * true. Note: This will turn POSTs into GETs for remote-domain requests.
           *
           * "json": Evaluates the response as JSON and returns a JavaScript object. Cross-domain "json" requests
           * are converted to "jsonp" unless the request includes jsonp: false in its request options. The JSON
           * data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of
           * jQuery 1.9, an empty response is also rejected; the server should return a response of null or {}
           * instead. (See json.org for more information on proper JSON formatting.)
           *
           * "jsonp": Loads in a JSON block using JSONP. Adds an extra "?callback=?" to the end of your URL to
           * specify the callback. Disables caching by appending a query string parameter, "_=[TIMESTAMP]", to
           * the URL unless the cache option is set to true.
           *
           * "text": A plain text string.
           *
           * multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it
           * received in the Content-Type header to what you require. For example, if you want a text response to
           * be treated as XML, use "text xml" for the dataType. You can also make a JSONP request, have it
           * received as text, and interpreted by jQuery as XML: "jsonp text xml". Similarly, a shorthand string
           * such as "jsonp xml" will first attempt to convert from jsonp to xml, and, failing that, convert from
           * jsonp to text, and then from text to xml.
           */
          dataType?: 'xml' | 'html' | 'script' | 'json' | 'jsonp' | 'text' | string;
          /**
           * A function to be called if the request fails. The function receives three arguments: The jqXHR (in
           * jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an
           * optional exception object, if one occurred. Possible values for the second argument (besides null)
           * are "timeout", "error", "abort", and "parsererror". When an HTTP error occurs, errorThrown receives
           * the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error." As of jQuery
           * 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note:
           * This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event.
           */
          error?: TypeOrArray<Ajax.ErrorCallback<TContext>>;
          /**
           * Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to
           * prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to
           * control various Ajax Events.
           */
          global?: boolean;
          /**
           * An object of additional header key/value pairs to send along with requests using the XMLHttpRequest
           * transport. The header X-Requested-With: XMLHttpRequest is always added, but its default
           * XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from
           * within the beforeSend function.
           */
          headers?: PlainObject<string | null | undefined>;
          /**
           * Allow the request to be successful only if the response has changed since the last request. This is
           * done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery
           * 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data.
           */
          ifModified?: boolean;
          /**
           * Allow the current environment to be recognized as "local," (e.g. the filesystem), even if jQuery
           * does not recognize it as such by default. The following protocols are currently recognized as local:
           * file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so
           * once in the $.ajaxSetup() method.
           */
          isLocal?: boolean;
          /**
           * Override the callback function name in a JSONP request. This value will be used instead of
           * 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would
           * result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false
           * prevents jQuery from adding the "?callback" string to the URL or attempting to use "=?" for
           * transformation. In this case, you should also explicitly set the jsonpCallback setting. For example,
           * { jsonp: false, jsonpCallback: "callbackName" }. If you don't trust the target of your Ajax
           * requests, consider setting the jsonp property to false for security reasons.
           */
          jsonp?: string | false;
          /**
           * Specify the callback function name for a JSONP request. This value will be used instead of the
           * random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name
           * as it'll make it easier to manage the requests and provide callbacks and error handling. You may
           * want to specify the callback when you want to enable better browser caching of GET requests. As of
           * jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback
           * is set to the return value of that function.
           */
          jsonpCallback?: string | ((this: TContext) => string);
          /**
           * The HTTP method to use for the request (e.g. "POST", "GET", "PUT").
           */
          method?: string;
          /**
           * A mime type to override the XHR mime type.
           */
          mimeType?: string;
          /**
           * A password to be used with XMLHttpRequest in response to an HTTP access authentication request.
           */
          password?: string;
          /**
           * By default, data passed in to the data option as an object (technically, anything other than a
           * string) will be processed and transformed into a query string, fitting to the default content-type
           * "application/x-www-form-urlencoded". If you want to send a DOMDocument, or other non-processed data,
           * set this option to false.
           */
          processData?: boolean;
          /**
           * Only applies when the "script" transport is used (e.g., cross-domain requests with "jsonp" or
           * "script" dataType and "GET" type). Sets the charset attribute on the script tag used in the request.
           * Used when the character set on the local page is not the same as the one on the remote script.
           */
          scriptCharset?: string;
          /**
           * An object of numeric HTTP codes and functions to be called when the response has the corresponding
           * code.
           *
           * If the request is successful, the status code functions take the same parameters as the success
           * callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback.
           */
          statusCode?: StatusCodeCallbacks<TContext>;
          /**
           * A function to be called if the request succeeds. The function gets passed three arguments: The data
           * returned from the server, formatted according to the dataType parameter or the dataFilter callback
           * function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x,
           * XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each
           * function will be called in turn. This is an Ajax Event.
           */
          success?: TypeOrArray<Ajax.SuccessCallback<TContext>>;
          /**
           * Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This
           * will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the
           * $.ajax call is made; if several other requests are in progress and the browser has no connections
           * available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and
           * below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any
           * object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be
           * cancelled by a timeout; the script will run even if it arrives after the timeout period.
           */
          timeout?: number;
          /**
           * Set this to true if you wish to use the traditional style of param serialization.
           */
          traditional?: boolean;
          /**
           * An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0.
           */
          type?: string;
          /**
           * A username to be used with XMLHttpRequest in response to an HTTP access authentication request.
           */
          username?: string;
          // ActiveXObject requires "lib": ["scripthost"] which consumers would also require
          /**
           * Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE),
           * the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or
           * enhancements to the factory.
           */
          xhr?(): XMLHttpRequest;
          /**
           * An object of fieldName-fieldValue pairs to set on the native XHR object.
           *
           * In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS
           * requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+
           * should you require the use of it.
           */
          xhrFields?: XHRFields;
      }

      type StatusCodeCallbacks<TContext> = {
          // region Success Status Codes

          // jQuery treats 2xx and 304 status codes as a success

          200?: SuccessCallback<TContext>;
          201?: SuccessCallback<TContext>;
          202?: SuccessCallback<TContext>;
          203?: SuccessCallback<TContext>;
          204?: SuccessCallback<TContext>;
          205?: SuccessCallback<TContext>;
          206?: SuccessCallback<TContext>;
          207?: SuccessCallback<TContext>;
          208?: SuccessCallback<TContext>;
          209?: SuccessCallback<TContext>;
          210?: SuccessCallback<TContext>;
          211?: SuccessCallback<TContext>;
          212?: SuccessCallback<TContext>;
          213?: SuccessCallback<TContext>;
          214?: SuccessCallback<TContext>;
          215?: SuccessCallback<TContext>;
          216?: SuccessCallback<TContext>;
          217?: SuccessCallback<TContext>;
          218?: SuccessCallback<TContext>;
          219?: SuccessCallback<TContext>;
          220?: SuccessCallback<TContext>;
          221?: SuccessCallback<TContext>;
          222?: SuccessCallback<TContext>;
          223?: SuccessCallback<TContext>;
          224?: SuccessCallback<TContext>;
          225?: SuccessCallback<TContext>;
          226?: SuccessCallback<TContext>;
          227?: SuccessCallback<TContext>;
          228?: SuccessCallback<TContext>;
          229?: SuccessCallback<TContext>;
          230?: SuccessCallback<TContext>;
          231?: SuccessCallback<TContext>;
          232?: SuccessCallback<TContext>;
          233?: SuccessCallback<TContext>;
          234?: SuccessCallback<TContext>;
          235?: SuccessCallback<TContext>;
          236?: SuccessCallback<TContext>;
          237?: SuccessCallback<TContext>;
          238?: SuccessCallback<TContext>;
          239?: SuccessCallback<TContext>;
          240?: SuccessCallback<TContext>;
          241?: SuccessCallback<TContext>;
          242?: SuccessCallback<TContext>;
          243?: SuccessCallback<TContext>;
          244?: SuccessCallback<TContext>;
          245?: SuccessCallback<TContext>;
          246?: SuccessCallback<TContext>;
          247?: SuccessCallback<TContext>;
          248?: SuccessCallback<TContext>;
          249?: SuccessCallback<TContext>;
          250?: SuccessCallback<TContext>;
          251?: SuccessCallback<TContext>;
          252?: SuccessCallback<TContext>;
          253?: SuccessCallback<TContext>;
          254?: SuccessCallback<TContext>;
          255?: SuccessCallback<TContext>;
          256?: SuccessCallback<TContext>;
          257?: SuccessCallback<TContext>;
          258?: SuccessCallback<TContext>;
          259?: SuccessCallback<TContext>;
          260?: SuccessCallback<TContext>;
          261?: SuccessCallback<TContext>;
          262?: SuccessCallback<TContext>;
          263?: SuccessCallback<TContext>;
          264?: SuccessCallback<TContext>;
          265?: SuccessCallback<TContext>;
          266?: SuccessCallback<TContext>;
          267?: SuccessCallback<TContext>;
          268?: SuccessCallback<TContext>;
          269?: SuccessCallback<TContext>;
          270?: SuccessCallback<TContext>;
          271?: SuccessCallback<TContext>;
          272?: SuccessCallback<TContext>;
          273?: SuccessCallback<TContext>;
          274?: SuccessCallback<TContext>;
          275?: SuccessCallback<TContext>;
          276?: SuccessCallback<TContext>;
          277?: SuccessCallback<TContext>;
          278?: SuccessCallback<TContext>;
          279?: SuccessCallback<TContext>;
          280?: SuccessCallback<TContext>;
          281?: SuccessCallback<TContext>;
          282?: SuccessCallback<TContext>;
          283?: SuccessCallback<TContext>;
          284?: SuccessCallback<TContext>;
          285?: SuccessCallback<TContext>;
          286?: SuccessCallback<TContext>;
          287?: SuccessCallback<TContext>;
          288?: SuccessCallback<TContext>;
          289?: SuccessCallback<TContext>;
          290?: SuccessCallback<TContext>;
          291?: SuccessCallback<TContext>;
          292?: SuccessCallback<TContext>;
          293?: SuccessCallback<TContext>;
          294?: SuccessCallback<TContext>;
          295?: SuccessCallback<TContext>;
          296?: SuccessCallback<TContext>;
          297?: SuccessCallback<TContext>;
          298?: SuccessCallback<TContext>;
          299?: SuccessCallback<TContext>;
          304?: SuccessCallback<TContext>;

          // endregion

          // region Error Status Codes

          300?: ErrorCallback<TContext>;
          301?: ErrorCallback<TContext>;
          302?: ErrorCallback<TContext>;
          303?: ErrorCallback<TContext>;
          305?: ErrorCallback<TContext>;
          306?: ErrorCallback<TContext>;
          307?: ErrorCallback<TContext>;
          308?: ErrorCallback<TContext>;
          309?: ErrorCallback<TContext>;
          310?: ErrorCallback<TContext>;
          311?: ErrorCallback<TContext>;
          312?: ErrorCallback<TContext>;
          313?: ErrorCallback<TContext>;
          314?: ErrorCallback<TContext>;
          315?: ErrorCallback<TContext>;
          316?: ErrorCallback<TContext>;
          317?: ErrorCallback<TContext>;
          318?: ErrorCallback<TContext>;
          319?: ErrorCallback<TContext>;
          320?: ErrorCallback<TContext>;
          321?: ErrorCallback<TContext>;
          322?: ErrorCallback<TContext>;
          323?: ErrorCallback<TContext>;
          324?: ErrorCallback<TContext>;
          325?: ErrorCallback<TContext>;
          326?: ErrorCallback<TContext>;
          327?: ErrorCallback<TContext>;
          328?: ErrorCallback<TContext>;
          329?: ErrorCallback<TContext>;
          330?: ErrorCallback<TContext>;
          331?: ErrorCallback<TContext>;
          332?: ErrorCallback<TContext>;
          333?: ErrorCallback<TContext>;
          334?: ErrorCallback<TContext>;
          335?: ErrorCallback<TContext>;
          336?: ErrorCallback<TContext>;
          337?: ErrorCallback<TContext>;
          338?: ErrorCallback<TContext>;
          339?: ErrorCallback<TContext>;
          340?: ErrorCallback<TContext>;
          341?: ErrorCallback<TContext>;
          342?: ErrorCallback<TContext>;
          343?: ErrorCallback<TContext>;
          344?: ErrorCallback<TContext>;
          345?: ErrorCallback<TContext>;
          346?: ErrorCallback<TContext>;
          347?: ErrorCallback<TContext>;
          348?: ErrorCallback<TContext>;
          349?: ErrorCallback<TContext>;
          350?: ErrorCallback<TContext>;
          351?: ErrorCallback<TContext>;
          352?: ErrorCallback<TContext>;
          353?: ErrorCallback<TContext>;
          354?: ErrorCallback<TContext>;
          355?: ErrorCallback<TContext>;
          356?: ErrorCallback<TContext>;
          357?: ErrorCallback<TContext>;
          358?: ErrorCallback<TContext>;
          359?: ErrorCallback<TContext>;
          360?: ErrorCallback<TContext>;
          361?: ErrorCallback<TContext>;
          362?: ErrorCallback<TContext>;
          363?: ErrorCallback<TContext>;
          364?: ErrorCallback<TContext>;
          365?: ErrorCallback<TContext>;
          366?: ErrorCallback<TContext>;
          367?: ErrorCallback<TContext>;
          368?: ErrorCallback<TContext>;
          369?: ErrorCallback<TContext>;
          370?: ErrorCallback<TContext>;
          371?: ErrorCallback<TContext>;
          372?: ErrorCallback<TContext>;
          373?: ErrorCallback<TContext>;
          374?: ErrorCallback<TContext>;
          375?: ErrorCallback<TContext>;
          376?: ErrorCallback<TContext>;
          377?: ErrorCallback<TContext>;
          378?: ErrorCallback<TContext>;
          379?: ErrorCallback<TContext>;
          380?: ErrorCallback<TContext>;
          381?: ErrorCallback<TContext>;
          382?: ErrorCallback<TContext>;
          383?: ErrorCallback<TContext>;
          384?: ErrorCallback<TContext>;
          385?: ErrorCallback<TContext>;
          386?: ErrorCallback<TContext>;
          387?: ErrorCallback<TContext>;
          388?: ErrorCallback<TContext>;
          389?: ErrorCallback<TContext>;
          390?: ErrorCallback<TContext>;
          391?: ErrorCallback<TContext>;
          392?: ErrorCallback<TContext>;
          393?: ErrorCallback<TContext>;
          394?: ErrorCallback<TContext>;
          395?: ErrorCallback<TContext>;
          396?: ErrorCallback<TContext>;
          397?: ErrorCallback<TContext>;
          398?: ErrorCallback<TContext>;
          399?: ErrorCallback<TContext>;
          400?: ErrorCallback<TContext>;
          401?: ErrorCallback<TContext>;
          402?: ErrorCallback<TContext>;
          403?: ErrorCallback<TContext>;
          404?: ErrorCallback<TContext>;
          405?: ErrorCallback<TContext>;
          406?: ErrorCallback<TContext>;
          407?: ErrorCallback<TContext>;
          408?: ErrorCallback<TContext>;
          409?: ErrorCallback<TContext>;
          410?: ErrorCallback<TContext>;
          411?: ErrorCallback<TContext>;
          412?: ErrorCallback<TContext>;
          413?: ErrorCallback<TContext>;
          414?: ErrorCallback<TContext>;
          415?: ErrorCallback<TContext>;
          416?: ErrorCallback<TContext>;
          417?: ErrorCallback<TContext>;
          418?: ErrorCallback<TContext>;
          419?: ErrorCallback<TContext>;
          420?: ErrorCallback<TContext>;
          421?: ErrorCallback<TContext>;
          422?: ErrorCallback<TContext>;
          423?: ErrorCallback<TContext>;
          424?: ErrorCallback<TContext>;
          425?: ErrorCallback<TContext>;
          426?: ErrorCallback<TContext>;
          427?: ErrorCallback<TContext>;
          428?: ErrorCallback<TContext>;
          429?: ErrorCallback<TContext>;
          430?: ErrorCallback<TContext>;
          431?: ErrorCallback<TContext>;
          432?: ErrorCallback<TContext>;
          433?: ErrorCallback<TContext>;
          434?: ErrorCallback<TContext>;
          435?: ErrorCallback<TContext>;
          436?: ErrorCallback<TContext>;
          437?: ErrorCallback<TContext>;
          438?: ErrorCallback<TContext>;
          439?: ErrorCallback<TContext>;
          440?: ErrorCallback<TContext>;
          441?: ErrorCallback<TContext>;
          442?: ErrorCallback<TContext>;
          443?: ErrorCallback<TContext>;
          444?: ErrorCallback<TContext>;
          445?: ErrorCallback<TContext>;
          446?: ErrorCallback<TContext>;
          447?: ErrorCallback<TContext>;
          448?: ErrorCallback<TContext>;
          449?: ErrorCallback<TContext>;
          450?: ErrorCallback<TContext>;
          451?: ErrorCallback<TContext>;
          452?: ErrorCallback<TContext>;
          453?: ErrorCallback<TContext>;
          454?: ErrorCallback<TContext>;
          455?: ErrorCallback<TContext>;
          456?: ErrorCallback<TContext>;
          457?: ErrorCallback<TContext>;
          458?: ErrorCallback<TContext>;
          459?: ErrorCallback<TContext>;
          460?: ErrorCallback<TContext>;
          461?: ErrorCallback<TContext>;
          462?: ErrorCallback<TContext>;
          463?: ErrorCallback<TContext>;
          464?: ErrorCallback<TContext>;
          465?: ErrorCallback<TContext>;
          466?: ErrorCallback<TContext>;
          467?: ErrorCallback<TContext>;
          468?: ErrorCallback<TContext>;
          469?: ErrorCallback<TContext>;
          470?: ErrorCallback<TContext>;
          471?: ErrorCallback<TContext>;
          472?: ErrorCallback<TContext>;
          473?: ErrorCallback<TContext>;
          474?: ErrorCallback<TContext>;
          475?: ErrorCallback<TContext>;
          476?: ErrorCallback<TContext>;
          477?: ErrorCallback<TContext>;
          478?: ErrorCallback<TContext>;
          479?: ErrorCallback<TContext>;
          480?: ErrorCallback<TContext>;
          481?: ErrorCallback<TContext>;
          482?: ErrorCallback<TContext>;
          483?: ErrorCallback<TContext>;
          484?: ErrorCallback<TContext>;
          485?: ErrorCallback<TContext>;
          486?: ErrorCallback<TContext>;
          487?: ErrorCallback<TContext>;
          488?: ErrorCallback<TContext>;
          489?: ErrorCallback<TContext>;
          490?: ErrorCallback<TContext>;
          491?: ErrorCallback<TContext>;
          492?: ErrorCallback<TContext>;
          493?: ErrorCallback<TContext>;
          494?: ErrorCallback<TContext>;
          495?: ErrorCallback<TContext>;
          496?: ErrorCallback<TContext>;
          497?: ErrorCallback<TContext>;
          498?: ErrorCallback<TContext>;
          499?: ErrorCallback<TContext>;
          500?: ErrorCallback<TContext>;
          501?: ErrorCallback<TContext>;
          502?: ErrorCallback<TContext>;
          503?: ErrorCallback<TContext>;
          504?: ErrorCallback<TContext>;
          505?: ErrorCallback<TContext>;
          506?: ErrorCallback<TContext>;
          507?: ErrorCallback<TContext>;
          508?: ErrorCallback<TContext>;
          509?: ErrorCallback<TContext>;
          510?: ErrorCallback<TContext>;
          511?: ErrorCallback<TContext>;
          512?: ErrorCallback<TContext>;
          513?: ErrorCallback<TContext>;
          514?: ErrorCallback<TContext>;
          515?: ErrorCallback<TContext>;
          516?: ErrorCallback<TContext>;
          517?: ErrorCallback<TContext>;
          518?: ErrorCallback<TContext>;
          519?: ErrorCallback<TContext>;
          520?: ErrorCallback<TContext>;
          521?: ErrorCallback<TContext>;
          522?: ErrorCallback<TContext>;
          523?: ErrorCallback<TContext>;
          524?: ErrorCallback<TContext>;
          525?: ErrorCallback<TContext>;
          526?: ErrorCallback<TContext>;
          527?: ErrorCallback<TContext>;
          528?: ErrorCallback<TContext>;
          529?: ErrorCallback<TContext>;
          530?: ErrorCallback<TContext>;
          531?: ErrorCallback<TContext>;
          532?: ErrorCallback<TContext>;
          533?: ErrorCallback<TContext>;
          534?: ErrorCallback<TContext>;
          535?: ErrorCallback<TContext>;
          536?: ErrorCallback<TContext>;
          537?: ErrorCallback<TContext>;
          538?: ErrorCallback<TContext>;
          539?: ErrorCallback<TContext>;
          540?: ErrorCallback<TContext>;
          541?: ErrorCallback<TContext>;
          542?: ErrorCallback<TContext>;
          543?: ErrorCallback<TContext>;
          544?: ErrorCallback<TContext>;
          545?: ErrorCallback<TContext>;
          546?: ErrorCallback<TContext>;
          547?: ErrorCallback<TContext>;
          548?: ErrorCallback<TContext>;
          549?: ErrorCallback<TContext>;
          550?: ErrorCallback<TContext>;
          551?: ErrorCallback<TContext>;
          552?: ErrorCallback<TContext>;
          553?: ErrorCallback<TContext>;
          554?: ErrorCallback<TContext>;
          555?: ErrorCallback<TContext>;
          556?: ErrorCallback<TContext>;
          557?: ErrorCallback<TContext>;
          558?: ErrorCallback<TContext>;
          559?: ErrorCallback<TContext>;
          560?: ErrorCallback<TContext>;
          561?: ErrorCallback<TContext>;
          562?: ErrorCallback<TContext>;
          563?: ErrorCallback<TContext>;
          564?: ErrorCallback<TContext>;
          565?: ErrorCallback<TContext>;
          566?: ErrorCallback<TContext>;
          567?: ErrorCallback<TContext>;
          568?: ErrorCallback<TContext>;
          569?: ErrorCallback<TContext>;
          570?: ErrorCallback<TContext>;
          571?: ErrorCallback<TContext>;
          572?: ErrorCallback<TContext>;
          573?: ErrorCallback<TContext>;
          574?: ErrorCallback<TContext>;
          575?: ErrorCallback<TContext>;
          576?: ErrorCallback<TContext>;
          577?: ErrorCallback<TContext>;
          578?: ErrorCallback<TContext>;
          579?: ErrorCallback<TContext>;
          580?: ErrorCallback<TContext>;
          581?: ErrorCallback<TContext>;
          582?: ErrorCallback<TContext>;
          583?: ErrorCallback<TContext>;
          584?: ErrorCallback<TContext>;
          585?: ErrorCallback<TContext>;
          586?: ErrorCallback<TContext>;
          587?: ErrorCallback<TContext>;
          588?: ErrorCallback<TContext>;
          589?: ErrorCallback<TContext>;
          590?: ErrorCallback<TContext>;
          591?: ErrorCallback<TContext>;
          592?: ErrorCallback<TContext>;
          593?: ErrorCallback<TContext>;
          594?: ErrorCallback<TContext>;
          595?: ErrorCallback<TContext>;
          596?: ErrorCallback<TContext>;
          597?: ErrorCallback<TContext>;
          598?: ErrorCallback<TContext>;
          599?: ErrorCallback<TContext>;

          // endregion
      } & {
          // Status codes not listed require type annotations when defining the callback
          [index: number]: SuccessCallback<TContext> | ErrorCallback<TContext>;
      };

      // Writable properties on XMLHttpRequest
      interface XHRFields extends Partial<Pick<XMLHttpRequest, 'onreadystatechange' | 'responseType' | 'timeout' | 'withCredentials'>> {
          msCaching?: string;
      }
  }

  interface Transport {
      send(headers: PlainObject, completeCallback: Transport.SuccessCallback): void;
      abort(): void;
  }

  namespace Transport {
      interface SuccessCallback {
          (status: number, statusText: Ajax.TextStatus, responses?: PlainObject, headers?: string): void;
      }
  }

  /**
   * @see {@link http://api.jquery.com/jquery.ajax/#jqXHR}
   */
  interface jqXHR<TResolve = any> extends Promise3<TResolve, jqXHR<TResolve>, never,
      Ajax.SuccessTextStatus, Ajax.ErrorTextStatus, never,
      jqXHR<TResolve>, string, never>,
      Pick<XMLHttpRequest, 'abort' | 'getAllResponseHeaders' | 'getResponseHeader' | 'overrideMimeType' | 'readyState' | 'responseText' |
          'setRequestHeader' | 'status' | 'statusText'>,
      Partial<Pick<XMLHttpRequest, 'responseXML'>> {
      responseJSON?: any;

      /**
       * Determine the current state of a Deferred object.
       *
       * @see {@link https://api.jquery.com/deferred.state/}
       * @since 1.7
       */
      state(): 'pending' | 'resolved' | 'rejected';
      statusCode(map: Ajax.StatusCodeCallbacks<any>): void;
  }

  namespace jqXHR {
      /**
       * @deprecated
       */
      interface DoneCallback<TResolve = any, TjqXHR = jqXHR<TResolve>> extends Deferred.Callback3<TResolve, Ajax.SuccessTextStatus, TjqXHR> { }

      /**
       * @deprecated
       */
      interface FailCallback<TjqXHR> extends Deferred.Callback3<TjqXHR, Ajax.ErrorTextStatus, string> { }

      /**
       * @deprecated
       */
      interface AlwaysCallback<TResolve = any, TjqXHR = jqXHR<TResolve>> extends Deferred.Callback3<TResolve | TjqXHR, Ajax.TextStatus, TjqXHR | string> { }
  }

  // endregion

  // region Callbacks

  interface Callbacks<T extends Function = Function> {
      /**
       * Add a callback or a collection of callbacks to a callback list.
       *
       * @param callback A function, or array of functions, that are to be added to the callback list.
       * @param callbacks A function, or array of functions, that are to be added to the callback list.
       * @see {@link https://api.jquery.com/callbacks.add/}
       * @since 1.7
       */
      add(callback: TypeOrArray<T>, ...callbacks: Array<TypeOrArray<T>>): this;
      /**
       * Disable a callback list from doing anything more.
       *
       * @see {@link https://api.jquery.com/callbacks.disable/}
       * @since 1.7
       */
      disable(): this;
      /**
       * Determine if the callbacks list has been disabled.
       *
       * @see {@link https://api.jquery.com/callbacks.disabled/}
       * @since 1.7
       */
      disabled(): boolean;
      /**
       * Remove all of the callbacks from a list.
       *
       * @see {@link https://api.jquery.com/callbacks.empty/}
       * @since 1.7
       */
      empty(): this;
      /**
       * Call all of the callbacks with the given arguments.
       *
       * @param args The argument or list of arguments to pass back to the callback list.
       * @see {@link https://api.jquery.com/callbacks.fire/}
       * @since 1.7
       */
      fire(...args: any[]): this;
      /**
       * Call all callbacks in a list with the given context and arguments.
       *
       * @param context A reference to the context in which the callbacks in the list should be fired.
       * @param args An argument, or array of arguments, to pass to the callbacks in the list.
       * @see {@link https://api.jquery.com/callbacks.fireWith/}
       * @since 1.7
       */
      fireWith(context: object, args?: ArrayLike<any>): this;
      /**
       * Determine if the callbacks have already been called at least once.
       *
       * @see {@link https://api.jquery.com/callbacks.fired/}
       * @since 1.7
       */
      fired(): boolean;
      /**
       * Determine whether or not the list has any callbacks attached. If a callback is provided as an
       * argument, determine whether it is in a list.
       *
       * @param callback The callback to search for.
       * @see {@link https://api.jquery.com/callbacks.has/}
       * @since 1.7
       */
      has(callback?: T): boolean;
      /**
       * Lock a callback list in its current state.
       *
       * @see {@link https://api.jquery.com/callbacks.lock/}
       * @since 1.7
       */
      lock(): this;
      /**
       * Determine if the callbacks list has been locked.
       *
       * @see {@link https://api.jquery.com/callbacks.locked/}
       * @since 1.7
       */
      locked(): boolean;
      /**
       * Remove a callback or a collection of callbacks from a callback list.
       *
       * @param callbacks A function, or array of functions, that are to be removed from the callback list.
       * @see {@link https://api.jquery.com/callbacks.remove/}
       * @since 1.7
       */
      remove(...callbacks: T[]): this;
  }

  // endregion

  // region CSS

  interface CSSHook<TElement> {
      get(this: this, elem: TElement, computed: any, extra: any): any;
      set(this: this, elem: TElement, value: any): void;
  }

  // endregion

  // region Deferred

  /**
   * Any object that has a then method.
   */
  interface Thenable<T> extends PromiseLike<T> { }

  // Type parameter guide
  // --------------------
  // Each type parameter represents a parameter in one of the three possible callbacks.
  //
  // The first letter indicates which position the parameter is in.
  //
  // T = A = 1st position
  // U = B = 2nd position
  // V = C = 3rd position
  // S = R = rest position
  //
  // The second letter indicates which whether it is a [R]esolve, Re[J]ect, or [N]otify value.
  //
  // The third letter indicates whether the value is returned in the [D]one filter, [F]ail filter, or [P]rogress filter.

  /**
   * This object provides a subset of the methods of the Deferred object (then, done, fail, always,
   * pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
   *
   * @see {@link http://api.jquery.com/Types/#Promise}
   * @deprecated Experimental. Avoid referncing this type directly in your code.
   */
  interface PromiseBase<TR, TJ, TN,
      UR, UJ, UN,
      VR, VJ, VN,
      SR, SJ, SN> extends _Promise<TR>, PromiseLike<TR> {
      /**
       * Add handlers to be called when the Deferred object is either resolved or rejected.
       *
       * @param alwaysCallback A function, or array of functions, that is called when the Deferred is resolved or rejected.
       * @param alwaysCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
       * @see {@link https://api.jquery.com/deferred.always/}
       * @since 1.6
       */
      always(alwaysCallback: TypeOrArray<Deferred.CallbackBase<TR | TJ, UR | UJ, VR | VJ, SR | SJ>>,
             ...alwaysCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TR | TJ, UR | UJ, VR | VJ, SR | SJ>>>): this;
      /**
       * Add handlers to be called when the Deferred object is resolved.
       *
       * @param doneCallback A function, or array of functions, that are called when the Deferred is resolved.
       * @param doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
       * @see {@link https://api.jquery.com/deferred.done/}
       * @since 1.5
       */
      done(doneCallback: TypeOrArray<Deferred.CallbackBase<TR, UR, VR, SR>>,
           ...doneCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TR, UR, VR, SR>>>): this;
      /**
       * Add handlers to be called when the Deferred object is rejected.
       *
       * @param failCallback A function, or array of functions, that are called when the Deferred is rejected.
       * @param failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
       * @see {@link https://api.jquery.com/deferred.fail/}
       * @since 1.5
       */
      fail(failCallback: TypeOrArray<Deferred.CallbackBase<TJ, UJ, VJ, SJ>>,
           ...failCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TJ, UJ, VJ, SJ>>>): this;
      /**
       * Add handlers to be called when the Deferred object generates progress notifications.
       *
       * @param progressCallback A function, or array of functions, to be called when the Deferred generates progress notifications.
       * @param progressCallbacks Optional additional functions, or arrays of functions, to be called when the Deferred generates
       *                          progress notifications.
       * @see {@link https://api.jquery.com/deferred.progress/}
       * @since 1.7
       */
      progress(progressCallback: TypeOrArray<Deferred.CallbackBase<TN, UN, VN, SN>>,
               ...progressCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TN, UN, VN, SN>>>): this;
      /**
       * Return a Deferred's Promise object.
       *
       * @param target Object onto which the promise methods have to be attached
       * @see {@link https://api.jquery.com/deferred.promise/}
       * @since 1.5
       */
      promise<TTarget extends object>(target: TTarget): this & TTarget;
      /**
       * Return a Deferred's Promise object.
       *
       * @see {@link https://api.jquery.com/deferred.promise/}
       * @since 1.5
       */
      promise(): this;
      /**
       * Determine the current state of a Deferred object.
       *
       * @see {@link https://api.jquery.com/deferred.state/}
       * @since 1.7
       */
      state(): 'pending' | 'resolved' | 'rejected';

      // region pipe

      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<AJF> | AJF,
           progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,
          BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,
          CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,
          RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: null,
           failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<AJF> | AJF,
           progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,
          BRF | BRP, BJF | BJP, BNF | BNP,
          CRF | CRP, CJF | CJP, CNF | CNP,
          RRF | RRP, RJF | RJP, RNF | RNP>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: null,
           progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,
          BRD | BRP, BJD | BJP, BND | BNP,
          CRD | CRP, CJD | CJP, CND | CNP,
          RRD | RRP, RJD | RJP, RND | RNP>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: null,
           failFilter: null,
           progressFilter?: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,
          BRP, BJP, BNP,
          CRP, CJP, CNP,
          RRP, RJP, RNP>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never>
          (doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<AJF> | AJF,
           progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,
          BRD | BRF, BJD | BJF, BND | BNF,
          CRD | CRF, CJD | CJF, CND | CNF,
          RRD | RRF, RJD | RJF, RND | RNF>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never>
          (doneFilter: null,
           failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<AJF> | AJF,
           progressFilter?: null): PromiseBase<ARF, AJF, ANF,
          BRF, BJF, BNF,
          CRF, CJF, CNF,
          RRF, RJF, RNF>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never>
          (doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter?: null,
           progressFilter?: null): PromiseBase<ARD, AJD, AND,
          BRD, BJD, BND,
          CRD, CJD, CND,
          RRD, RJD, RND>;

      // endregion

      // region then

      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<ARF> | ARF,
           progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,
          BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,
          CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,
          RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: null,
           failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<ARF> | ARF,
           progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,
          BRF | BRP, BJF | BJP, BNF | BNP,
          CRF | CRP, CJF | CJP, CNF | CNP,
          RRF | RRP, RJF | RJP, RNF | RNP>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: null,
           progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,
          BRD | BRP, BJD | BJP, BND | BNP,
          CRD | CRP, CJD | CJP, CND | CNP,
          RRD | RRP, RJD | RJP, RND | RNP>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: null,
           failFilter: null,
           progressFilter?: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,
          BRP, BJP, BNP,
          CRP, CJP, CNP,
          RRP, RJP, RNP>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never>
          (doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<ARF> | ARF,
           progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,
          BRD | BRF, BJD | BJF, BND | BNF,
          CRD | CRF, CJD | CJF, CND | CNF,
          RRD | RRF, RJD | RJF, RND | RNF>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never>
          (doneFilter: null,
           failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<ARF> | ARF,
           progressFilter?: null): PromiseBase<ARF, AJF, ANF,
          BRF, BJF, BNF,
          CRF, CJF, CNF,
          RRF, RJF, RNF>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never>
          (doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter?: null,
           progressFilter?: null): PromiseBase<ARD, AJD, AND,
          BRD, BJD, BND,
          CRD, CJD, CND,
          RRD, RJD, RND>;

      // endregion

      /**
       * Add handlers to be called when the Deferred object is rejected.
       *
       * @param failFilter A function that is called when the Deferred is rejected.
       * @see {@link https://api.jquery.com/deferred.catch/}
       * @since 3.0
       */
      catch<ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never>
          (failFilter?: ((t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,
              BRF, BJF, BNF,
              CRF, CJF, CNF,
              RRF, RJF, RNF> | Thenable<ARF> | ARF) | null): PromiseBase<ARF, AJF, ANF,
          BRF, BJF, BNF,
          CRF, CJF, CNF,
          RRF, RJF, RNF>;
  }

  /**
   * This object provides a subset of the methods of the Deferred object (then, done, fail, always,
   * pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
   *
   * @see {@link http://api.jquery.com/Types/#Promise}
   */
  interface Promise3<TR, TJ, TN,
      UR, UJ, UN,
      VR, VJ, VN> extends PromiseBase<TR, TJ, TN,
      UR, UJ, UN,
      VR, VJ, VN,
      never, never, never> { }

  /**
   * This object provides a subset of the methods of the Deferred object (then, done, fail, always,
   * pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
   *
   * @see {@link http://api.jquery.com/Types/#Promise}
   */
  interface Promise2<TR, TJ, TN,
      UR, UJ, UN> extends PromiseBase<TR, TJ, TN,
      UR, UJ, UN,
      never, never, never,
      never, never, never> { }

  /**
   * This object provides a subset of the methods of the Deferred object (then, done, fail, always,
   * pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
   *
   * @see {@link http://api.jquery.com/Types/#Promise}
   */
  interface Promise<TR, TJ = any, TN = any> extends PromiseBase<TR, TJ, TN,
      TR, TJ, TN,
      TR, TJ, TN,
      TR, TJ, TN> { }

  interface DeferredStatic {
      // https://jquery.com/upgrade-guide/3.0/#callback-exit
      exceptionHook: any;
      <TR = any, TJ = any, TN = any>(beforeStart?: (this: JQuery.Deferred<TR, TJ, TN>, deferred: JQuery.Deferred<TR, TJ, TN>) => void): JQuery.Deferred<TR, TJ, TN>;
  }

  interface Deferred<TR, TJ = any, TN = any> {
      /**
       * Call the progressCallbacks on a Deferred object with the given args.
       *
       * @param args Optional arguments that are passed to the progressCallbacks.
       * @see {@link https://api.jquery.com/deferred.notify/}
       * @since 1.7
       */
      notify(...args: TN[]): this;
      /**
       * Call the progressCallbacks on a Deferred object with the given context and args.
       *
       * @param context Context passed to the progressCallbacks as the this object.
       * @param args An optional array of arguments that are passed to the progressCallbacks.
       * @see {@link https://api.jquery.com/deferred.notifyWith/}
       * @since 1.7
       */
      notifyWith(context: object, args?: ArrayLike<TN>): this;
      /**
       * Reject a Deferred object and call any failCallbacks with the given args.
       *
       * @param args Optional arguments that are passed to the failCallbacks.
       * @see {@link https://api.jquery.com/deferred.reject/}
       * @since 1.5
       */
      reject(...args: TJ[]): this;
      /**
       * Reject a Deferred object and call any failCallbacks with the given context and args.
       *
       * @param context Context passed to the failCallbacks as the this object.
       * @param args An optional array of arguments that are passed to the failCallbacks.
       * @see {@link https://api.jquery.com/deferred.rejectWith/}
       * @since 1.5
       */
      rejectWith(context: object, args?: ArrayLike<TJ>): this;
      /**
       * Resolve a Deferred object and call any doneCallbacks with the given args.
       *
       * @param args Optional arguments that are passed to the doneCallbacks.
       * @see {@link https://api.jquery.com/deferred.resolve/}
       * @since 1.5
       */
      resolve(...args: TR[]): this;
      /**
       * Resolve a Deferred object and call any doneCallbacks with the given context and args.
       *
       * @param context Context passed to the doneCallbacks as the this object.
       * @param args An optional array of arguments that are passed to the doneCallbacks.
       * @see {@link https://api.jquery.com/deferred.resolveWith/}
       * @since 1.5
       */
      resolveWith(context: object, args?: ArrayLike<TR>): this;

      /**
       * Add handlers to be called when the Deferred object is either resolved or rejected.
       *
       * @param alwaysCallback A function, or array of functions, that is called when the Deferred is resolved or rejected.
       * @param alwaysCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
       * @see {@link https://api.jquery.com/deferred.always/}
       * @since 1.6
       */
      always(alwaysCallback: TypeOrArray<Deferred.Callback<TR | TJ>>,
             ...alwaysCallbacks: Array<TypeOrArray<Deferred.Callback<TR | TJ>>>): this;
      /**
       * Add handlers to be called when the Deferred object is resolved.
       *
       * @param doneCallback A function, or array of functions, that are called when the Deferred is resolved.
       * @param doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
       * @see {@link https://api.jquery.com/deferred.done/}
       * @since 1.5
       */
      done(doneCallback: TypeOrArray<Deferred.Callback<TR>>,
           ...doneCallbacks: Array<TypeOrArray<Deferred.Callback<TR>>>): this;
      /**
       * Add handlers to be called when the Deferred object is rejected.
       *
       * @param failCallback A function, or array of functions, that are called when the Deferred is rejected.
       * @param failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
       * @see {@link https://api.jquery.com/deferred.fail/}
       * @since 1.5
       */
      fail(failCallback: TypeOrArray<Deferred.Callback<TJ>>,
           ...failCallbacks: Array<TypeOrArray<Deferred.Callback<TJ>>>): this;
      /**
       * Add handlers to be called when the Deferred object generates progress notifications.
       *
       * @param progressCallback A function, or array of functions, to be called when the Deferred generates progress notifications.
       * @param progressCallbacks Optional additional functions, or arrays of functions, to be called when the Deferred generates
       *                          progress notifications.
       * @see {@link https://api.jquery.com/deferred.progress/}
       * @since 1.7
       */
      progress(progressCallback: TypeOrArray<Deferred.Callback<TN>>,
               ...progressCallbacks: Array<TypeOrArray<Deferred.Callback<TN>>>): this;
      /**
       * Return a Deferred's Promise object.
       *
       * @param target Object onto which the promise methods have to be attached
       * @see {@link https://api.jquery.com/deferred.promise/}
       * @since 1.5
       */
      promise<TTarget extends object>(target: TTarget): JQuery.Promise<TR, TJ, TN> & TTarget;
      /**
       * Return a Deferred's Promise object.
       *
       * @see {@link https://api.jquery.com/deferred.promise/}
       * @since 1.5
       */
      promise(): JQuery.Promise<TR, TJ, TN>;
      /**
       * Determine the current state of a Deferred object.
       *
       * @see {@link https://api.jquery.com/deferred.state/}
       * @since 1.7
       */
      state(): 'pending' | 'resolved' | 'rejected';

      // region pipe

      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<AJF> | AJF,
           progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,
          BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,
          CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,
          RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: null,
           failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<AJF> | AJF,
           progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,
          BRF | BRP, BJF | BJP, BNF | BNP,
          CRF | CRP, CJF | CJP, CNF | CNP,
          RRF | RRP, RJF | RJP, RNF | RNP>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: null,
           progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,
          BRD | BRP, BJD | BJP, BND | BNP,
          CRD | CRP, CJD | CJP, CND | CNP,
          RRD | RRP, RJD | RJP, RND | RNP>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: null,
           failFilter: null,
           progressFilter?: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,
          BRP, BJP, BNP,
          CRP, CJP, CNP,
          RRP, RJP, RNP>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never>
          (doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<AJF> | AJF,
           progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,
          BRD | BRF, BJD | BJF, BND | BNF,
          CRD | CRF, CJD | CJF, CND | CNF,
          RRD | RRF, RJD | RJF, RND | RNF>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never>
          (doneFilter: null,
           failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<AJF> | AJF,
           progressFilter?: null): PromiseBase<ARF, AJF, ANF,
          BRF, BJF, BNF,
          CRF, CJF, CNF,
          RRF, RJF, RNF>;
      /**
       * Utility method to filter and/or chain Deferreds.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.pipe/}
       * @since 1.6
       * @since 1.7
       * @deprecated 1.8
       */
      pipe<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never>
          (doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter?: null,
           progressFilter?: null): PromiseBase<ARD, AJD, AND,
          BRD, BJD, BND,
          CRD, CJD, CND,
          RRD, RJD, RND>;

      // endregion

      // region then

      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter A function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<ARF> | ARF,
           progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,
          BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,
          CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,
          RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter A function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: null,
           failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<ARF> | ARF,
           progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,
          BRF | BRP, BJF | BJP, BNF | BNP,
          CRF | CRP, CJF | CJP, CNF | CNP,
          RRF | RRP, RJF | RJP, RNF | RNP>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter A function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: null,
           progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,
          BRD | BRP, BJD | BJP, BND | BNP,
          CRD | CRP, CJD | CJP, CND | CNP,
          RRD | RRP, RJD | RJP, RND | RNP>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter A function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARP = never, AJP = never, ANP = never,
          BRP = never, BJP = never, BNP = never,
          CRP = never, CJP = never, CNP = never,
          RRP = never, RJP = never, RNP = never>
          (doneFilter: null,
           failFilter: null,
           progressFilter?: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,
               BRP, BJP, BNP,
               CRP, CJP, CNP,
               RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,
          BRP, BJP, BNP,
          CRP, CJP, CNP,
          RRP, RJP, RNP>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never,
          ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never>
          (doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<ARF> | ARF,
           progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,
          BRD | BRF, BJD | BJF, BND | BNF,
          CRD | CRF, CJD | CJF, CND | CNF,
          RRD | RRF, RJD | RJF, RND | RNF>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never>
          (doneFilter: null,
           failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
               BRF, BJF, BNF,
               CRF, CJF, CNF,
               RRF, RJF, RNF> | Thenable<ARF> | ARF,
           progressFilter?: null): PromiseBase<ARF, AJF, ANF,
          BRF, BJF, BNF,
          CRF, CJF, CNF,
          RRF, RJF, RNF>;
      /**
       * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
       *
       * @param doneFilter An optional function that is called when the Deferred is resolved.
       * @param failFilter An optional function that is called when the Deferred is rejected.
       * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
       * @see {@link https://api.jquery.com/deferred.then/}
       * @since 1.8
       */
      then<ARD = never, AJD = never, AND = never,
          BRD = never, BJD = never, BND = never,
          CRD = never, CJD = never, CND = never,
          RRD = never, RJD = never, RND = never>
          (doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,
               BRD, BJD, BND,
               CRD, CJD, CND,
               RRD, RJD, RND> | Thenable<ARD> | ARD,
           failFilter?: null,
           progressFilter?: null): PromiseBase<ARD, AJD, AND,
          BRD, BJD, BND,
          CRD, CJD, CND,
          RRD, RJD, RND>;

      // endregion

      /**
       * Add handlers to be called when the Deferred object is rejected.
       *
       * @param failFilter A function that is called when the Deferred is rejected.
       * @see {@link https://api.jquery.com/deferred.catch/}
       * @since 3.0
       */
      catch<ARF = never, AJF = never, ANF = never,
          BRF = never, BJF = never, BNF = never,
          CRF = never, CJF = never, CNF = never,
          RRF = never, RJF = never, RNF = never>
          (failFilter?: ((...t: TJ[]) => PromiseBase<ARF, AJF, ANF,
              BRF, BJF, BNF,
              CRF, CJF, CNF,
              RRF, RJF, RNF> | Thenable<ARF> | ARF) | null): PromiseBase<ARF, AJF, ANF,
          BRF, BJF, BNF,
          CRF, CJF, CNF,
          RRF, RJF, RNF>;
  }

  namespace Deferred {
      interface CallbackBase<T, U, V, R> {
          (t: T, u: U, v: V, ...r: R[]): void;
      }

      interface Callback3<T, U, V> extends CallbackBase<T, U, V, never> { }

      interface Callback<T> {
          (...args: T[]): void;
      }

      /**
       * @deprecated
       */
      interface DoneCallback<TResolve> extends Callback<TResolve> { }

      /**
       * @deprecated
       */
      interface FailCallback<TReject> extends Callback<TReject> { }

      /**
       * @deprecated
       */
      interface AlwaysCallback<TResolve, TReject> extends Callback<TResolve | TReject> { }

      /**
       * @deprecated
       */
      interface ProgressCallback<TNotify> extends Callback<TNotify> { }
  }

  // endregion

  // region Effects

  type Duration = number | 'fast' | 'slow';
  // TODO: Is the first element always a string or is that specific to the 'fx' queue?
  type Queue<TElement> = { 0: string; } & Array<QueueFunction<TElement>>;

  interface QueueFunction<TElement> {
      (this: TElement, next: () => void): void;
  }

  /**
   * @see {@link https://api.jquery.com/animate/#animate-properties-options}
   */
  interface EffectsOptions<TElement> {
      /**
       * A function to be called when the animation on an element completes or stops without completing (its
       * Promise object is either resolved or rejected).
       */
      always?(this: TElement, animation: JQuery.Promise<any>, jumpedToEnd: boolean): void;
      /**
       * A function that is called once the animation on an element is complete.
       */
      complete?(this: TElement): void;
      /**
       * A function to be called when the animation on an element completes (its Promise object is resolved).
       */
      done?(this: TElement, animation: JQuery.Promise<any>, jumpedToEnd: boolean): void;
      /**
       * A string or number determining how long the animation will run.
       */
      duration?: Duration;
      /**
       * A string indicating which easing function to use for the transition.
       */
      easing?: string;
      /**
       * A function to be called when the animation on an element fails to complete (its Promise object is rejected).
       */
      fail?(this: TElement, animation: JQuery.Promise<any>, jumpedToEnd: boolean): void;
      /**
       * A function to be called after each step of the animation, only once per animated element regardless
       * of the number of animated properties.
       */
      progress?(this: TElement, animation: JQuery.Promise<any>, progress: number, remainingMs: number): void;
      /**
       * A Boolean indicating whether to place the animation in the effects queue. If false, the animation
       * will begin immediately. As of jQuery 1.7, the queue option can also accept a string, in which case
       * the animation is added to the queue represented by that string. When a custom queue name is used the
       * animation does not automatically start; you must call .dequeue("queuename") to start it.
       */
      queue?: boolean | string;
      /**
       * An object containing one or more of the CSS properties defined by the properties argument and their
       * corresponding easing functions.
       */
      specialEasing?: PlainObject<string>;
      /**
       * A function to call when the animation on an element begins.
       */
      start?(this: TElement, animation: JQuery.Promise<any>): void;
      /**
       * A function to be called for each animated property of each animated element. This function provides
       * an opportunity to modify the Tween object to change the value of the property before it is set.
       */
      step?(this: TElement, now: number, tween: Tween<TElement>): void;
  }

  interface SpeedSettings<TElement> {
      /**
       * A string or number determining how long the animation will run.
       */
      duration?: Duration;
      /**
       * A string indicating which easing function to use for the transition.
       */
      easing?: string;
      /**
       * A function to call once the animation is complete.
       */
      complete?(this: TElement): void;
  }

  // This should be a class but doesn't work correctly under the JQuery namespace. Tween should be an inner class of jQuery.
  // Undocumented
  // https://github.com/jquery/api.jquery.com/issues/391
  // https://github.com/jquery/api.jquery.com/issues/61
  interface Tween<TElement> {
      easing: string;
      elem: TElement;
      end: number;
      now: number;
      options: EffectsOptions<TElement>;
      pos: number;
      prop: string;
      start: number;
      unit: string;
  }

  interface AnimationHook<TElement> {
      (fx: JQuery.Tween<TElement>): void;
  }

  // endregion

  // region Events

  // region Event

  // This should be a class but doesn't work correctly under the JQuery namespace. Event should be an inner class of jQuery.

  // Static members
  interface EventStatic<TTarget = EventTarget> {
      <T extends object>(event: string, properties?: T): JQuery.Event<TTarget> & T;
      <T extends EventLike>(properties: T): JQuery.Event<TTarget> & T;
      new <T extends object>(event: string, properties?: T): JQuery.Event<TTarget> & T;
      new <T extends EventLike>(properties: T): JQuery.Event<TTarget> & T;
  }

  // Instance members
  interface Event {
      /**
       * Indicates whether the META key was pressed when the event fired.
       *
       * @see {@link https://api.jquery.com/event.metaKey/}
       * @since 1.0.4
       */
      metaKey: boolean;
      /**
       * The namespace specified when the event was triggered.
       *
       * @see {@link https://api.jquery.com/event.namespace/}
       * @since 1.4.3
       */
      namespace: string;
      /**
       * The mouse position relative to the left edge of the document.
       *
       * @see {@link https://api.jquery.com/event.pageX/}
       * @since 1.0.4
       */
      pageX: number;
      /**
       * The mouse position relative to the top edge of the document.
       *
       * @see {@link https://api.jquery.com/event.pageY/}
       * @since 1.0.4
       */
      pageY: number;
      /**
       * The last value returned by an event handler that was triggered by this event, unless the value was undefined.
       *
       * @see {@link https://api.jquery.com/event.result/}
       * @since 1.3
       */
      result: any;
      /**
       * The difference in milliseconds between the time the browser created the event and January 1, 1970.
       *
       * @see {@link https://api.jquery.com/event.timeStamp/}
       * @since 1.2.6
       */
      timeStamp: number;
      /**
       * Describes the nature of the event.
       *
       * @see {@link https://api.jquery.com/event.type/}
       * @since 1.0
       */
      type: string;
      /**
       * For key or mouse events, this property indicates the specific key or button that was pressed.
       *
       * @see {@link https://api.jquery.com/event.which/}
       * @since 1.1.3
       */
      which: number;
      /**
       * Returns whether event.preventDefault() was ever called on this event object.
       *
       * @see {@link https://api.jquery.com/event.isDefaultPrevented/}
       * @since 1.3
       */
      isDefaultPrevented(): boolean;
      /**
       * Returns whether event.stopImmediatePropagation() was ever called on this event object.
       *
       * @see {@link https://api.jquery.com/event.isImmediatePropagationStopped/}
       * @since 1.3
       */
      isImmediatePropagationStopped(): boolean;
      /**
       * Returns whether event.stopPropagation() was ever called on this event object.
       *
       * @see {@link https://api.jquery.com/event.isPropagationStopped/}
       * @since 1.3
       */
      isPropagationStopped(): boolean;
      /**
       * If this method is called, the default action of the event will not be triggered.
       *
       * @see {@link https://api.jquery.com/event.preventDefault/}
       * @since 1.0
       */
      preventDefault(): void;
      /**
       * Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
       *
       * @see {@link https://api.jquery.com/event.stopImmediatePropagation/}
       * @since 1.3
       */
      stopImmediatePropagation(): void;
      /**
       * Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
       *
       * @see {@link https://api.jquery.com/event.stopPropagation/}
       * @since 1.0
       */
      stopPropagation(): void;
  }

  // Generic members
  interface Event<TTarget = EventTarget,
      TData = null> extends Partial<Pick<PointerEvent & KeyboardEvent & TouchEvent, 'altKey' | 'bubbles' | 'cancelable' |
      'changedTouches' | 'ctrlKey' | 'detail' | 'eventPhase' | 'metaKey' | 'pageX' | 'pageY' | 'shiftKey' | 'view' |
      'char' | 'charCode' | 'key' | 'keyCode' | 'button' | 'buttons' | 'clientX' | 'clientY' | 'offsetX' | 'offsetY' |
      'pointerId' | 'pointerType' | 'screenX' | 'screenY' | 'targetTouches' | 'toElement' | 'touches'>> {
      /**
       * The current DOM element within the event bubbling phase.
       *
       * @see {@link https://api.jquery.com/event.currentTarget/}
       * @since 1.3
       */
      currentTarget: TTarget;
      /**
       * An optional object of data passed to an event method when the current executing handler is bound.
       *
       * @see {@link https://api.jquery.com/event.data/}
       * @since 1.1
       */
      data: TData;
      /**
       * The element where the currently-called jQuery event handler was attached.
       *
       * @see {@link https://api.jquery.com/event.delegateTarget/}
       * @since 1.7
       */
      delegateTarget: TTarget;
      originalEvent: _Event;
      /**
       * The other DOM element involved in the event, if any.
       *
       * @see {@link https://api.jquery.com/event.relatedTarget/}
       * @since 1.1.4
       */
      relatedTarget: TTarget | null;
      /**
       * The DOM element that initiated the event.
       *
       * @see {@link https://api.jquery.com/event.target/}
       * @since 1.0
       */
      target: TTarget;
  }

  interface EventLike {
      type: string;
  }

  // endregion

  interface EventHandler<TCurrentTarget, TData = null> extends EventHandlerBase<TCurrentTarget, JQuery.Event<TCurrentTarget, TData>> { }

  interface EventHandlerBase<TContext, T> {
      // Extra parameters can be passed from trigger()
      (this: TContext, t: T, ...args: any[]): void | false | any;
  }

  // Provided for convenience for use with jQuery.Event.which
  const enum Mouse {
      None = 0,
      Left = 1,
      Middle = 2,
      Right = 3
  }

  // Provided for convenience for use with jQuery.Event.which
  const enum Key {
      Backspace = 8,
      Tab = 9,
      Enter = 13,
      Shift = 16,
      Control = 17,
      Alt = 18,
      CapsLock = 20,
      Escape = 27,
      Space = 32,
      PageUp = 33,
      PageDown = 34,
      End = 35,
      Home = 36,
      ArrowLeft = 37,
      ArrowUp = 38,
      ArrowRight = 39,
      ArrowDown = 40,

      Semicolon = 186,
      Colon = 186,
      EqualsSign = 187,
      Plus = 187,
      Comma = 188,
      LessThanSign = 188,
      Minus = 189,
      Underscore = 189,
      Period = 190,
      GreaterThanSign = 190,
      ForwardSlash = 191,
      QuestionMark = 191,
      Backtick = 192,
      Tilde = 192,
      OpeningSquareBracket = 219,
      OpeningCurlyBrace = 219,
      Backslash = 220,
      Pipe = 220,
      ClosingSquareBracket = 221,
      ClosingCurlyBrace = 221,
      SingleQuote = 222,
      DoubleQuote = 222,

      Pause = 19,
      PrintScreen = 44,
      Insert = 45,
      Delete = 46,
      Num0 = 48,
      Num1 = 49,
      Num2 = 50,
      Num3 = 51,
      Num4 = 52,
      Num5 = 53,
      Num6 = 54,
      Num7 = 55,
      Num8 = 56,
      Num9 = 57,
      A = 65,
      B = 66,
      C = 67,
      D = 68,
      E = 69,
      F = 70,
      G = 71,
      H = 72,
      I = 73,
      J = 74,
      K = 75,
      L = 76,
      M = 77,
      N = 78,
      O = 79,
      P = 80,
      Q = 81,
      R = 82,
      S = 83,
      T = 84,
      U = 85,
      V = 86,
      W = 87,
      X = 88,
      Y = 89,
      Z = 90,
      MetaLeft = 91,
      MetaRight = 92,
      ContextMenu = 93,
      Numpad0 = 96,
      Numpad1 = 97,
      Numpad2 = 98,
      Numpad3 = 99,
      Numpad4 = 100,
      Numpad5 = 101,
      Numpad6 = 102,
      Numpad7 = 103,
      Numpad8 = 104,
      Numpad9 = 105,
      NumpadMultiply = 106,
      NumpadAdd = 107,
      NumpadSubtract = 109,
      NumpadDecimal = 110,
      NumpadDivide = 111,
      F1 = 112,
      F2 = 113,
      F3 = 114,
      F4 = 115,
      F5 = 116,
      F6 = 117,
      F7 = 118,
      F8 = 119,
      F9 = 120,
      F10 = 121,
      F11 = 122,
      F12 = 123,
      NumLock = 144,
      ScrollLock = 145
  }

  // endregion

  interface NameValuePair {
      name: string;
      value: string;
  }

  interface Coordinates {
      left: number;
      top: number;
  }

  interface ValHook<TElement> {
      get?(elem: TElement): any;
      set?(elem: TElement, value: any): any;
  }
}

// region Legacy types

interface JQueryCallback extends JQuery.Callbacks<Function> { }
interface JQueryDeferred<T> extends JQuery.Deferred<T> { }
interface JQueryEventConstructor extends JQuery.Event<EventTarget> { }
interface JQueryDeferred<T> extends JQuery.Deferred<T> { }
interface JQueryAjaxSettings extends JQuery.AjaxSettings { }
interface JQueryAnimationOptions extends JQuery.EffectsOptions<Element> { }
interface JQueryCoordinates extends JQuery.Coordinates { }
interface JQueryGenericPromise<T> extends JQuery.Thenable<T> { }
interface JQueryXHR extends JQuery.jqXHR { }
interface JQueryPromise<T> extends JQuery.Promise<T> { }
interface JQuerySerializeArrayElement extends JQuery.NameValuePair { }

/**
* @deprecated 1.9
*/
interface JQuerySupport extends JQuery.PlainObject { }

// Legacy types that are not represented in the current type definitions are marked deprecated.

/**
* @deprecated
*/
interface JQueryPromiseCallback<T> {
  (value?: T, ...args: any[]): void;
}
/**
* @deprecated
*/
interface JQueryParam {
  /**
   * Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
   *
   * @param obj An array or object to serialize.
   * @param traditional A Boolean indicating whether to perform a traditional "shallow" serialization.
   */
  (obj: any, traditional?: boolean): string;
}
/**
* @deprecated
*/
interface BaseJQueryEventObject extends Event {
  /**
   * The current DOM element within the event bubbling phase.
   * @see {@link https://api.jquery.com/event.currentTarget/}
   */
  currentTarget: Element;
  /**
   * An optional object of data passed to an event method when the current executing handler is bound.
   * @see {@link https://api.jquery.com/event.data/}
   */
  data: any;
  /**
   * The element where the currently-called jQuery event handler was attached.
   * @see {@link https://api.jquery.com/event.delegateTarget/}
   */
  delegateTarget: Element;
  /**
   * Returns whether event.preventDefault() was ever called on this event object.
   * @see {@link https://api.jquery.com/event.isDefaultPrevented/}
   */
  isDefaultPrevented(): boolean;
  /**
   * Returns whether event.stopImmediatePropagation() was ever called on this event object.
   * @see {@link https://api.jquery.com/event.isImmediatePropagationStopped/}
   */
  isImmediatePropagationStopped(): boolean;
  /**
   * Returns whether event.stopPropagation() was ever called on this event object.
   * @see {@link https://api.jquery.com/event.isPropagationStopped/}
   */
  isPropagationStopped(): boolean;
  /**
   * The namespace specified when the event was triggered.
   * @see {@link https://api.jquery.com/event.namespace/}
   */
  namespace: string;
  /**
   * The browser's original Event object.
   * @see {@link https://api.jquery.com/category/events/event-object/}
   */
  originalEvent: Event;
  /**
   * If this method is called, the default action of the event will not be triggered.
   * @see {@link https://api.jquery.com/event.preventDefault/}
   */
  preventDefault(): any;
  /**
   * The other DOM element involved in the event, if any.
   * @see {@link https://api.jquery.com/event.relatedTarget/}
   */
  relatedTarget: Element;
  /**
   * The last value returned by an event handler that was triggered by this event, unless the value was undefined.
   * @see {@link https://api.jquery.com/event.result/}
   */
  result: any;
  /**
   * Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
   * @see {@link https://api.jquery.com/event.stopImmediatePropagation/}
   */
  stopImmediatePropagation(): void;
  /**
   * Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
   * @see {@link https://api.jquery.com/event.stopPropagation/}
   */
  stopPropagation(): void;
  /**
   * The DOM element that initiated the event.
   * @see {@link https://api.jquery.com/event.target/}
   */
  target: Element;
  /**
   * The mouse position relative to the left edge of the document.
   * @see {@link https://api.jquery.com/event.pageX/}
   */
  pageX: number;
  /**
   * The mouse position relative to the top edge of the document.
   * @see {@link https://api.jquery.com/event.pageY/}
   */
  pageY: number;
  /**
   * For key or mouse events, this property indicates the specific key or button that was pressed.
   * @see {@link https://api.jquery.com/event.which/}
   */
  which: number;
  /**
   * Indicates whether the META key was pressed when the event fired.
   * @see {@link https://api.jquery.com/event.metaKey/}
   */
  metaKey: boolean;
}
/**
* @deprecated
*/
interface JQueryInputEventObject extends BaseJQueryEventObject {
  altKey: boolean;
  ctrlKey: boolean;
  metaKey: boolean;
  shiftKey: boolean;
}
/**
* @deprecated
*/
interface JQueryMouseEventObject extends JQueryInputEventObject {
  button: number;
  clientX: number;
  clientY: number;
  offsetX: number;
  offsetY: number;
  pageX: number;
  pageY: number;
  screenX: number;
  screenY: number;
}
/**
* @deprecated
*/
interface JQueryKeyEventObject extends JQueryInputEventObject {
  char: any;
  charCode: number;
  key: any;
  keyCode: number;
}
/**
* @deprecated
*/
interface JQueryEventObject extends BaseJQueryEventObject, JQueryInputEventObject, JQueryMouseEventObject, JQueryKeyEventObject { }
/**
* @deprecated
*/
interface JQueryPromiseOperator<T, U> {
  (callback1: JQuery.TypeOrArray<JQueryPromiseCallback<T>>,
   ...callbacksN: Array<JQuery.TypeOrArray<JQueryPromiseCallback<any>>>): JQueryPromise<U>;
}
/**
* @deprecated
*/
interface JQueryEasingFunction {
  (percent: number): number;
}
/**
* @deprecated
*/
interface JQueryEasingFunctions {
  [name: string]: JQueryEasingFunction;
  linear: JQueryEasingFunction;
  swing: JQueryEasingFunction;
}

// endregion
/*
 * This work, mw.d.ts, is a derivative of "MediaWiki Core Documentation" by MediaWiki.org, used under CC BY.
 * Source: https://doc.wikimedia.org/mediawiki-core/master/js/
 */
interface WikiaGlobals {
  mw: typeof mw;
  $: JQueryStatic;
}
/**
 * Base library for MediaWiki.
 * Exposed globally as mediaWiki with mw as shortcut.
 */
declare namespace mw {
  /**
   * Create an object that can be read from or written to via methods that allow interaction both with single and multiple properties at once.
   */
  class Map {
    /**
     * Create an object that can be read from or written to via methods that allow interaction both with single and multiple properties at once.
     * @param global Whether to synchronise values to the global window object. Values are copied in one direction only. Changes to globals do not reflect in the map.
     */
    constructor(global?: boolean);
    /**
     * Check if one or more keys exist.
     * @param selection Key or array of keys to check.
     */
    exists(selection: string | string[]): boolean;
    /**
     * Get the value of one or more keys.
     * @param selection Key or array of keys to retrieve values for.
     * @param fallback Value for keys that don't exist.
     */
    get(selection?: string | string[], fallback?: any): object | any | null;
    /**
     * Set one or more key/value pairs.
     * @param selection Key to set value for, or object mapping keys to values.
     * @param value Value to set (optional, only in use when key is a string).
     */
    set(selection: string | object, value?: any): boolean;
  }
  /**
   * Map of configuration values.
   */
  const config: Map;
  /**
   * Empty object for third-party libraries, for cases where you don't want to add a new global, or the global is bad and needs containment or wrapping.
   */
  const libs: object;
  /**
   * Store for messages.
   */
  const messages: Map;
  /**
   * Registry and firing of events.
   */
  interface Hook {
    /**
     * Register a hook handler.
     * @param handler Function to bind.
     */
    add(handler: (data: any) => void): Hook;
    /**
     * Run a hook.
     * @param data Data to pass.
     */
    fire(data: any): Hook;
    /**
     * Unregister a hook handler.
     * @param handler Function to unbind.
     */
    remove(handler: (data: any) => void): Hook;
  }
  /**
   * Create an instance of mw.hook.
   * @param name Name of hook.
   */
  function hook(name: string): Hook;
  /**
   * Utility library.
   */
  namespace util {
    /**
     * The content wrapper of the skin (e.g. .mw-body).
     * Populated on document ready. To use this property, wait for $.ready and be sure to have a module dependency on mediawiki.util which will ensure your document ready handler fires after initialization.
     * Because of the lazy-initialised nature of this property, you're discouraged from using it.
     */
    const $content: JQuery<HTMLElement>;
    /**
     * Append a new style block to the head and return the CSSStyleSheet object.
     * @param text CSS to be appended.
     */
    function addCSS(text: string): object;
    /**
     * Grab the URL parameter value for the given parameter. Returns null if not found.
     * @param param The parameter name.
     * @param url URL to search through, defaulting to the current browsing location.
     */
    function getParamValue(param: string, url?: string): any;
    /**
     * Get the link to a page name (relative to wgServer).
     * @param pageName Page name.
     * @param params A mapping of query parameter names to values, e.g. { action: 'edit' }.
     */
    function getUrl(pageName?: string | null, params?: object): string;
    /**
     * Note: borrows from IP::isIPv4.
     */
    function isIPv4Address(address: string, allowBlock?: boolean): boolean;
    /**
     * Note: borrows from IP::isIPv6.
     */
    function isIPv6Address(address: string, allowBlock?: boolean): boolean;
    /**
     * Encode the string like PHP's rawurlencode.
     * @param str String to be encoded.
     */
    function rawurlencode(str: string): string;
    /**
     * Validate a string as representing a valid e-mail address according to HTML5 specification.
     * @param mailtxt E-mail address to be validated.
     */
    function validateEmail(mailtxt: string): boolean | null;
    /**
     * Get address to a script in the wiki root. For index.php use mw.config.get('wgScript').
     * @param str Name of script (e.g. 'api'), defaults to 'index'.
     */
    function wikiScript(str: string): string;
    /**
     * Encode page titles for use in a URL.
     * @param str String to be encoded.
     */
    function wikiUrlencode(str: string): string;
  }
}
/**
 * Base library for MediaWiki.
 * Exposed globally as mediaWiki with mw as shortcut.
 */
declare const mediawiki: typeof mw;
